{"version":3,"file":"8186.fe0d0f44.iframe.bundle.js","mappings":";;;;;AASA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACqCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsFA;;;;;;;;;;;;;;;;;;;;;;;;;;AC1GA;;;;;ACrBA;ACJA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC0BA;;;;;;;;;;;AChBA;ACVA;;;;;;;;;;;;;;;;;;ACiBA;;;ACfA;;AAEA;ACJA;AACA;;;;;;;;;AASA;;;;;;;;;ACFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2GA;;;;;;AC9GA;;;AAGA;;AAEA;;;;AAIA;;;;;;;;;;AAUA;;;AAGA;;;;AAIA;;;;;AAKA;;;;;;;;;;;;;;;;;;;AAmBA;;ACtDA;;;;ACEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;AAGA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AACA;AACA","sources":["webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/ColorMaterial.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/HighlightApply.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/HighlightDownsample.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/HighlightToSingle.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/OverlayCompositing.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/SingleHighlightApply.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/SingleHighlightBlur.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/TextureOnly.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/HighlightCellGridScreenSpacePass.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/FoamRendering.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/Gamma.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/ScreenSpaceReflections.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/CloudsParallaxShading.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/shaders/ToneMapping.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/Water.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{SliceDraw as e}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as r}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{ObjectAndLayerIdColor as o}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js\";import{VertexColor as i}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{terrainDepthTest as l}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/TerrainDepthTest.glsl.js\";import{VisualVariables as s}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{ColorConversion as t}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{addProjViewLocalOrigin as d}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float4PassUniform as n}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{glsl as a}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{VertexAttribute as g}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{outputColorHighlightOID as v}from\"../views/3d/webgl-engine/shaders/OutputColorHighlightOID.glsl.js\";import{ShaderBuilder as b}from\"../views/webgl/ShaderBuilder.js\";function c(c){const m=new b,{vertex:u,fragment:w,attributes:p,varyings:f}=m,{vvColor:h,hasVertexColors:C}=c;return d(u,c),m.include(r,c),m.include(i,c),m.include(s,c),m.include(o,c),w.include(e,c),m.include(v,c),m.include(l,c),p.add(g.POSITION,\"vec3\"),h&&p.add(g.COLORFEATUREATTRIBUTE,\"float\"),C||f.add(\"vColor\",\"vec4\"),f.add(\"vpos\",\"vec3\"),u.uniforms.add(new n(\"uColor\",(e=>e.color))),u.main.add(a`\n      vpos = position;\n      forwardNormalizedVertexColor();\n      forwardObjectAndLayerIdColor();\n\n      ${C?\"vColor *= uColor;\":h?\"vColor = uColor * interpolateVVColor(colorFeatureAttribute);\":\"vColor = uColor;\"}\n      forwardViewPosDepth((view * vec4(vpos, 1.0)).xyz);\n      gl_Position = transformPosition(proj, view, vpos);`),w.include(t),w.main.add(a`discardBySlice(vpos);\ndiscardByTerrainDepth();\noutputColorHighlightOID(vColor, vpos);`),m}const m=Object.freeze(Object.defineProperty({__proto__:null,build:c},Symbol.toStringTag,{value:\"Module\"}));export{m as C,c as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{HighlightCellGridScreenSpacePass as e}from\"../views/3d/webgl-engine/core/shaderLibrary/HighlightCellGridScreenSpacePass.glsl.js\";import{HighlightReadBitmap as l}from\"../views/3d/webgl-engine/core/shaderLibrary/HighlightReadBitmap.glsl.js\";import{FloatPassUniform as i}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as t}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{IntegerBindUniform as o}from\"../views/3d/webgl-engine/core/shaderModules/IntegerBindUniform.js\";import{Texture2DPassUniform as n}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{ShaderBuilder as r}from\"../views/webgl/ShaderBuilder.js\";function a(){const a=new r;a.include(e);const{fragment:c}=a;return c.uniforms.add(new n(\"highlightTexture\",(e=>e.highlightTexture)),new n(\"highlightOptionsTexture\",(e=>e.highlightOptionsTexture)),new i(\"pixelRatio\",(e=>e.pixelRatio)),new i(\"occludedIntensityFactor\",(e=>e.occludedFactor)),new o(\"maxHighlightLevel\",(e=>e.highlights.length-1))),c.constants.add(\"pixelSampleScale\",\"float\",1),a.include(l),c.code.add(t`const float pascal17[9] = float[9](12870.0, 11440.0, 8008.0, 4368.0, 1820.0, 560.0, 120.0, 16.0, 1.0);\nconst float denom17 =  65536.0;\nfloat colorWeight[16] = float[16](0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\nfloat colorOcclusion[16] = float[16](0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\nfloat weights[16] = float[16](0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\nvoid applyTexel(vec2 texel, float weight) {\nif (texel != vec2(0.0)){\nint maxChannel = (maxHighlightLevel >> 2) & 1;\nfor (int channelIndex = 0; channelIndex <= maxChannel; ++channelIndex){\nuint channel = readChannel(texel, channelIndex << 2);\nint firstIndex = channelIndex << 2;\nint maxIndex  = min(firstIndex + 3, maxHighlightLevel);\nfor (int highlightIndex = firstIndex; highlightIndex <= maxIndex; ++highlightIndex ) {\nuint v = readChannelBits(channel, highlightIndex);\nif ((v & 1u) == 1u){\ncolorWeight[highlightIndex] += weight;\nif ((v & 2u) == 2u){\ncolorOcclusion[highlightIndex] += weight;\n}\n}\n}\n}\n}\n}\nvec2 readTexel(ivec2 iuv, int du, int dv) {\nreturn texelFetch(highlightTexture, iuv + ivec2(du, dv), 0).rg;\n}\nvoid readAndApplyTexel(ivec2 iuv, int du, int dv, float weight) {\nvec2 texel = readTexel(iuv, du, dv);\napplyTexel(texel, weight);\n}\nvoid readAndApply2TexelsU(ivec2 iuv, int du, int dv, float weight) {\nreadAndApplyTexel(iuv, -du, dv, weight);\nreadAndApplyTexel(iuv, +du, dv, weight);\n}\nfloat getWeight(int pixelDistance) {\nfloat scaledDistance = float(pixelDistance) * pixelSampleScale / pixelRatio;\nfloat d0f = floor(scaledDistance);\nint d0 = int(d0f);\nif (d0 >= 8){\nreturn 0.0;\n}\nfloat w0 = pascal17[d0];\nfloat w1 = pascal17[d0+1];\nfloat f =  scaledDistance - d0f;\nreturn mix(w0, w1, f);\n}`),c.main.add(t`vec2 highlightTextureSize = vec2(textureSize(highlightTexture,0));\nivec2 iuv = ivec2(sUV * highlightTextureSize);\nvec2 centerTexel = texelFetch(highlightTexture, iuv, 0).rg;\nbool outlinePossible = false;\nif (vOutlinePossible > 0.0){\nfor (int highlightLevel=0; highlightLevel<= maxHighlightLevel; ++highlightLevel) {\nif ((readLevelBits(centerTexel,highlightLevel) & 1u) == 0u) {\noutlinePossible = true;\nbreak;\n}\n}\n}\nif (outlinePossible) {\nint maxPixelDistance = clamp(int(8.0 * pixelRatio / pixelSampleScale), 2, 16);\nfloat weightSum = 0.0;\nfor(int y = 0; y <= maxPixelDistance; ++y) {\nfloat w = getWeight(y);\nweights[y] = w;\nweightSum += w * (y == 0 ? 1.0 : 2.0);\n}\nfor(int y = 0; y <= maxPixelDistance; ++y) {\nweights[y] = weights[y] / weightSum;\n}\nfloat weight0 = weights[0];\napplyTexel(centerTexel, weight0 * weight0);\nfor(int y = 0; y <= maxPixelDistance; y += 1) {\nfloat yFactor = weights[y];\nif (y != 0) {\nfloat xFactor = weight0;\nfloat weight = xFactor * yFactor;\nif (weight > 0.0) {\nreadAndApplyTexel(iuv, 0, +y, weight);\nreadAndApplyTexel(iuv, 0, -y, weight);\n}\n}\nfor(int x = 1; x <= maxPixelDistance; x += 1) {\nfloat xFactor = weights[x];\nfloat weight = xFactor * yFactor;\nif (weight > 0.0) {\nreadAndApply2TexelsU(iuv, x, +y, weight);\nif (y != 0){\nreadAndApply2TexelsU(iuv, x, -y, weight);\n}\n}\n}\n}\n} else {\napplyTexel(centerTexel, 1.0);\n}\nint frontColorIndex = 999;\nint maxColorIndex = 0;\nfor (int i = 0; i <= maxHighlightLevel; ++i) {\nif (colorWeight[i] > 0.0){\nfrontColorIndex = min(frontColorIndex, i);\nmaxColorIndex = max(maxColorIndex, i);\n}\n}\nif (frontColorIndex == 999){\nfragColor = vec4(0.0);\nreturn;\n}\nvec4 accumulatedColor = vec4(0.0);\nfor (int curColorIndex = frontColorIndex; curColorIndex <= maxColorIndex; ++curColorIndex) {\nfloat curColorWeight = colorWeight[curColorIndex];\nif (curColorWeight <= 0.01){\ncontinue;\n}\nuint vc = readLevelBits(centerTexel, curColorIndex);\nbool centerFilled = (vc & 1u) == 1u;\nbool centerOccluded = (vc & 3u) == 3u;\nfloat curColorOcclusion = colorOcclusion[curColorIndex];\nbool occluded = centerFilled ? centerOccluded : curColorOcclusion > 0.5 * curColorWeight;\nint colorChannel = centerFilled ? 0 : 1;\nvec4 colorBase = texelFetch(highlightOptionsTexture, ivec2(curColorIndex, colorChannel), 0);\nfloat occlusionFactor = occluded ? occludedIntensityFactor : 1.0;\nfloat outlineFactor = centerFilled ? 1.0 : smoothstep(0.0, 0.03, curColorWeight);\nfloat intensity = colorBase.a * occlusionFactor * outlineFactor;\nvec3 currentColor = colorBase.rgb;\nfloat a0 = accumulatedColor.a;\nfloat a1 = intensity;\nfloat alpha = clamp(a0 + a1 - a0 * a1, 0.0, 1.0);\nif (alpha > 0.001){\nvec3 blendedColor = ((1.0 - a1) * a0 * accumulatedColor.rgb + a1 * currentColor) / alpha;\naccumulatedColor = vec4(blendedColor, alpha);\n}\n}\nfragColor = accumulatedColor;`),a}const c=Object.freeze(Object.defineProperty({__proto__:null,build:a},Symbol.toStringTag,{value:\"Module\"}));export{c as H,a as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{ScreenSpacePass as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";import{glsl as t}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{Texture2DDrawUniform as i}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DDrawUniform.js\";import{NoParameters as r}from\"../views/webgl/NoParameters.js\";import{ShaderBuilder as l}from\"../views/webgl/ShaderBuilder.js\";class u extends r{}function o(){const r=new l,{outputs:u,fragment:o}=r;return r.include(e),o.uniforms.add(new i(\"textureInput\",(e=>e.input))),o.constants.add(\"outlineWidth\",\"int\",Math.ceil(n)),o.constants.add(\"cellSize\",\"int\",c),u.add(\"fragGrid\",\"vec2\"),o.main.add(t`ivec2 inputTextureSize = textureSize(textureInput, 0);\nivec2 cellBottomLeftCornerInput = ivec2(floor(gl_FragCoord.xy) * vec2(cellSize));\nivec2 coordMid =  cellBottomLeftCornerInput + ivec2(cellSize >> 1);\nuvec2 centreTexel = uvec2( texelFetch(textureInput, coordMid, 0).rg * 255.0) & uvec2(0x55u);\nfloat marginSquare = float(outlineWidth*outlineWidth);\nuvec2 outputValue = centreTexel & uvec2(0x55u);\nfor(int y = -outlineWidth; y <= cellSize + outlineWidth; y+=2) {\nint dy = y < 0 ? -y : y > cellSize ? y-cellSize : 0;\nint xMargin = dy > 0 ? int(ceil(sqrt(marginSquare - float(dy*dy)))) : outlineWidth;\nfor(int x = -xMargin; x <= cellSize + xMargin; x+=2) {\nivec2 coord = cellBottomLeftCornerInput + ivec2(x, y);\nuvec2[4] texels = uvec2[4] (\nuvec2(texelFetch(textureInput,coord+ivec2(0,0),0).rg * 255.0) & uvec2(0x55u),\nuvec2(texelFetch(textureInput,coord+ivec2(1,0),0).rg * 255.0) & uvec2(0x55u),\nuvec2(texelFetch(textureInput,coord+ivec2(0,1),0).rg * 255.0) & uvec2(0x55u),\nuvec2(texelFetch(textureInput,coord+ivec2(1,1),0).rg * 255.0) & uvec2(0x55u)\n);\nif (texels[0] == texels[1] && texels[1] == texels[2] && texels[2] == texels[3] && texels[3] ==  centreTexel) {\ncontinue;\n}\nfor (int i=0; i<4; ++i){\noutputValue |= ((texels[i] ^ centreTexel) << 1);\noutputValue |= texels[i];\n}\n}\n}\nfragGrid = vec2(outputValue) / 255.0;`),r}const c=32,n=9,a=.4,s=Object.freeze(Object.defineProperty({__proto__:null,HighlightDownsampleDrawParameters:u,blurSize:a,build:o,gridCellPixelSize:c,outlineSize:n},Symbol.toStringTag,{value:\"Module\"}));export{u as H,s as a,a as b,o as c,c as g,n as o};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{HighlightCellGridScreenSpacePass as e}from\"../views/3d/webgl-engine/core/shaderLibrary/HighlightCellGridScreenSpacePass.glsl.js\";import{HighlightReadBitmap as i}from\"../views/3d/webgl-engine/core/shaderLibrary/HighlightReadBitmap.glsl.js\";import{glsl as r}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{IntegerPassUniform as l}from\"../views/3d/webgl-engine/core/shaderModules/IntegerPassUniform.js\";import{Texture2DPassUniform as g}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{ShaderBuilder as t}from\"../views/webgl/ShaderBuilder.js\";function s(){const s=new t;s.include(e),s.include(i);const{fragment:h}=s;return s.outputs.add(\"fragSingleHighlight\",\"vec2\",0),h.uniforms.add(new g(\"highlightTexture\",(e=>e.highlightTexture)),new l(\"highlightLevel\",(e=>e.highlightLevel))),h.main.add(r`ivec2 iuv = ivec2(gl_FragCoord.xy);\nvec2 inputTexel = texelFetch(highlightTexture, iuv, 0).rg;\nuint bits = readLevelBits(inputTexel, highlightLevel);\nbool hasHighlight = (bits & 1u) == 1u;\nbool hasOccluded  = (bits & 2u) == 2u;\nfragSingleHighlight = vec2(hasHighlight ? 1.0 : 0.0, hasOccluded ? 1.0 : 0.0);`),s}const h=Object.freeze(Object.defineProperty({__proto__:null,build:s},Symbol.toStringTag,{value:\"Module\"}));export{h as H,s as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{OverlayIndex as e}from\"../views/3d/terrain/interfaces.js\";import{ScreenSpacePass as r}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";import{FloatPassUniform as o}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as s}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{IntegerPassUniform as a}from\"../views/3d/webgl-engine/core/shaderModules/IntegerPassUniform.js\";import{Texture2DPassUniform as t}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{NoParameters as i}from\"../views/webgl/NoParameters.js\";import{ShaderBuilder as n}from\"../views/webgl/ShaderBuilder.js\";class d extends i{constructor(){super(...arguments),this.overlayIndex=e.INNER,this.opacity=1}}function l(){const e=new n;return e.include(r),e.fragment.uniforms.add(new t(\"tex\",(e=>e.texture))),e.fragment.uniforms.add(new a(\"overlayIdx\",(e=>e.overlayIndex))),e.fragment.uniforms.add(new o(\"opacity\",(e=>e.opacity))),e.fragment.main.add(s`vec2 overlayUV = overlayIdx == 0 ? vec2(uv.x * 0.5, uv.y) : vec2(uv.x * 0.5 + 0.5, uv.y);\nfragColor = texture(tex, overlayUV) * opacity;`),e}const m=Object.freeze(Object.defineProperty({__proto__:null,OverlayCompositingPassParameters:d,build:l},Symbol.toStringTag,{value:\"Module\"}));export{d as O,m as a,l as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{HighlightCellGridScreenSpacePass as e}from\"../views/3d/webgl-engine/core/shaderLibrary/HighlightCellGridScreenSpacePass.glsl.js\";import{HighlightReadBitmap as t}from\"../views/3d/webgl-engine/core/shaderLibrary/HighlightReadBitmap.glsl.js\";import{Float2DrawUniform as i}from\"../views/3d/webgl-engine/core/shaderModules/Float2DrawUniform.js\";import{FloatPassUniform as l}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as r}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{IntegerPassUniform as o}from\"../views/3d/webgl-engine/core/shaderModules/IntegerPassUniform.js\";import{Texture2DPassUniform as n}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{o as g,b as u}from\"./HighlightDownsample.glsl.js\";import{ShaderBuilder as h}from\"../views/webgl/ShaderBuilder.js\";function s(){const s=new h;s.include(e);const{fragment:c}=s;return c.uniforms.add(new n(\"blurInput\",(e=>e.singleHighlightBlurTexture)),new i(\"blurSize\",(e=>e.blurSize)),new n(\"highlightTexture\",(e=>e.highlightTexture)),new n(\"highlightOptionsTexture\",(e=>e.highlightOptionsTexture)),new o(\"highlightLevel\",(e=>e.highlightLevel)),new l(\"occludedIntensityFactor\",(e=>e.occludedFactor))),c.constants.add(\"inner\",\"float\",1-(g-u)/g),s.include(t),c.main.add(r`vec2 highlightTextureSize = vec2(textureSize(highlightTexture,0));\nvec2 uv = sUV;\nvec2 center = texture(blurInput, uv).rg;\nvec2 blurredHighlightValue = (vOutlinePossible == 0.0)\n? center\n: center * 0.204164\n+ texture(blurInput, uv + blurSize * 1.407333).rg * 0.304005\n+ texture(blurInput, uv - blurSize * 1.407333).rg * 0.304005\n+ texture(blurInput, uv + blurSize * 3.294215).rg * 0.093913\n+ texture(blurInput, uv - blurSize * 3.294215).rg * 0.093913;\nfloat highlightIntensity = blurredHighlightValue.r;\nfloat occlusionWeight = blurredHighlightValue.g;\nif (highlightIntensity <= 0.01) {\ndiscard;\n}\nvec4 fillColor    = texelFetch(highlightOptionsTexture, ivec2(highlightLevel, 0), 0);\nvec4 outlineColor = texelFetch(highlightOptionsTexture, ivec2(highlightLevel, 1), 0);\nvec2 centerTexel = texelFetch(highlightTexture, ivec2(uv * highlightTextureSize), 0).rg;\nuint centerBits = readLevelBits(centerTexel, highlightLevel);\nbool centerFilled = (centerBits & 1u) == 1u;\nbool centerOccluded = (centerBits & 3u) == 3u;\nbool occluded = centerOccluded || (0.5 * highlightIntensity < occlusionWeight);\nfloat occlusionFactor = occluded ? occludedIntensityFactor : 1.0;\nfloat outlineFactor = centerFilled ? 1.0 : smoothstep(0.0, inner, highlightIntensity);\nfloat fillFactor = centerFilled ? 1.0 : 0.0;\nvec4 baseColor = mix(outlineColor, fillColor, fillFactor);\nfloat intensity = baseColor.a * occlusionFactor * outlineFactor;\nfragColor = vec4(baseColor.rgb, intensity);`),s}const c=Object.freeze(Object.defineProperty({__proto__:null,build:s},Symbol.toStringTag,{value:\"Module\"}));export{c as S,s as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{create as e}from\"../core/libs/gl-matrix-2/factories/vec2f64.js\";import{HighlightCellGridScreenSpacePass as r}from\"../views/3d/webgl-engine/core/shaderLibrary/HighlightCellGridScreenSpacePass.glsl.js\";import{Float2DrawUniform as t}from\"../views/3d/webgl-engine/core/shaderModules/Float2DrawUniform.js\";import{glsl as i}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{Texture2DDrawUniform as l}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DDrawUniform.js\";import{NoParameters as s}from\"../views/webgl/NoParameters.js\";import{ShaderBuilder as u}from\"../views/webgl/ShaderBuilder.js\";class n extends s{constructor(){super(...arguments),this.blurSize=e()}}function o(){const e=new u;return e.include(r),e.outputs.add(\"fragSingleHighlight\",\"vec2\",0),e.fragment.uniforms.add(new t(\"blurSize\",(e=>e.blurSize)),new l(\"blurInput\",(e=>e.blurInput))).main.add(i`vec2 highlightTextureSize = vec2(textureSize(blurInput,0));\nvec2 center = texture(blurInput, sUV).rg;\nif (vOutlinePossible == 0.0) {\nfragSingleHighlight = center;\n} else {\nvec2 sum = center * 0.204164;\nsum += texture(blurInput, sUV + blurSize * 1.407333).rg * 0.304005;\nsum += texture(blurInput, sUV - blurSize * 1.407333).rg * 0.304005;\nsum += texture(blurInput, sUV + blurSize * 3.294215).rg * 0.093913;\nsum += texture(blurInput, sUV - blurSize * 3.294215).rg * 0.093913;\nfragSingleHighlight = sum;\n}`),e}const g=Object.freeze(Object.defineProperty({__proto__:null,SingleHighlightBlurDrawParameters:n,build:o},Symbol.toStringTag,{value:\"Module\"}));export{n as S,g as a,o as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{fromValues as e}from\"../core/libs/gl-matrix-2/factories/vec3f64.js\";import{ScreenSpacePass as r}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";import{Float3PassUniform as o}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{glsl as s}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{Texture2DPassUniform as t}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{NoParameters as l}from\"../views/webgl/NoParameters.js\";import{ShaderBuilder as i}from\"../views/webgl/ShaderBuilder.js\";class a extends l{constructor(){super(...arguments),this.color=e(1,1,1)}}function n(){const e=new i;return e.include(r),e.fragment.uniforms.add(new t(\"tex\",(e=>e.texture)),new o(\"uColor\",(e=>e.color))),e.fragment.main.add(s`vec4 texColor = texture(tex, uv);\nfragColor = texColor * vec4(uColor, 1.0);`),e}const m=Object.freeze(Object.defineProperty({__proto__:null,TextureOnlyPassParameters:a,build:n},Symbol.toStringTag,{value:\"Module\"}));export{a as T,m as a,n as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{set as e}from\"../../../../../core/libs/gl-matrix-2/math/vec2.js\";import{create as l}from\"../../../../../core/libs/gl-matrix-2/factories/vec2f64.js\";import{glsl as i}from\"../shaderModules/glsl.js\";import{Integer2PassUniform as t}from\"../shaderModules/Integer2PassUniform.js\";import{IntegerPassUniform as o}from\"../shaderModules/IntegerPassUniform.js\";import{Texture2DPassUniform as n}from\"../shaderModules/Texture2DPassUniform.js\";import{g as c}from\"../../../../../chunks/HighlightDownsample.glsl.js\";function s(l){const{vertex:s}=l;s.uniforms.add(new n(\"coverageTexture\",(e=>e.coverageTexture)),new t(\"highlightRenderCellCount\",(l=>e(r,l.horizontalCellCount,l.verticalCellCount))),new t(\"highlightTextureResolution\",(({highlightTexture:l})=>e(r,l.descriptor.width,l.descriptor.height))),new o(\"highlightLevel\",(e=>e.highlightLevel))).constants.add(\"cellSize\",\"int\",c),l.varyings.add(\"sUV\",\"vec2\"),l.varyings.add(\"vOutlinePossible\",\"float\"),s.code.add(i`const ivec2 cellVertices[4] = ivec2[4](ivec2(0,0), ivec2(1,0), ivec2(0,1), ivec2(1,1));`).main.add(i`int cellIndex = gl_InstanceID;\nint cellX = cellIndex % highlightRenderCellCount[0];\nint cellY = (cellIndex - cellX) / highlightRenderCellCount[0];\nivec2 cellPos = ivec2(cellX, cellY);\nuvec2 covTexel = uvec2(texelFetch(coverageTexture, cellPos, 0).rg * 255.0);\nint channelIndex = (highlightLevel >> 2) & 3;\nuint channelValue = covTexel[channelIndex];\nint highlightIndex = (highlightLevel & 3) << 1;\nbool covered = ((channelValue >> highlightIndex) & 1u) == 1u;\nif (!covered) {\ngl_Position = vec4(0.0);\nreturn;\n}\nvOutlinePossible = (((channelValue >> highlightIndex) & 2u) == 2u) ? 1.0 : 0.0;\nivec2 iPosInCell = cellVertices[gl_VertexID];\nvec2 sPos = vec2(cellPos * cellSize + iPosInCell * (cellSize));\nvec2 vPos = sPos / vec2(highlightTextureResolution);\nsUV = vPos;\ngl_Position = vec4(2.0 * vPos - vec2(1.0), 0.0, 1.0);`)}const r=l();export{s as HighlightCellGridScreenSpacePass};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{glsl as t}from\"../../shaderModules/glsl.js\";function o(o){o.fragment.code.add(t`float normals2FoamIntensity(vec3 n, float waveStrength){\nfloat normalizationFactor =  max(0.015, waveStrength);\nreturn max((n.x + n.y)*0.3303545/normalizationFactor + 0.3303545, 0.0);\n}`)}function n(o){o.fragment.code.add(t`vec3 foamIntensity2FoamColor(float foamIntensityExternal, float foamPixelIntensity, vec3 skyZenitColor, float dayMod){\nreturn foamIntensityExternal * (0.075 * skyZenitColor * pow(foamPixelIntensity, 4.) +  50.* pow(foamPixelIntensity, 23.0)) * dayMod;\n}`)}export{n as FoamColor,o as FoamIntensity};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{colorGamma as o}from\"../../../../../../colorUtils.js\";import{glsl as r}from\"../../shaderModules/glsl.js\";function e(e){e.fragment.code.add(r`\n    const float GAMMA = ${r.float(o)};\n    const float INV_GAMMA = ${r.float(1/o)};\n\n    vec4 delinearizeGamma(vec4 color) {\n      return vec4(pow(color.rgb, vec3(INV_GAMMA)), color.a);\n    }\n\n    vec3 linearizeGamma(vec3 color) {\n      return pow(color, vec3(GAMMA));\n    }\n  `)}export{e as Gamma};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{ReadDepth as e}from\"../output/ReadDepth.glsl.js\";import{Float2BindUniform as t}from\"../../shaderModules/Float2BindUniform.js\";import{FloatBindUniform as o}from\"../../shaderModules/FloatBindUniform.js\";import{glsl as r}from\"../../shaderModules/glsl.js\";import{Matrix4BindUniform as i}from\"../../shaderModules/Matrix4BindUniform.js\";import{Texture2DBindUniform as a}from\"../../shaderModules/Texture2DBindUniform.js\";function d(d,n){if(!n.screenSpaceReflections)return;const c=d.fragment;c.include(e),c.uniforms.add(new t(\"nearFar\",(e=>e.camera.nearFar)),new a(\"depthMap\",(e=>e.depth?.attachment)),new i(\"proj\",(e=>e.camera.projectionMatrix)),new o(\"invResolutionHeight\",(e=>1/e.camera.height)),new i(\"reprojectionMatrix\",(e=>e.ssr.reprojectionMatrix))).code.add(r`\n  vec2 reprojectionCoordinate(vec3 projectionCoordinate)\n  {\n    vec4 zw = proj * vec4(0.0, 0.0, -projectionCoordinate.z, 1.0);\n    vec4 reprojectedCoord = reprojectionMatrix * vec4(zw.w * (projectionCoordinate.xy * 2.0 - 1.0), zw.z, zw.w);\n    reprojectedCoord.xy /= reprojectedCoord.w;\n    return reprojectedCoord.xy * 0.5 + 0.5;\n  }\n\n  const int maxSteps = ${n.highStepCount?\"150\":\"75\"};\n\n  vec4 applyProjectionMat(mat4 projectionMat, vec3 x)\n  {\n    vec4 projectedCoord =  projectionMat * vec4(x, 1.0);\n    projectedCoord.xy /= projectedCoord.w;\n    projectedCoord.xy = projectedCoord.xy*0.5 + 0.5;\n    return projectedCoord;\n  }\n\n  vec3 screenSpaceIntersection(vec3 dir, vec3 startPosition, vec3 viewDir, vec3 normal)\n  {\n    vec3 viewPos = startPosition;\n    vec3 viewPosEnd = startPosition;\n\n    // Project the start position to the screen\n    vec4 projectedCoordStart = applyProjectionMat(proj, viewPos);\n    vec3  Q0 = viewPos / projectedCoordStart.w; // homogeneous camera space\n    float k0 = 1.0/ projectedCoordStart.w;\n\n    // advance the position in the direction of the reflection\n    viewPos += dir;\n\n    vec4 projectedCoordVanishingPoint = applyProjectionMat(proj, dir);\n\n    // Project the advanced position to the screen\n    vec4 projectedCoordEnd = applyProjectionMat(proj, viewPos);\n    vec3  Q1 = viewPos / projectedCoordEnd.w; // homogeneous camera space\n    float k1 = 1.0/ projectedCoordEnd.w;\n\n    // calculate the reflection direction in the screen space\n    vec2 projectedCoordDir = (projectedCoordEnd.xy - projectedCoordStart.xy);\n    vec2 projectedCoordDistVanishingPoint = (projectedCoordVanishingPoint.xy - projectedCoordStart.xy);\n\n    float yMod = min(abs(projectedCoordDistVanishingPoint.y), 1.0);\n\n    float projectedCoordDirLength = length(projectedCoordDir);\n    float maxSt = float(maxSteps);\n\n    // normalize the projection direction depending on maximum steps\n    // this determines how blocky the reflection looks\n    vec2 dP = yMod * (projectedCoordDir)/(maxSt * projectedCoordDirLength);\n\n    // Normalize the homogeneous camera space coordinates\n    vec3  dQ = yMod * (Q1 - Q0)/(maxSt * projectedCoordDirLength);\n    float dk = yMod * (k1 - k0)/(maxSt * projectedCoordDirLength);\n\n    // initialize the variables for ray marching\n    vec2 P = projectedCoordStart.xy;\n    vec3 Q = Q0;\n    float k = k0;\n    float rayStartZ = -startPosition.z; // estimated ray start depth value\n    float rayEndZ = -startPosition.z;   // estimated ray end depth value\n    float prevEstimateZ = -startPosition.z;\n    float rayDiffZ = 0.0;\n    float dDepth;\n    float depth;\n    float rayDiffZOld = 0.0;\n\n    // early outs\n    if (dot(normal, dir) < 0.0 || dot(-viewDir, normal) < 0.0)\n      return vec3(P, 0.0);\n    float dDepthBefore = 0.0;\n\n    for(int i = 0; i < maxSteps-1; i++)\n    {\n      depth = -linearDepthFromTexture(depthMap, P); // get linear depth from the depth buffer\n\n      // estimate depth of the marching ray\n      rayStartZ = prevEstimateZ;\n      dDepth = -rayStartZ - depth;\n      rayEndZ = (dQ.z * 0.5 + Q.z)/ ((dk * 0.5 + k));\n      rayDiffZ = rayEndZ- rayStartZ;\n      prevEstimateZ = rayEndZ;\n\n      if(-rayEndZ > nearFar[1] || -rayEndZ < nearFar[0] || P.y < 0.0  || P.y > 1.0 )\n      {\n        return vec3(P, 0.);\n      }\n\n      // If we detect a hit - return the intersection point, two conditions:\n      //  - dDepth > 0.0 - sampled point depth is in front of estimated depth\n      //  - if difference between dDepth and rayDiffZOld is not too large\n      //  - if difference between dDepth and 0.025/abs(k) is not too large\n      //  - if the sampled depth is not behind far plane or in front of near plane\n\n      if((dDepth) < 0.025/abs(k) + abs(rayDiffZ) && dDepth > 0.0 && depth > nearFar[0] && depth < nearFar[1] && abs(P.y - projectedCoordStart.y) > invResolutionHeight)\n      {\n        float weight = dDepth / (dDepth - dDepthBefore);\n        vec2 Pf = mix(P - dP, P, 1.0 - weight);\n        if (abs(Pf.y - projectedCoordStart.y) > invResolutionHeight) {\n          return vec3(Pf, depth);\n        }\n        else {\n          return vec3(P, depth);\n        }\n      }\n\n      // continue with ray marching\n      P = clamp(P + dP, vec2(0.0), vec2(0.999));\n      Q.z += dQ.z;\n      k += dk;\n      rayDiffZOld = rayDiffZ;\n      dDepthBefore = dDepth;\n    }\n    return vec3(P, 0.0);\n  }\n  `)}export{d as ScreenSpaceReflections};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{fromValues as o}from\"../../../../../../core/libs/gl-matrix-2/factories/vec3f64.js\";import{earth as t}from\"../../../../../../geometry/support/Ellipsoid.js\";import{CloudsTextureChannels as e}from\"../../../../environment/Clouds.js\";import{FadeState as a}from\"../../../../environment/CloudsParameters.js\";import{cloudsHeight as r}from\"../../../../environment/weather.js\";import{addMainLightDirection as i,addMainLightIntensity as c}from\"../shading/MainLighting.glsl.js\";import{BooleanBindUniform as d}from\"../../shaderModules/BooleanBindUniform.js\";import{Float3BindUniform as n}from\"../../shaderModules/Float3BindUniform.js\";import{FloatBindUniform as l}from\"../../shaderModules/FloatBindUniform.js\";import{glsl as s}from\"../../shaderModules/glsl.js\";import{Matrix4BindUniform as u}from\"../../shaderModules/Matrix4BindUniform.js\";import{TextureCubeBindUniform as m}from\"../../shaderModules/TextureCubeBindUniform.js\";function h(t){const r=t.fragment;r.constants.add(\"radiusCloudsSquared\",\"float\",C).code.add(s`vec3 intersectWithCloudLayer(vec3 dir, vec3 cameraPosition, vec3 spherePos) {\nfloat B = 2.0 * dot(cameraPosition, dir);\nfloat C = dot(cameraPosition, cameraPosition) - radiusCloudsSquared;\nfloat det = B * B - 4.0 * C;\nfloat pointIntDist = max(0.0, 0.5 *(-B + sqrt(det)));\nreturn (cameraPosition + dir * pointIntDist) - spherePos;\n}`),r.uniforms.add(new l(\"radiusCurvatureCorrection\",(({clouds:o})=>o.parallax.radiusCurvatureCorrection))).code.add(s`vec3 correctForPlanetCurvature(vec3 dir) {\ndir.z = dir.z * (1.0 - radiusCurvatureCorrection) + radiusCurvatureCorrection;\nreturn dir;\n}`),r.code.add(s`vec3 rotateDirectionToAnchorPoint(mat4 rotMat, vec3 inVec) {\nreturn (rotMat * vec4(inVec, 0.0)).xyz;\n}`),i(r),c(r);const h=o(.28,.175,.035);r.constants.add(\"RIM_COLOR\",\"vec3\",h);const v=.3,f=140,p=.2,g=10,w=.3;r.code.add(s`\n    vec3 calculateCloudColor(vec3 cameraPosition, vec3 worldSpaceRay, vec4 clouds) {\n      float upDotLight = dot(cameraPosition, mainLightDirection);\n      float dirDotLight = max(dot(worldSpaceRay, mainLightDirection), 0.0);\n      float sunsetTransition = clamp(pow(max(upDotLight, 0.0), ${s.float(v)}), 0.0, 1.0);\n\n      // Base color of the clouds that depends on lighting of the sun and sky\n      vec3 ambientLight = calculateAmbientIrradiance(cameraPosition,  0.0);\n      vec3 combinedLight = clamp((mainLightIntensity + ambientLight )/PI, vec3(0.0), vec3(1.0));\n      vec3 baseCloudColor = pow(combinedLight * pow(clouds.xyz, vec3(GAMMA)), vec3(INV_GAMMA));\n\n      // Rim light around the edge of the clouds simulating scattering of the direct lun light\n      float scatteringMod = max(clouds.a < 0.5 ? clouds.a / 0.5 : - clouds.a / 0.5 + 2.0, 0.0);\n      float rimLightIntensity = 0.5 + 0.5 * pow(max(upDotLight, 0.0), 0.35);\n      vec3 directSunScattering = RIM_COLOR * rimLightIntensity * (pow(dirDotLight, ${s.float(f)})) * scatteringMod;\n\n      // Brighten the clouds around the sun at the sunsets\n      float additionalLight = ${s.float(p)} * pow(dirDotLight, ${s.float(g)}) * (1. - pow(sunsetTransition, ${s.float(w)})) ;\n\n      return vec3(baseCloudColor * (1.0 + additionalLight) + directSunScattering);\n    }\n  `),r.uniforms.add(new d(\"readChannelsRG\",(o=>o.clouds.readChannels===e.RG)),new m(\"cubeMap\",(o=>o.clouds.data?.cubeMap?.colorTexture??null))).code.add(s`vec4 sampleCloud(vec3 rayDir, bool readOtherChannel) {\nvec4 s = texture(cubeMap, rayDir);\nbool readRG = readChannelsRG ^^ readOtherChannel;\ns = readRG ? vec4(vec3(s.r), s.g) : vec4(vec3(s.b), s.a);\nreturn length(s) == 0.0 ? vec4(s.rgb, 1.0) : s;\n}`),r.uniforms.add(new n(\"anchorPoint\",(o=>o.clouds.parallax.anchorPoint)),new n(\"anchorPointNew\",(o=>o.clouds.parallaxNew.anchorPoint)),new u(\"rotationClouds\",(o=>o.clouds.parallax.transform)),new u(\"rotationCloudsNew\",(o=>o.clouds.parallaxNew.transform)),new l(\"cloudsOpacity\",(o=>o.clouds.opacity)),new l(\"fadeFactor\",(o=>o.clouds.fadeFactor)),new d(\"crossFade\",(o=>o.clouds.fadeState===a.CROSS_FADE))).code.add(s`vec4 renderClouds(vec3 worldRay, vec3 cameraPosition) {\nvec3 intersectionPoint = intersectWithCloudLayer(worldRay, cameraPosition, anchorPoint);\nvec3 worldRayRotated = rotateDirectionToAnchorPoint(rotationClouds, normalize(intersectionPoint));\nvec3 worldRayRotatedCorrected = correctForPlanetCurvature(worldRayRotated);\nvec4 cloudData = sampleCloud(worldRayRotatedCorrected, crossFade);\nvec3 cameraPositionN = normalize(cameraPosition);\nvec4 cloudColor = vec4(calculateCloudColor(cameraPositionN, worldRay, cloudData), cloudData.a);\nif(crossFade) {\nintersectionPoint = intersectWithCloudLayer(worldRay, cameraPosition, anchorPointNew);\nworldRayRotated = rotateDirectionToAnchorPoint(rotationCloudsNew, normalize(intersectionPoint));\nworldRayRotatedCorrected = correctForPlanetCurvature(worldRayRotated);\ncloudData = sampleCloud(worldRayRotatedCorrected, false);\nvec4 cloudColorNew = vec4(calculateCloudColor(cameraPositionN, worldRay, cloudData), cloudData.a);\ncloudColor = mix(cloudColor, cloudColorNew, fadeFactor);\n}\nfloat totalTransmittance = length(cloudColor.rgb) == 0.0 ?\n1.0 :\nclamp(cloudColor.a * cloudsOpacity + (1.0 - cloudsOpacity), 0.0 , 1.0);\nreturn vec4(cloudColor.rgb, totalTransmittance);\n}`)}const C=(t.radius+r)**2;export{h as CloudsParallaxShading};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{glsl as e}from\"../core/shaderModules/glsl.js\";function o(o){o.code.add(e`vec3 tonemapACES(vec3 x) {\nreturn clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), 0.0, 1.0);\n}`)}export{o as ToneMapping};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{FoamColor as e}from\"./FoamRendering.glsl.js\";import{Gamma as o}from\"./Gamma.glsl.js\";import{PhysicallyBasedRenderingWater as t}from\"./PhysicallyBasedRendering.glsl.js\";import{distanceFadeStart as r,distanceFadeEnd as i}from\"./ScreenSpaceConstants.js\";import{ScreenSpaceReflections as n}from\"./ScreenSpaceReflections.glsl.js\";import{CloudsParallaxShading as a}from\"../util/CloudsParallaxShading.glsl.js\";import{FloatBindUniform as l}from\"../../shaderModules/FloatBindUniform.js\";import{glsl as d}from\"../../shaderModules/glsl.js\";import{Matrix4BindUniform as c}from\"../../shaderModules/Matrix4BindUniform.js\";import{Texture2DBindUniform as s}from\"../../shaderModules/Texture2DBindUniform.js\";import{ToneMapping as f}from\"../../../shaders/ToneMapping.glsl.js\";function m(m,v){m.include(t,v),m.include(o),m.include(e),v.cloudReflections&&m.include(a),m.include(n,v);const u=m.fragment;u.include(f),u.constants.add(\"fresnelSky\",\"vec3\",[.02,1,15]),u.constants.add(\"fresnelMaterial\",\"vec2\",[.02,.1]),u.constants.add(\"roughness\",\"float\",.015),u.constants.add(\"foamIntensityExternal\",\"float\",1.7),u.constants.add(\"ssrIntensity\",\"float\",.65),u.constants.add(\"ssrHeightFadeStart\",\"float\",r),u.constants.add(\"ssrHeightFadeEnd\",\"float\",i),u.constants.add(\"waterDiffusion\",\"float\",.92),u.constants.add(\"waterSeaColorMod\",\"float\",.8),u.constants.add(\"correctionViewingPowerFactor\",\"float\",.4),u.constants.add(\"skyZenitColor\",\"vec3\",[.52,.68,.9]),u.constants.add(\"skyColor\",\"vec3\",[.67,.79,.9]),u.constants.add(\"cloudFresnelModifier\",\"vec2\",[1.2,.01]),u.code.add(d`PBRShadingWater shadingInfo;\nvec3 getSkyGradientColor(in float cosTheta, in vec3 horizon, in vec3 zenit) {\nfloat exponent = pow((1.0 - cosTheta), fresnelSky[2]);\nreturn mix(zenit, horizon, exponent);\n}`),u.uniforms.add(new l(\"lightingSpecularStrength\",(e=>e.lighting.mainLight.specularStrength)),new l(\"lightingEnvironmentStrength\",(e=>e.lighting.mainLight.environmentStrength))),u.code.add(d`vec3 getSeaColor(in vec3 n, in vec3 v, in vec3 l, vec3 color, in vec3 lightIntensity, in vec3 localUp, in float shadow, float foamIntensity, vec3 viewPosition, vec3 position) {\nfloat reflectionHit = 0.0;\nfloat reflectionHitDiffused = 0.0;\nvec3 seaWaterColor = linearizeGamma(color);\nvec3 h = normalize(l + v);\nshadingInfo.NdotV = clamp(dot(n, v), 0.001, 1.0);\nshadingInfo.VdotN = clamp(dot(v, n), 0.001, 1.0);\nshadingInfo.NdotH = clamp(dot(n, h), 0.0, 1.0);\nshadingInfo.VdotH = clamp(dot(v, h), 0.0, 1.0);\nshadingInfo.LdotH = clamp(dot(l, h), 0.0, 1.0);\nfloat upDotV = max(dot(localUp,v), 0.0);\nvec3 skyHorizon = linearizeGamma(skyColor);\nvec3 skyZenit = linearizeGamma(skyZenitColor);\nvec3 skyColor = getSkyGradientColor(upDotV, skyHorizon, skyZenit );\nfloat upDotL = max(dot(localUp,l),0.0);\nfloat daytimeMod = 0.1 + upDotL * 0.9;\nskyColor *= daytimeMod;\nfloat shadowModifier = clamp(shadow, 0.8, 1.0);\nvec3 fresnelModifier = fresnelReflection(shadingInfo.VdotN, vec3(fresnelSky[0]), fresnelSky[1]);\nvec3 reflSky = lightingEnvironmentStrength * fresnelModifier * skyColor * shadowModifier;\nvec3 reflSea = seaWaterColor * mix(skyColor, upDotL * lightIntensity * LIGHT_NORMALIZATION, 2.0 / 3.0) * shadowModifier;\nvec3 specular = vec3(0.0);\nif(upDotV > 0.0 && upDotL > 0.0) {\nvec3 specularSun = brdfSpecularWater(shadingInfo, roughness, vec3(fresnelMaterial[0]), fresnelMaterial[1]);\nvec3 incidentLight = lightIntensity * LIGHT_NORMALIZATION * shadow;\nfloat NdotL = clamp(dot(n, l), 0.0, 1.0);\nspecular = lightingSpecularStrength * NdotL * incidentLight * specularSun;\n}\nvec3 foam = vec3(0.0);\nif(upDotV > 0.0) {\nfoam = foamIntensity2FoamColor(foamIntensityExternal, foamIntensity, skyZenitColor, daytimeMod);\n}\nfloat correctionViewingFactor = pow(max(dot(v, localUp), 0.0), correctionViewingPowerFactor);\nvec3 normalCorrectedClouds = mix(localUp, n, correctionViewingFactor);\nvec3 reflectedWorld = normalize(reflect(-v, normalCorrectedClouds));`),v.cloudReflections&&u.uniforms.add(new l(\"cloudsOpacity\",(e=>e.clouds.opacity))).code.add(d`vec4 cloudsColor = renderClouds(reflectedWorld, position);\ncloudsColor.a = 1.0 - cloudsColor.a;\ncloudsColor = pow(cloudsColor, vec4(GAMMA));\ncloudsColor *= clamp(fresnelModifier.y * cloudFresnelModifier[0] - cloudFresnelModifier[1], 0.0, 1.0) * cloudsOpacity;`),v.screenSpaceReflections?u.uniforms.add(new c(\"view\",(e=>e.camera.viewMatrix)),new s(\"lastFrameColorTexture\",(e=>e.ssr.lastFrameColor?.getTexture())),new l(\"fadeFactorSSR\",(e=>e.ssr.fadeFactor))).code.add(d`vec3 viewDir = normalize(viewPosition);\nvec4 viewNormalVectorCoordinate = view * vec4(n, 0.0);\nvec3 viewNormal = normalize(viewNormalVectorCoordinate.xyz);\nvec4 viewUp = view * vec4(localUp, 0.0);\nvec3 viewNormalCorrectedSSR = mix(viewUp.xyz, viewNormal, correctionViewingFactor);\nvec3 reflected = normalize(reflect(viewDir, viewNormalCorrectedSSR));\nvec3 hitCoordinate = screenSpaceIntersection(reflected, viewPosition, viewDir, viewUp.xyz);\nvec3 reflectedColor = vec3(0.0);\nif (hitCoordinate.z > 0.0)\n{\nvec2 reprojectedCoordinate = reprojectionCoordinate(hitCoordinate);\nvec2 dCoords = smoothstep(0.3, 0.6, abs(vec2(0.5, 0.5) - hitCoordinate.xy));\nfloat heightMod = smoothstep(ssrHeightFadeEnd, ssrHeightFadeStart, -viewPosition.z);\nreflectionHit = clamp(1.0 - (1.3 * dCoords.y), 0.0, 1.0) * heightMod * fadeFactorSSR;\nreflectionHitDiffused = waterDiffusion * reflectionHit;\nreflectedColor = linearizeGamma(texture(lastFrameColorTexture, reprojectedCoordinate).xyz) *\nreflectionHitDiffused * fresnelModifier.y * ssrIntensity;\n}\nfloat seaColorMod =  mix(waterSeaColorMod, waterSeaColorMod * 0.5, reflectionHitDiffused);\nvec3 waterRenderedColor = tonemapACES((1.0 - reflectionHitDiffused) * reflSky + reflectedColor +\nreflSea * seaColorMod + specular + foam);`):u.code.add(d`vec3 waterRenderedColor = tonemapACES(reflSky + reflSea * waterSeaColorMod + specular + foam);`),v.cloudReflections?v.screenSpaceReflections?u.code.add(d`return waterRenderedColor * (1.0 - (1.0 - reflectionHit) * cloudsColor.a) + (1.0 - reflectionHit) * cloudsColor.xyz;\n}`):u.code.add(d`return waterRenderedColor * (1.0 - cloudsColor.a) + cloudsColor.xyz;\n}`):u.code.add(d`return waterRenderedColor;\n}`)}export{m as Water};\n"],"names":[],"sourceRoot":""}