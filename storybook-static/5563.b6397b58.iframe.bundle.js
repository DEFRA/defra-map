"use strict";(self.webpackChunk_defra_flood_map=self.webpackChunk_defra_flood_map||[]).push([[5563],{"./node_modules/@turf/distance/dist/esm/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{I:()=>distance});var _turf_invariant__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@turf/invariant/dist/esm/index.js"),_turf_helpers__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@turf/helpers/dist/esm/index.js");function distance(from,to,options={}){var coordinates1=(0,_turf_invariant__WEBPACK_IMPORTED_MODULE_0__.uG)(from),coordinates2=(0,_turf_invariant__WEBPACK_IMPORTED_MODULE_0__.uG)(to),dLat=(0,_turf_helpers__WEBPACK_IMPORTED_MODULE_1__.tR)(coordinates2[1]-coordinates1[1]),dLon=(0,_turf_helpers__WEBPACK_IMPORTED_MODULE_1__.tR)(coordinates2[0]-coordinates1[0]),lat1=(0,_turf_helpers__WEBPACK_IMPORTED_MODULE_1__.tR)(coordinates1[1]),lat2=(0,_turf_helpers__WEBPACK_IMPORTED_MODULE_1__.tR)(coordinates2[1]),a=Math.pow(Math.sin(dLat/2),2)+Math.pow(Math.sin(dLon/2),2)*Math.cos(lat1)*Math.cos(lat2);return(0,_turf_helpers__WEBPACK_IMPORTED_MODULE_1__.cJ)(2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a)),options.units)}},"./node_modules/@turf/helpers/dist/esm/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Gf:()=>lengthToRadians,NU:()=>multiLineString,cJ:()=>radiansToLength,g5:()=>multiPolygon,n1:()=>polygon,nv:()=>radiansToDegrees,tR:()=>degreesToRadians,wi:()=>lineString,zX:()=>earthRadius,zx:()=>point});var earthRadius=6371008.8,factors={centimeters:100*earthRadius,centimetres:100*earthRadius,degrees:360/(2*Math.PI),feet:3.28084*earthRadius,inches:39.37*earthRadius,kilometers:earthRadius/1e3,kilometres:earthRadius/1e3,meters:earthRadius,metres:earthRadius,miles:earthRadius/1609.344,millimeters:1e3*earthRadius,millimetres:1e3*earthRadius,nauticalmiles:earthRadius/1852,radians:1,yards:1.0936*earthRadius};function feature(geom,properties,options={}){const feat={type:"Feature"};return(0===options.id||options.id)&&(feat.id=options.id),options.bbox&&(feat.bbox=options.bbox),feat.properties=properties||{},feat.geometry=geom,feat}function point(coordinates,properties,options={}){if(!coordinates)throw new Error("coordinates is required");if(!Array.isArray(coordinates))throw new Error("coordinates must be an Array");if(coordinates.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!isNumber(coordinates[0])||!isNumber(coordinates[1]))throw new Error("coordinates must contain numbers");return feature({type:"Point",coordinates},properties,options)}function polygon(coordinates,properties,options={}){for(const ring of coordinates){if(ring.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");if(ring[ring.length-1].length!==ring[0].length)throw new Error("First and last Position are not equivalent.");for(let j=0;j<ring[ring.length-1].length;j++)if(ring[ring.length-1][j]!==ring[0][j])throw new Error("First and last Position are not equivalent.")}return feature({type:"Polygon",coordinates},properties,options)}function lineString(coordinates,properties,options={}){if(coordinates.length<2)throw new Error("coordinates must be an array of two or more positions");return feature({type:"LineString",coordinates},properties,options)}function multiLineString(coordinates,properties,options={}){return feature({type:"MultiLineString",coordinates},properties,options)}function multiPolygon(coordinates,properties,options={}){return feature({type:"MultiPolygon",coordinates},properties,options)}function radiansToLength(radians,units="kilometers"){const factor=factors[units];if(!factor)throw new Error(units+" units is invalid");return radians*factor}function lengthToRadians(distance,units="kilometers"){const factor=factors[units];if(!factor)throw new Error(units+" units is invalid");return distance/factor}function radiansToDegrees(radians){return 180*(radians%(2*Math.PI))/Math.PI}function degreesToRadians(degrees){return degrees%360*Math.PI/180}function isNumber(num){return!isNaN(num)&&null!==num&&!Array.isArray(num)}},"./node_modules/@turf/invariant/dist/esm/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function getCoord(coord){if(!coord)throw new Error("coord is required");if(!Array.isArray(coord)){if("Feature"===coord.type&&null!==coord.geometry&&"Point"===coord.geometry.type)return[...coord.geometry.coordinates];if("Point"===coord.type)return[...coord.coordinates]}if(Array.isArray(coord)&&coord.length>=2&&!Array.isArray(coord[0])&&!Array.isArray(coord[1]))return[...coord];throw new Error("coord must be GeoJSON Point or an Array of numbers")}function getGeom(geojson){return"Feature"===geojson.type?geojson.geometry:geojson}__webpack_require__.d(__webpack_exports__,{bg:()=>getGeom,uG:()=>getCoord})},"./node_modules/geodesy/osgridref.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{B7:()=>LatLon_OsGridRef,Ay:()=>OsGridRef});let dmsSeparator=" ";class Dms{static get separator(){return dmsSeparator}static set separator(char){dmsSeparator=char}static parse(dms){if(!isNaN(parseFloat(dms))&&isFinite(dms))return Number(dms);const dmsParts=String(dms).trim().replace(/^-/,"").replace(/[NSEW]$/i,"").split(/[^0-9.,]+/);if(""==dmsParts[dmsParts.length-1]&&dmsParts.splice(dmsParts.length-1),""==dmsParts)return NaN;let deg=null;switch(dmsParts.length){case 3:deg=dmsParts[0]/1+dmsParts[1]/60+dmsParts[2]/3600;break;case 2:deg=dmsParts[0]/1+dmsParts[1]/60;break;case 1:deg=dmsParts[0];break;default:return NaN}return/^-|[WS]$/i.test(dms.trim())&&(deg=-deg),Number(deg)}static toDms(deg,format="d",dp=void 0){if(isNaN(deg))return null;if("string"==typeof deg&&""==deg.trim())return null;if("boolean"==typeof deg)return null;if(deg==1/0)return null;if(null==deg)return null;if(void 0===dp)switch(format){case"d":case"deg":dp=4;break;case"dm":case"deg+min":dp=2;break;case"dms":case"deg+min+sec":dp=0;break;default:format="d",dp=4}deg=Math.abs(deg);let dms=null,d=null,m=null,s=null;switch(format){default:case"d":case"deg":d=deg.toFixed(dp),d<100&&(d="0"+d),d<10&&(d="0"+d),dms=d+"°";break;case"dm":case"deg+min":d=Math.floor(deg),m=(60*deg%60).toFixed(dp),60==m&&(m=(0).toFixed(dp),d++),d=("000"+d).slice(-3),m<10&&(m="0"+m),dms=d+"°"+Dms.separator+m+"′";break;case"dms":case"deg+min+sec":d=Math.floor(deg),m=Math.floor(3600*deg/60)%60,s=(3600*deg%60).toFixed(dp),60==s&&(s=(0).toFixed(dp),m++),60==m&&(m=0,d++),d=("000"+d).slice(-3),m=("00"+m).slice(-2),s<10&&(s="0"+s),dms=d+"°"+Dms.separator+m+"′"+Dms.separator+s+"″"}return dms}static toLat(deg,format,dp){const lat=Dms.toDms(Dms.wrap90(deg),format,dp);return null===lat?"–":lat.slice(1)+Dms.separator+(deg<0?"S":"N")}static toLon(deg,format,dp){const lon=Dms.toDms(Dms.wrap180(deg),format,dp);return null===lon?"–":lon+Dms.separator+(deg<0?"W":"E")}static toBrng(deg,format,dp){const brng=Dms.toDms(Dms.wrap360(deg),format,dp);return null===brng?"–":brng.replace("360","0")}static fromLocale(str){const locale=123456.789.toLocaleString(),separator={thousands:locale.slice(3,4),decimal:locale.slice(7,8)};return str.replace(separator.thousands,"⁜").replace(separator.decimal,".").replace("⁜",",")}static toLocale(str){const locale=123456.789.toLocaleString(),separator={thousands:locale.slice(3,4),decimal:locale.slice(7,8)};return str.replace(/,([0-9])/,"⁜$1").replace(".",separator.decimal).replace("⁜",separator.thousands)}static compassPoint(bearing,precision=3){if(![1,2,3].includes(Number(precision)))throw new RangeError(`invalid precision ‘${precision}’`);bearing=Dms.wrap360(bearing);const n=4*2**(precision-1);return["N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW","WSW","W","WNW","NW","NNW"][Math.round(bearing*n/360)%n*16/n]}static wrap90(degrees){if(-90<=degrees&&degrees<=90)return degrees;const x=degrees,p=360;return 1*Math.abs(((x-90)%p+p)%p-180)-90}static wrap180(degrees){if(-180<=degrees&&degrees<=180)return degrees;const p=360;return((360*degrees/p-180)%p+p)%p-180}static wrap360(degrees){if(0<=degrees&&degrees<360)return degrees;const p=360;return(360*degrees/p%p+p)%p}}Number.prototype.toRadians=function(){return this*Math.PI/180},Number.prototype.toDegrees=function(){return 180*this/Math.PI};const dms=Dms;class Vector3d{constructor(x,y,z){if(isNaN(x)||isNaN(y)||isNaN(z))throw new TypeError(`invalid vector [${x},${y},${z}]`);this.x=Number(x),this.y=Number(y),this.z=Number(z)}get length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}plus(v){if(!(v instanceof Vector3d))throw new TypeError("v is not Vector3d object");return new Vector3d(this.x+v.x,this.y+v.y,this.z+v.z)}minus(v){if(!(v instanceof Vector3d))throw new TypeError("v is not Vector3d object");return new Vector3d(this.x-v.x,this.y-v.y,this.z-v.z)}times(x){if(isNaN(x))throw new TypeError(`invalid scalar value ‘${x}’`);return new Vector3d(this.x*x,this.y*x,this.z*x)}dividedBy(x){if(isNaN(x))throw new TypeError(`invalid scalar value ‘${x}’`);return new Vector3d(this.x/x,this.y/x,this.z/x)}dot(v){if(!(v instanceof Vector3d))throw new TypeError("v is not Vector3d object");return this.x*v.x+this.y*v.y+this.z*v.z}cross(v){if(!(v instanceof Vector3d))throw new TypeError("v is not Vector3d object");const x=this.y*v.z-this.z*v.y,y=this.z*v.x-this.x*v.z,z=this.x*v.y-this.y*v.x;return new Vector3d(x,y,z)}negate(){return new Vector3d(-this.x,-this.y,-this.z)}unit(){const norm=this.length;if(1==norm)return this;if(0==norm)return this;const x=this.x/norm,y=this.y/norm,z=this.z/norm;return new Vector3d(x,y,z)}angleTo(v,n=void 0){if(!(v instanceof Vector3d))throw new TypeError("v is not Vector3d object");if(!(n instanceof Vector3d||null==n))throw new TypeError("n is not Vector3d object");const sign=null==n||this.cross(v).dot(n)>=0?1:-1,sinθ=this.cross(v).length*sign,cosθ=this.dot(v);return Math.atan2(sinθ,cosθ)}rotateAround(axis,angle){if(!(axis instanceof Vector3d))throw new TypeError("axis is not Vector3d object");const θ=angle.toRadians(),p=this.unit(),a=axis.unit(),s=Math.sin(θ),c=Math.cos(θ),t=1-c,x=a.x,y=a.y,z=a.z,r=[[t*x*x+c,t*x*y-s*z,t*x*z+s*y],[t*x*y+s*z,t*y*y+c,t*y*z-s*x],[t*x*z-s*y,t*y*z+s*x,t*z*z+c]],rp=[r[0][0]*p.x+r[0][1]*p.y+r[0][2]*p.z,r[1][0]*p.x+r[1][1]*p.y+r[1][2]*p.z,r[2][0]*p.x+r[2][1]*p.y+r[2][2]*p.z];return new Vector3d(rp[0],rp[1],rp[2])}toString(dp=3){return`[${this.x.toFixed(dp)},${this.y.toFixed(dp)},${this.z.toFixed(dp)}]`}}Number.prototype.toRadians=function(){return this*Math.PI/180},Number.prototype.toDegrees=function(){return 180*this/Math.PI};const vector3d=Vector3d,ellipsoids={WGS84:{a:6378137,b:6356752.314245,f:1/298.257223563}},datums={WGS84:{ellipsoid:ellipsoids.WGS84}};Object.freeze(ellipsoids.WGS84),Object.freeze(datums.WGS84);class LatLonEllipsoidal{constructor(lat,lon,height=0){if(isNaN(lat)||null==lat)throw new TypeError(`invalid lat ‘${lat}’`);if(isNaN(lon)||null==lon)throw new TypeError(`invalid lon ‘${lon}’`);if(isNaN(height)||null==height)throw new TypeError(`invalid height ‘${height}’`);this._lat=dms.wrap90(Number(lat)),this._lon=dms.wrap180(Number(lon)),this._height=Number(height)}get lat(){return this._lat}get latitude(){return this._lat}set lat(lat){if(this._lat=isNaN(lat)?dms.wrap90(dms.parse(lat)):dms.wrap90(Number(lat)),isNaN(this._lat))throw new TypeError(`invalid lat ‘${lat}’`)}set latitude(lat){if(this._lat=isNaN(lat)?dms.wrap90(dms.parse(lat)):dms.wrap90(Number(lat)),isNaN(this._lat))throw new TypeError(`invalid latitude ‘${lat}’`)}get lon(){return this._lon}get lng(){return this._lon}get longitude(){return this._lon}set lon(lon){if(this._lon=isNaN(lon)?dms.wrap180(dms.parse(lon)):dms.wrap180(Number(lon)),isNaN(this._lon))throw new TypeError(`invalid lon ‘${lon}’`)}set lng(lon){if(this._lon=isNaN(lon)?dms.wrap180(dms.parse(lon)):dms.wrap180(Number(lon)),isNaN(this._lon))throw new TypeError(`invalid lng ‘${lon}’`)}set longitude(lon){if(this._lon=isNaN(lon)?dms.wrap180(dms.parse(lon)):dms.wrap180(Number(lon)),isNaN(this._lon))throw new TypeError(`invalid longitude ‘${lon}’`)}get height(){return this._height}set height(height){if(this._height=Number(height),isNaN(this._height))throw new TypeError(`invalid height ‘${height}’`)}get datum(){return this._datum}set datum(datum){this._datum=datum}static get ellipsoids(){return ellipsoids}static get datums(){return datums}static parse(...args){if(0==args.length)throw new TypeError("invalid (empty) point");let lat,lon,height;if("object"==typeof args[0]&&(1==args.length||!isNaN(parseFloat(args[1])))){const ll=args[0];if("Point"==ll.type&&Array.isArray(ll.coordinates)?([lon,lat,height]=ll.coordinates,height=height||0):(null!=ll.latitude&&(lat=ll.latitude),null!=ll.lat&&(lat=ll.lat),null!=ll.longitude&&(lon=ll.longitude),null!=ll.lng&&(lon=ll.lng),null!=ll.lon&&(lon=ll.lon),null!=ll.height&&(height=ll.height),lat=dms.wrap90(dms.parse(lat)),lon=dms.wrap180(dms.parse(lon))),null!=args[1]&&(height=args[1]),isNaN(lat)||isNaN(lon))throw new TypeError(`invalid point ‘${JSON.stringify(args[0])}’`)}if("string"==typeof args[0]&&2==args[0].split(",").length&&([lat,lon]=args[0].split(","),lat=dms.wrap90(dms.parse(lat)),lon=dms.wrap180(dms.parse(lon)),height=args[1]||0,isNaN(lat)||isNaN(lon)))throw new TypeError(`invalid point ‘${args[0]}’`);if(null==lat&&null==lon&&([lat,lon]=args,lat=dms.wrap90(dms.parse(lat)),lon=dms.wrap180(dms.parse(lon)),height=args[2]||0,isNaN(lat)||isNaN(lon)))throw new TypeError(`invalid point ‘${args.toString()}’`);return new this(lat,lon,height)}toCartesian(){const ellipsoid=this.datum?this.datum.ellipsoid:this.referenceFrame?this.referenceFrame.ellipsoid:ellipsoids.WGS84,φ=this.lat.toRadians(),λ=this.lon.toRadians(),h=this.height,{a,f}=ellipsoid,sinφ=Math.sin(φ),cosφ=Math.cos(φ),sinλ=Math.sin(λ),cosλ=Math.cos(λ),eSq=2*f-f*f,ν=a/Math.sqrt(1-eSq*sinφ*sinφ);return new Cartesian((ν+h)*cosφ*cosλ,(ν+h)*cosφ*sinλ,(ν*(1-eSq)+h)*sinφ)}equals(point){if(!(point instanceof LatLonEllipsoidal))throw new TypeError(`invalid point ‘${point}’`);return!(Math.abs(this.lat-point.lat)>Number.EPSILON)&&(!(Math.abs(this.lon-point.lon)>Number.EPSILON)&&(!(Math.abs(this.height-point.height)>Number.EPSILON)&&(this.datum==point.datum&&(this.referenceFrame==point.referenceFrame&&this.epoch==point.epoch))))}toString(format="d",dp=void 0,dpHeight=null){if(!["d","dm","dms","n"].includes(format))throw new RangeError(`invalid format ‘${format}’`);const height=(this.height>=0?" +":" ")+this.height.toFixed(dpHeight)+"m";if("n"==format){null==dp&&(dp=4);return`${this.lat.toFixed(dp)}, ${this.lon.toFixed(dp)}${null==dpHeight?"":height}`}return`${dms.toLat(this.lat,format,dp)}, ${dms.toLon(this.lon,format,dp)}${null==dpHeight?"":height}`}}class Cartesian extends vector3d{constructor(x,y,z){super(x,y,z)}toLatLon(ellipsoid=ellipsoids.WGS84){if(!ellipsoid||!ellipsoid.a)throw new TypeError(`invalid ellipsoid ‘${ellipsoid}’`);const{x,y,z}=this,{a,b,f}=ellipsoid,e2=2*f-f*f,ε2=e2/(1-e2),p=Math.sqrt(x*x+y*y),tanβ=b*z/(a*p)*(1+ε2*b/Math.sqrt(p*p+z*z)),sinβ=tanβ/Math.sqrt(1+tanβ*tanβ),cosβ=sinβ/tanβ,φ=isNaN(cosβ)?0:Math.atan2(z+ε2*b*sinβ*sinβ*sinβ,p-e2*a*cosβ*cosβ*cosβ),λ=Math.atan2(y,x),sinφ=Math.sin(φ),h=p*Math.cos(φ)+z*sinφ-a*a/(a/Math.sqrt(1-e2*sinφ*sinφ));return new LatLonEllipsoidal(φ.toDegrees(),λ.toDegrees(),h)}toString(dp=0){return`[${this.x.toFixed(dp)},${this.y.toFixed(dp)},${this.z.toFixed(dp)}]`}}const latlon_ellipsoidal_datum_ellipsoids={WGS84:{a:6378137,b:6356752.314245,f:1/298.257223563},Airy1830:{a:6377563.396,b:6356256.909,f:1/299.3249646},AiryModified:{a:6377340.189,b:6356034.448,f:1/299.3249646},Bessel1841:{a:6377397.155,b:6356078.962818,f:1/299.1528128},Clarke1866:{a:6378206.4,b:6356583.8,f:1/294.978698214},Clarke1880IGN:{a:6378249.2,b:6356515,f:1/293.466021294},GRS80:{a:6378137,b:6356752.31414,f:1/298.257222101},Intl1924:{a:6378388,b:6356911.946,f:1/297},WGS72:{a:6378135,b:6356750.5,f:1/298.26}},latlon_ellipsoidal_datum_datums={ED50:{ellipsoid:latlon_ellipsoidal_datum_ellipsoids.Intl1924,transform:[89.5,93.8,123.1,-1.2,0,0,.156]},ETRS89:{ellipsoid:latlon_ellipsoidal_datum_ellipsoids.GRS80,transform:[0,0,0,0,0,0,0]},Irl1975:{ellipsoid:latlon_ellipsoidal_datum_ellipsoids.AiryModified,transform:[-482.53,130.596,-564.557,-8.15,1.042,.214,.631]},NAD27:{ellipsoid:latlon_ellipsoidal_datum_ellipsoids.Clarke1866,transform:[8,-160,-176,0,0,0,0]},NAD83:{ellipsoid:latlon_ellipsoidal_datum_ellipsoids.GRS80,transform:[.9956,-1.9103,-.5215,-62e-5,.025915,.009426,.011599]},NTF:{ellipsoid:latlon_ellipsoidal_datum_ellipsoids.Clarke1880IGN,transform:[168,60,-320,0,0,0,0]},OSGB36:{ellipsoid:latlon_ellipsoidal_datum_ellipsoids.Airy1830,transform:[-446.448,125.157,-542.06,20.4894,-.1502,-.247,-.8421]},Potsdam:{ellipsoid:latlon_ellipsoidal_datum_ellipsoids.Bessel1841,transform:[-582,-105,-414,-8.3,1.04,.35,-3.08]},TokyoJapan:{ellipsoid:latlon_ellipsoidal_datum_ellipsoids.Bessel1841,transform:[148,-507,-685,0,0,0,0]},WGS72:{ellipsoid:latlon_ellipsoidal_datum_ellipsoids.WGS72,transform:[0,0,-4.5,-.22,0,0,.554]},WGS84:{ellipsoid:latlon_ellipsoidal_datum_ellipsoids.WGS84,transform:[0,0,0,0,0,0,0]}};Object.keys(latlon_ellipsoidal_datum_ellipsoids).forEach((e=>Object.freeze(latlon_ellipsoidal_datum_ellipsoids[e]))),Object.keys(latlon_ellipsoidal_datum_datums).forEach((d=>{Object.freeze(latlon_ellipsoidal_datum_datums[d]),Object.freeze(latlon_ellipsoidal_datum_datums[d].transform)}));class LatLonEllipsoidal_Datum extends LatLonEllipsoidal{constructor(lat,lon,height=0,datum=latlon_ellipsoidal_datum_datums.WGS84){if(!datum||null==datum.ellipsoid)throw new TypeError(`unrecognised datum ‘${datum}’`);super(lat,lon,height),this._datum=datum}get datum(){return this._datum}static get ellipsoids(){return latlon_ellipsoidal_datum_ellipsoids}static get datums(){return latlon_ellipsoidal_datum_datums}static parse(...args){let datum=latlon_ellipsoidal_datum_datums.WGS84;if((4==args.length||3==args.length&&"object"==typeof args[2])&&(datum=args.pop()),!datum||null==datum.ellipsoid)throw new TypeError(`unrecognised datum ‘${datum}’`);const point=super.parse(...args);return point._datum=datum,point}convertDatum(toDatum){if(!toDatum||null==toDatum.ellipsoid)throw new TypeError(`unrecognised datum ‘${toDatum}’`);return this.toCartesian().convertDatum(toDatum).toLatLon()}toCartesian(){const cartesian=super.toCartesian();return new Cartesian_Datum(cartesian.x,cartesian.y,cartesian.z,this.datum)}}class Cartesian_Datum extends Cartesian{constructor(x,y,z,datum=void 0){if(datum&&null==datum.ellipsoid)throw new TypeError(`unrecognised datum ‘${datum}’`);super(x,y,z),datum&&(this._datum=datum)}get datum(){return this._datum}set datum(datum){if(!datum||null==datum.ellipsoid)throw new TypeError(`unrecognised datum ‘${datum}’`);this._datum=datum}toLatLon(deprecatedDatum=void 0){deprecatedDatum&&(console.info("datum parameter to Cartesian_Datum.toLatLon is deprecated: set datum before calling toLatLon()"),this.datum=deprecatedDatum);const datum=this.datum||latlon_ellipsoidal_datum_datums.WGS84;if(!datum||null==datum.ellipsoid)throw new TypeError(`unrecognised datum ‘${datum}’`);const latLon=super.toLatLon(datum.ellipsoid);return new LatLonEllipsoidal_Datum(latLon.lat,latLon.lon,latLon.height,this.datum)}convertDatum(toDatum){if(!toDatum||null==toDatum.ellipsoid)throw new TypeError(`unrecognised datum ‘${toDatum}’`);if(!this.datum)throw new TypeError("cartesian coordinate has no datum");let oldCartesian=null,transform=null;null!=this.datum&&this.datum!=latlon_ellipsoidal_datum_datums.WGS84||(oldCartesian=this,transform=toDatum.transform),toDatum==latlon_ellipsoidal_datum_datums.WGS84&&(oldCartesian=this,transform=this.datum.transform.map((p=>-p))),null==transform&&(oldCartesian=this.convertDatum(latlon_ellipsoidal_datum_datums.WGS84),transform=toDatum.transform);const newCartesian=oldCartesian.applyTransform(transform);return newCartesian.datum=toDatum,newCartesian}applyTransform(t){const{x:x1,y:y1,z:z1}=this,tx=t[0],ty=t[1],tz=t[2],s=t[3]/1e6+1,rx=(t[4]/3600).toRadians(),ry=(t[5]/3600).toRadians(),rz=(t[6]/3600).toRadians();return new Cartesian_Datum(tx+x1*s-y1*rz+z1*ry,ty+x1*rz+y1*s-z1*rx,tz-x1*ry+y1*rx+z1*s)}}const nationalGrid={trueOrigin:{lat:49,lon:-2},falseOrigin:{easting:-4e5,northing:1e5},scaleFactor:.9996012717,ellipsoid:LatLonEllipsoidal_Datum.ellipsoids.Airy1830};class OsGridRef{constructor(easting,northing){if(this.easting=Number(easting),this.northing=Number(northing),isNaN(easting)||this.easting<0||this.easting>7e5)throw new RangeError(`invalid easting ‘${easting}’`);if(isNaN(northing)||this.northing<0||this.northing>13e5)throw new RangeError(`invalid northing ‘${northing}’`)}toLatLon(datum=LatLonEllipsoidal_Datum.datums.WGS84){const{easting:E,northing:N}=this,{a,b}=nationalGrid.ellipsoid,φ0=nationalGrid.trueOrigin.lat.toRadians(),λ0=nationalGrid.trueOrigin.lon.toRadians(),E0=-nationalGrid.falseOrigin.easting,N0=-nationalGrid.falseOrigin.northing,F0=nationalGrid.scaleFactor,e2=1-b*b/(a*a),n=(a-b)/(a+b),n2=n*n,n3=n*n*n;let φ=φ0,M=0;do{φ=(N-N0-M)/(a*F0)+φ;M=b*F0*((1+n+5/4*n2+5/4*n3)*(φ-φ0)-(3*n+3*n*n+21/8*n3)*Math.sin(φ-φ0)*Math.cos(φ+φ0)+(15/8*n2+15/8*n3)*Math.sin(2*(φ-φ0))*Math.cos(2*(φ+φ0))-35/24*n3*Math.sin(3*(φ-φ0))*Math.cos(3*(φ+φ0)))}while(Math.abs(N-N0-M)>=1e-5);const cosφ=Math.cos(φ),sinφ=Math.sin(φ),ν=a*F0/Math.sqrt(1-e2*sinφ*sinφ),ρ=a*F0*(1-e2)/Math.pow(1-e2*sinφ*sinφ,1.5),η2=ν/ρ-1,tanφ=Math.tan(φ),tan2φ=tanφ*tanφ,tan4φ=tan2φ*tan2φ,secφ=1/cosφ,ν3=ν*ν*ν,ν5=ν3*ν*ν,dE=E-E0,dE2=dE*dE,dE3=dE2*dE,dE4=dE2*dE2,dE5=dE3*dE2;φ=φ-tanφ/(2*ρ*ν)*dE2+tanφ/(24*ρ*ν3)*(5+3*tan2φ+η2-9*tan2φ*η2)*dE4-tanφ/(720*ρ*ν5)*(61+90*tan2φ+45*tan4φ)*(dE4*dE2);const λ=λ0+secφ/ν*dE-secφ/(6*ν3)*(ν/ρ+2*tan2φ)*dE3+secφ/(120*ν5)*(5+28*tan2φ+24*tan4φ)*dE5-secφ/(5040*(ν5*ν*ν))*(61+662*tan2φ+1320*tan4φ+720*(tan4φ*tan2φ))*(dE5*dE2);let point=new LatLon_OsGridRef(φ.toDegrees(),λ.toDegrees(),0,LatLonEllipsoidal_Datum.datums.OSGB36);return datum!=LatLonEllipsoidal_Datum.datums.OSGB36&&(point=point.convertDatum(datum),point=new LatLon_OsGridRef(point.lat,point.lon,point.height,point.datum)),point}static parse(gridref){let match=(gridref=String(gridref).trim()).match(/^(\d+),\s*(\d+)$/);if(match)return new OsGridRef(match[1],match[2]);if(match=gridref.match(/^[HNST][ABCDEFGHJKLMNOPQRSTUVWXYZ]\s*[0-9]+\s*[0-9]+$/i),!match)throw new Error(`invalid grid reference ‘${gridref}’`);let l1=gridref.toUpperCase().charCodeAt(0)-"A".charCodeAt(0),l2=gridref.toUpperCase().charCodeAt(1)-"A".charCodeAt(0);l1>7&&l1--,l2>7&&l2--;const e100km=(l1-2)%5*5+l2%5,n100km=19-5*Math.floor(l1/5)-Math.floor(l2/5);let en=gridref.slice(2).trim().split(/\s+/);if(1==en.length&&(en=[en[0].slice(0,en[0].length/2),en[0].slice(en[0].length/2)]),en[0].length!=en[1].length)throw new Error(`invalid grid reference ‘${gridref}’`);en[0]=en[0].padEnd(5,"0"),en[1]=en[1].padEnd(5,"0");const e=e100km+en[0],n=n100km+en[1];return new OsGridRef(e,n)}toString(digits=10){if(![0,2,4,6,8,10,12,14,16].includes(Number(digits)))throw new RangeError(`invalid precision ‘${digits}’`);let{easting:e,northing:n}=this;if(0==digits){const format={useGrouping:!1,minimumIntegerDigits:6,maximumFractionDigits:3};return`${e.toLocaleString("en",format)},${n.toLocaleString("en",format)}`}const e100km=Math.floor(e/1e5),n100km=Math.floor(n/1e5);let l1=19-n100km-(19-n100km)%5+Math.floor((e100km+10)/5),l2=5*(19-n100km)%25+e100km%5;l1>7&&l1++,l2>7&&l2++;const letterPair=String.fromCharCode(l1+"A".charCodeAt(0),l2+"A".charCodeAt(0));return e=Math.floor(e%1e5/Math.pow(10,5-digits/2)),n=Math.floor(n%1e5/Math.pow(10,5-digits/2)),e=e.toString().padStart(digits/2,"0"),n=n.toString().padStart(digits/2,"0"),`${letterPair} ${e} ${n}`}}class LatLon_OsGridRef extends LatLonEllipsoidal_Datum{toOsGrid(){const point=this.datum==LatLonEllipsoidal_Datum.datums.OSGB36?this:this.convertDatum(LatLonEllipsoidal_Datum.datums.OSGB36),φ=point.lat.toRadians(),λ=point.lon.toRadians(),{a,b}=nationalGrid.ellipsoid,φ0=nationalGrid.trueOrigin.lat.toRadians(),λ0=nationalGrid.trueOrigin.lon.toRadians(),E0=-nationalGrid.falseOrigin.easting,N0=-nationalGrid.falseOrigin.northing,F0=nationalGrid.scaleFactor,e2=1-b*b/(a*a),n=(a-b)/(a+b),n2=n*n,n3=n*n*n,cosφ=Math.cos(φ),sinφ=Math.sin(φ),ν=a*F0/Math.sqrt(1-e2*sinφ*sinφ),ρ=a*F0*(1-e2)/Math.pow(1-e2*sinφ*sinφ,1.5),η2=ν/ρ-1,M=b*F0*((1+n+5/4*n2+5/4*n3)*(φ-φ0)-(3*n+3*n*n+21/8*n3)*Math.sin(φ-φ0)*Math.cos(φ+φ0)+(15/8*n2+15/8*n3)*Math.sin(2*(φ-φ0))*Math.cos(2*(φ+φ0))-35/24*n3*Math.sin(3*(φ-φ0))*Math.cos(3*(φ+φ0))),cos3φ=cosφ*cosφ*cosφ,cos5φ=cos3φ*cosφ*cosφ,tan2φ=Math.tan(φ)*Math.tan(φ),tan4φ=tan2φ*tan2φ,Δλ=λ-λ0,Δλ2=Δλ*Δλ,Δλ3=Δλ2*Δλ,Δλ4=Δλ3*Δλ,Δλ5=Δλ4*Δλ;let N=M+N0+ν/2*sinφ*cosφ*Δλ2+ν/24*sinφ*cos3φ*(5-tan2φ+9*η2)*Δλ4+ν/720*sinφ*cos5φ*(61-58*tan2φ+tan4φ)*(Δλ5*Δλ),E=E0+ν*cosφ*Δλ+ν/6*cos3φ*(ν/ρ-tan2φ)*Δλ3+ν/120*cos5φ*(5-18*tan2φ+tan4φ+14*η2-58*tan2φ*η2)*Δλ5;N=Number(N.toFixed(3)),E=Number(E.toFixed(3));try{return new OsGridRef(E,N)}catch(e){throw new Error(`${e.message} from (${point.lat.toFixed(6)},${point.lon.toFixed(6)}).toOsGrid()`)}}convertDatum(toDatum){const osgbED=super.convertDatum(toDatum);return new LatLon_OsGridRef(osgbED.lat,osgbED.lon,osgbED.height,osgbED.datum)}}}}]);