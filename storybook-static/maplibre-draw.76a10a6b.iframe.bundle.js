"use strict";(self.webpackChunk_defra_flood_map=self.webpackChunk_defra_flood_map||[]).push([[4194],{"./src/js/provider/os-maplibre/draw.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Draw:()=>Draw,default:()=>draw});var mapbox_gl_draw=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/index.js"),direct_select=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/modes/direct_select.js"),draw_polygon=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/modes/draw_polygon.js"),create_vertex=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/create_vertex.js");const spatialNavigate=(start,pixels,direction)=>{const quadrant=pixels.filter(((p,i)=>{const offsetX=Math.abs(p[0]-start[0]),offsetY=Math.abs(p[1]-start[1]);let isQuadrant=!1;return isQuadrant="ArrowUp"===direction?p[1]<=start[1]&&offsetY>=offsetX:"ArrowDown"===direction?p[1]>start[1]&&offsetY>=offsetX:"ArrowLeft"===direction?p[0]<=start[0]&&offsetY<offsetX:"ArrowRight"!==direction||p[0]>start[0]&&offsetY<offsetX,isQuadrant&&JSON.stringify(p)!==JSON.stringify(start)}));quadrant.length||quadrant.push(start);const distances=quadrant.map((p=>{return a=Math.abs(start[0]-p[0]),b=Math.abs(start[1]-p[1]),Math.sqrt(Math.pow(a,2)+Math.pow(b,2));var a,b})),closest=quadrant[distances.indexOf(Math.min(...distances))];return pixels.findIndex((i=>JSON.stringify(i)===JSON.stringify(closest)))},ARROW_KEYS=["ArrowLeft","ArrowRight","ArrowUp","ArrowDown"],DisabledMode={onSetup:()=>({}),onClick:()=>!1,onKeyUp:()=>!1,onDrag:()=>!1,toDisplayFeatures(state,geojson,display){geojson.properties.active="false",display(geojson)}},EditVertexMode={...direct_select.A,onSetup(options){const state=direct_select.A.onSetup.call(this,options),{container,featureId,selectedIndex,selectedType,isPanEnabled}=options;state.container=container,state.isPanEnabled=isPanEnabled,state.featureId=featureId,state.vertecies=this.getVerticies(featureId),state.midpoints=this.getMidpoints(featureId),state.selectedIndex=void 0!==selectedIndex?selectedIndex:-1,state.selectedType=selectedType,this.keydownHandler=e=>this.onKeyDown(state,e),this.keyupHandler=e=>this.onKeyUp(state,e),container.addEventListener("keydown",this.keydownHandler),container.addEventListener("keyup",this.keyupHandler),this.selectionChangeHandler=e=>this.onSelectionChange(state,e),this.map.on("draw.selectionchange",this.selectionChangeHandler);if(this.map.on("draw.update",(e=>this.onUpdate(state,e))),"midpoint"===selectedType){const coords=state.midpoints[selectedIndex-state.vertecies.length];this.updateMidpoint(coords)}return state},onSelectionChange(state,e){const vertexCoord=e.points[e.points.length-1]?.geometry.coordinates,selectedIndex=e.features[0].geometry.coordinates.flat(1).findIndex((c=>vertexCoord&&c[0]===vertexCoord[0]&&c[1]===vertexCoord[1]));state.selectedIndex=state.selectedIndex<0?selectedIndex:state.selectedIndex,state.selectedType??=selectedIndex>=0?"vertex":null},onUpdate(state,e){const selectedIndex=parseInt(state.selectedCoordPaths[0]?.split(".")[1],10);state.selectedIndex=isNaN(selectedIndex)?state.selectedIndex:selectedIndex},onKeyDown(state,e){if(" "===e.key&&state.selectedIndex<0&&(state.isPanEnabled=!1,this.updateVertex(state)),!e.altKey&&ARROW_KEYS.includes(e.key)&&state.selectedIndex>=0&&(e.preventDefault(),e.stopPropagation(),"midpoint"===state.selectedType&&this.insertVertex(state,e),"vertex"===state.selectedType&&this.moveVertex(state,e)),e.altKey&&ARROW_KEYS.includes(e.key)&&state.selectedIndex>=0&&this.updateVertex(state,e.key),"Escape"===e.key){state.isPanEnabled=!0,state.selectedIndex=-1,state.selectedType=null;this._ctx.api.changeMode("edit_vertex",{container:state.container,isPanEnabled:!0,featureId:state.featureId})}},onKeyUp(state,e){ARROW_KEYS.includes(e.key)&&state.selectedIndex>=0&&e.stopPropagation(),"Delete"===e.key&&this.deleteVertex(state)},getVerticies(featureId){const feature=this.getFeature(featureId);return feature?.coordinates?.flat(1)||[]},getMidpoints(featureId){const feature=this.getFeature(featureId);if(!feature)return[];const coords=feature.coordinates.flat(1),midpoints=[];for(let i=0;i<coords.length;i++){const nextIndex=(i+1)%coords.length,midX=(coords[i][0]+coords[nextIndex][0])/2,midY=(coords[i][1]+coords[nextIndex][1])/2;midpoints.push([midX,midY])}return midpoints},getVertexOrMidpoint(state,direction){const{map}=this,pixels=[...state.vertecies.map((p=>Object.values(map.project(p)))),...state.midpoints.map((p=>Object.values(map.project(p))))],start=pixels[state.selectedIndex]||Object.values(map.project(map.getCenter())),index=spatialNavigate(start,pixels,direction);return[index,index<state.vertecies.length?"vertex":"midpoint"]},updateMidpoint(coordinates){const{map}=this;setTimeout((()=>{map.getSource("mapbox-gl-draw-hot").setData({type:"Feature",properties:{meta:"midpoint",active:"true",id:"active-midpoint"},geometry:{type:"Point",coordinates}})}),0)},updateVertex(state,direction){const{container,isPanEnabled,featureId}=state,[index,type]=this.getVertexOrMidpoint(state,direction);this._ctx.api.changeMode("edit_vertex",{container,isPanEnabled,featureId,selectedIndex:index,selectedType:type,..."vertex"===type?{coordPath:`0.${index}`}:{}})},getOffset(coord,e){const{map}=this,pixel=map.project(coord),offset=e.shiftKey?1:5;return"ArrowUp"===e.key?pixel.y-=offset:"ArrowDown"===e.key?pixel.y+=offset:"ArrowLeft"===e.key?pixel.x-=offset:pixel.x+=offset,map.unproject(pixel)},insertVertex(state,e){const feature=this.getFeature(state.featureId),midpointIndex=state.selectedIndex-state.vertecies.length;let midpointCoord=state.midpoints[midpointIndex];const newMidpointCoord=this.getOffset(midpointCoord,e);midpointCoord=[newMidpointCoord.lng,newMidpointCoord.lat];const vertexIndex=midpointIndex,geojson=feature.toGeoJSON();if("Polygon"===geojson.geometry.type){geojson.geometry.coordinates[0].splice(vertexIndex+1,0,midpointCoord),this._ctx.api.add(geojson)}"LineString"===geojson.geometry.type&&(geojson.geometry.coordinates.splice(vertexIndex+1,0,midpointCoord),this._ctx.api.add(geojson)),state.vertecies=this.getVerticies(state.featureId),state.midpoints=this.getMidpoints(state.featureId);const newVertexIndex=vertexIndex+1;this._ctx.api.changeMode("edit_vertex",{container:state.container,isPanEnabled:state.isPanEnabled,featureId:state.featureId,selectedIndex:newVertexIndex,selectedType:"vertex",coordPath:`0.${newVertexIndex}`})},moveVertex(state,e){const feature=this.getFeature(state.featureId),currentCoord=feature.coordinates.flat(1)[state.selectedIndex],newCoord=this.getOffset(currentCoord,e),geojson=feature.toGeoJSON();"Polygon"===geojson.geometry.type&&(geojson.geometry.coordinates[0][state.selectedIndex]=[newCoord.lng,newCoord.lat]),"LineString"===geojson.geometry.type&&(geojson.geometry.coordinates[state.selectedIndex]=[newCoord.lng,newCoord.lat]),this._ctx.api.add(geojson),state.vertecies=this.getVerticies(state.featureId),state.midpoints=this.getMidpoints(state.featureId)},deleteVertex(state){const draw=this._ctx.api,featureType=this.getFeature(state.featureId).type,numCoords=state.vertecies.length;if("Polygon"===featureType&&numCoords<=3||"LineString"===featureType&&numCoords<=2)return;draw.trash();const nextVertexIndex=state.selectedIndex>=state.vertecies.length-1?0:state.selectedIndex;draw.changeMode("edit_vertex",{container:state.container,isPanEnabled:state.isPanEnabled,featureId:state.featureId,selectedIndex:nextVertexIndex,selectedType:"vertex",coordPath:`0.${nextVertexIndex}`})},onStop(state){this.map.off("draw.selectionchange",this.selectionChangeHandler),state.container.removeEventListener("keydown",this.keydownHandler),state.container.removeEventListener("keyup",this.keyupHandler)}},DrawVertexMode={...draw_polygon.A,onSetup(options){const{map}=this,state=draw_polygon.A.onSetup.call(this,options),{interfaceType,container,featureId}=options;state.interfaceType=interfaceType,state.container=container,state.featureId=featureId,container.querySelector("[data-vertex-target]")||container.insertAdjacentHTML("beforeend","\n  <svg width='38' height='38' viewBox='0 0 38 38' fill-rule='evenodd' fill='currentColor' style='display:none;position:absolute;top:50%;left:50%;margin:-19px 0 0 -19px' class='vertex-target' data-vertex-target>\n    <path d='M5.035 20H1v-2h4.035C5.525 11.069 11.069 5.525 18 5.035V1h2v4.035c6.931.49 12.475 6.034 12.965 12.965H37v2h-4.035c-.49 6.931-6.034 12.475-12.965 12.965V37h-2v-4.035C11.069 32.475 5.525 26.931 5.035 20zM19 7A12.01 12.01 0 0 0 7 19a12.01 12.01 0 0 0 12 12 12.01 12.01 0 0 0 12-12A12.01 12.01 0 0 0 19 7z'/>\n    <circle cx='19' cy='19' r='2'/>\n  </svg>\n");const vertexMarker=container.lastElementChild;return vertexMarker.style.display="keyboard"===interfaceType?"block":"none",state.vertexMarker=vertexMarker,this.keydownHandler=e=>this.onKeyDown(state,e),this.keyupHandler=e=>this.onKeyUp(state,e),this.pointerdownHandler=e=>this.onPointerDown(state,e),this.focusHandler=e=>this.onFocus(state,e),this.blurHandler=e=>this.onBlur(state,e),this.createHandler=e=>this.onCreate(state,e),this.moveHandler=e=>this.onMove(state,e),this.pointermoveHandler=e=>this.onPointerMove(state,e),container.addEventListener("keydown",this.keydownHandler),container.addEventListener("keyup",this.keyupHandler),container.addEventListener("pointerdown",this.pointerdownHandler),container.addEventListener("focus",this.focusHandler),container.addEventListener("blur",this.blurHandler),container.addEventListener("pointermove",this.pointermoveHandler),map.on("draw.create",this.createHandler),map.on("move",this.moveHandler),state},onCreate(state,e){const draw=this._ctx.api,feature=e.features[0];draw.delete(feature.id),feature.id=state.featureId,draw.add(feature)},onKeyDown(state,e){"Escape"!==e.key&&("keyboard"===state.interfaceType&&this.onMove(state,e),state.interfaceType="keyboard",state.vertexMarker.style.display="block")},onKeyUp(state,e){"Escape"!==e.key&&("keyboard"===state.interfaceType&&this.onMove(state,e),state.interfaceType="keyboard","Enter"===e.key&&this.doClick(state),state.vertexMarker.style.display="block")},onPointerDown(state,e){state.interfaceType="pointer",state.vertexMarker.style.display="none"},onFocus(state,e){const{vertexMarker,interfaceType}=state;vertexMarker.style.display="keyboard"===interfaceType?"block":"none"},onBlur(state,e){state.vertexMarker.style.display="none"},doClick(state){const{map}=this,center=map.getCenter(),point=map.project(center),simulatedClickEvent={lngLat:center,point,originalEvent:new window.MouseEvent("click",{clientX:point.x,clientY:point.y,bubbles:!0,cancelable:!0})};draw_polygon.A.onClick.call(this,state,simulatedClickEvent),this._ctx.store.render()},onMove(state,e){if("keyboard"===state.interfaceType){const{map}=this,center=map.getCenter(),point=map.project(center),simulatedMouseMoveEvent={lngLat:center,point,originalEvent:new window.MouseEvent("mousemove",{clientX:point.x,clientY:point.y,bubbles:!0,cancelable:!0})};draw_polygon.A.onMouseMove.call(this,state,simulatedMouseMoveEvent),this._ctx.store.render()}},onPointerMove(state,e){state.vertexMarker.style.display="none"},toDisplayFeatures(state,geojson,display){if(draw_polygon.A.toDisplayFeatures.call(this,state,geojson,display),"Polygon"===geojson.geometry.type){const ring=geojson.geometry.coordinates[0];for(let i=1;i<ring.length-2;i++){const coordPath=`0.${i}`;display((0,create_vertex.A)(geojson.id,ring[i],coordPath))}}},onStop(state){draw_polygon.A.onStop.call(this,state);const{container}=state;container.removeEventListener("keydown",this.keydownHandler),container.removeEventListener("keyup",this.keyupHandler),container.removeEventListener("pointerdown",this.pointerdownHandler),container.removeEventListener("focus",this.focusHandler),container.removeEventListener("blur",this.blurHandler),container.removeEventListener("pointermove",this.pointermoveHandler),this.map.off("draw.create",this.createHandler),this.map.off("move",this.moveHandler),container.querySelector("[data-vertex-target]")?.remove()}},styles_draw=styleName=>{const fgColor="dark"===styleName?"#ffffff":"#0b0c0c",bgColor="dark"===styleName?"#373737":"#ffffff",hColor="dark"===styleName?"#ffffff":"#0b0c0c";return[fillActive(fgColor),strokeActive(fgColor),strokeInactive(fgColor),drawPreviewLine(fgColor),midpoint(fgColor),vertex(fgColor),vertexHalo(bgColor,hColor),vertexActive(fgColor),midpointHalo(bgColor,hColor),midpointActive(fgColor),circle(fgColor)]},fillActive=fgColor=>({id:"fill-active",type:"fill",filter:["all",["==","$type","Polygon"],["==","active","true"]],paint:{"fill-color":fgColor,"fill-opacity":.1}}),strokeActive=fgColor=>({id:"stroke-active",type:"line",filter:["all",["==","$type","Polygon"],["==","active","true"]],layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":fgColor,"line-width":2,"line-opacity":1}}),strokeInactive=fgColor=>({id:"stroke-inactive",type:"line",filter:["all",["==","$type","Polygon"],["==","active","false"]],layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":fgColor,"line-width":2,"line-opacity":.8}}),drawPreviewLine=fgColor=>({id:"stroke-preview-line",type:"line",filter:["all",["==","$type","LineString"],["==","active","true"]],layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":fgColor,"line-width":2,"line-dasharray":[.2,2],"line-opacity":1}}),midpoint=fgColor=>({id:"midpoint",type:"circle",filter:["all",["==","$type","Point"],["==","meta","midpoint"]],paint:{"circle-radius":5,"circle-color":fgColor}}),vertex=fgColor=>({id:"vertex",type:"circle",filter:["all",["==","$type","Point"],["==","meta","vertex"]],paint:{"circle-radius":7,"circle-color":fgColor}}),vertexHalo=(bgColor,hColor)=>({id:"vertex-halo",type:"circle",filter:["all",["==","$type","Point"],["==","meta","vertex"],["==","active","true"]],paint:{"circle-radius":9,"circle-stroke-width":3,"circle-color":bgColor,"circle-stroke-color":hColor}}),vertexActive=fgColor=>({id:"vertex-active",type:"circle",filter:["all",["==","$type","Point"],["==","meta","vertex"],["==","active","true"]],paint:{"circle-radius":7,"circle-color":fgColor}}),midpointHalo=(bgColor,hColor)=>({id:"midpoint-halo",type:"circle",filter:["all",["==","$type","Point"],["==","meta","midpoint"],["==","active","true"]],paint:{"circle-radius":7,"circle-stroke-width":3,"circle-color":bgColor,"circle-stroke-color":hColor}}),midpointActive=fgColor=>({id:"midpoint-active",type:"circle",filter:["all",["==","$type","Point"],["==","meta","midpoint"],["==","active","true"]],paint:{"circle-radius":5,"circle-color":fgColor}}),circle=fgColor=>({id:"circle",type:"line",filter:["==","id","circle"],paint:{"line-color":fgColor,"line-width":2,"line-opacity":.8}});var viewport=__webpack_require__("./src/js/lib/viewport.js"),esm=__webpack_require__("./node_modules/@turf/circle/dist/esm/index.js"),constants=__webpack_require__("./src/js/provider/os-maplibre/constants.js");class Draw{constructor(provider,options){const{container,map,style}=provider;Object.assign(this,options);const{drawMode,shape,feature}=options;this.provider=provider,this.shape=shape,provider.draw=this;const initialFeature=feature?{...feature,id:shape}:null;this.oFeature=initialFeature,mapbox_gl_draw.A.constants.classes.CONTROL_BASE="maplibregl-ctrl",mapbox_gl_draw.A.constants.classes.CONTROL_PREFIX="maplibregl-ctrl-",mapbox_gl_draw.A.constants.classes.CONTROL_GROUP="maplibregl-ctrl-group";const modes=mapbox_gl_draw.A.modes;modes.disabled=DisabledMode,modes.edit_vertex=EditVertexMode,modes.draw_vertex=DrawVertexMode;const draw=new mapbox_gl_draw.A({modes,styles:styles_draw(style.name),displayControlsDefault:!1,userProperties:!0});map.addControl(draw),this.draw=draw,initialFeature&&"default"===drawMode?this.addFeature(initialFeature):(map.on("draw.modechange",(e=>{"simple_select"===e.mode&&draw.changeMode("edit_vertex",{container:container.parentNode,featureId:this.shape})})),map.on("draw.vertexselected",(e=>{provider.dispatchEvent(new CustomEvent("vertex",{detail:{isSelected:e.isSelected}}))})),map.on("click",(e=>{})),this.add(drawMode,shape))}add(drawMode,shape){const{draw}=this,{container}=this.provider;this.shape=shape,"frame"===drawMode&&(draw.deleteAll(),draw.changeMode("disabled")),"vertex"!==drawMode||draw.get(shape)||draw.changeMode("draw_vertex",{container:container.parentNode,featureId:shape})}edit(drawMode,shape){const{oFeature,draw}=this,{map,container}=this.provider;if(this.shape=shape,oFeature){const coords=oFeature.geometry.coordinates,bounds=this.getBoundsFromCoordinates(coords[0]);map.fitBounds(bounds,{animate:!1})}"frame"===drawMode&&(draw.deleteAll(),draw.changeMode("disabled")),"vertex"===drawMode&&draw.get(shape)&&draw.changeMode("edit_vertex",{container:container.parentNode,featureId:shape})}editPolygon(){this.addFeature(null,"polygon"),this.edit("vertex","polygon")}cancel(){const{draw,oFeature}=this;draw.deleteAll(),oFeature&&draw.add(oFeature),draw.changeMode("disabled")}finish(shape){const{draw}=this,{paddingBox}=this.provider;if(["square","circle"].includes(shape)){const elFeature=this.getFeatureFromElement(paddingBox,shape);this.addFeature(elFeature)}return this.oFeature=draw.get(shape),draw.changeMode("disabled"),this.oFeature}delete(){const{draw}=this;draw.deleteAll(),this.oFeature=null}addFeature(feature,shape){const{paddingBox}=this.provider;feature??=this.getFeatureFromElement(paddingBox,shape),this.draw.add(feature),this.draw.changeMode("disabled")}getBoundsFromCoordinates(coords){let minX=1/0,minY=1/0,maxX=-1/0,maxY=-1/0;return coords.forEach((coord=>{const x=coord[0],y=coord[1];minX=x<minX?x:minX,minY=y<minY?y:minY,maxX=x>maxX?x:maxX,maxY=y>maxY?y:maxY})),[minX,minY,maxX,maxY]}getFeatureFromElement(el,shape){const{map,scale}=this.provider,box=el.getBoundingClientRect(),padding=(0,viewport.Ig)(el,scale),nw=map.unproject([padding.left,padding.top]),se=map.unproject([padding.left+box.width/scale,padding.top+box.height/scale]),feature={id:shape,type:"Feature",geometry:{type:"Polygon"}};if("circle"===shape){const c=map.getCenter(),coords=[c.lng,c.lat],radius=(0,viewport.Yf)([nw.lng,nw.lat],[se.lng,nw.lat])/2,roundedCoords=new esm.n(coords,radius,{units:"meters"}).geometry.coordinates[0].map((([lng,lat])=>[+lng.toFixed(constants.N.PRECISION),+lat.toFixed(constants.N.PRECISION)]));feature.geometry.coordinates=[roundedCoords]}else{const b=[nw.lng,nw.lat,se.lng,se.lat],coords=[[[b[0],b[1]],[b[2],b[1]],[b[2],b[3]],[b[0],b[3]],[b[0],b[1]]]];feature.geometry.coordinates=coords}return feature}setStyle(){const{draw,shape}=this;"edit_vertex"===draw?.getMode()&&(draw.changeMode("simple_select"),this.edit("vertex",shape))}}const draw=Draw}}]);