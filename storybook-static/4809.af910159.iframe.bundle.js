(self.webpackChunk_defra_flood_map=self.webpackChunk_defra_flood_map||[]).push([[4809],{"./node_modules/@mapbox/geojson-area/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{var wgs84=__webpack_require__("./node_modules/wgs84/index.js");function polygonArea(coords){var area=0;if(coords&&coords.length>0){area+=Math.abs(ringArea(coords[0]));for(var i=1;i<coords.length;i++)area-=Math.abs(ringArea(coords[i]))}return area}function ringArea(coords){var p1,p2,lowerIndex,middleIndex,upperIndex,i,area=0,coordsLength=coords.length;if(coordsLength>2){for(i=0;i<coordsLength;i++)i===coordsLength-2?(lowerIndex=coordsLength-2,middleIndex=coordsLength-1,upperIndex=0):i===coordsLength-1?(lowerIndex=coordsLength-1,middleIndex=0,upperIndex=1):(lowerIndex=i,middleIndex=i+1,upperIndex=i+2),p1=coords[lowerIndex],p2=coords[middleIndex],area+=(rad(coords[upperIndex][0])-rad(p1[0]))*Math.sin(rad(p2[1]));area=area*wgs84.RADIUS*wgs84.RADIUS/2}return area}function rad(_){return _*Math.PI/180}module.exports.geometry=function geometry(_){var i,area=0;switch(_.type){case"Polygon":return polygonArea(_.coordinates);case"MultiPolygon":for(i=0;i<_.coordinates.length;i++)area+=polygonArea(_.coordinates[i]);return area;case"Point":case"MultiPoint":case"LineString":case"MultiLineString":return 0;case"GeometryCollection":for(i=0;i<_.geometries.length;i++)area+=geometry(_.geometries[i]);return area}},module.exports.ring=ringArea},"./node_modules/@mapbox/geojson-normalize/index.js":module=>{module.exports=function normalize(gj){if(!gj||!gj.type)return null;var type=types[gj.type];if(!type)return null;if("geometry"===type)return{type:"FeatureCollection",features:[{type:"Feature",properties:{},geometry:gj}]};if("feature"===type)return{type:"FeatureCollection",features:[gj]};if("featurecollection"===type)return gj};var types={Point:"geometry",MultiPoint:"geometry",LineString:"geometry",MultiLineString:"geometry",Polygon:"geometry",MultiPolygon:"geometry",GeometryCollection:"geometry",Feature:"feature",FeatureCollection:"featurecollection"}},"./node_modules/@mapbox/mapbox-gl-draw/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>mapbox_gl_draw});var lib_namespaceObject={};__webpack_require__.r(lib_namespaceObject),__webpack_require__.d(lib_namespaceObject,{CommonSelectors:()=>common_selectors,ModeHandler:()=>mode_handler,StringSet:()=>string_set,constrainFeatureMovement:()=>constrain_feature_movement.A,createMidPoint:()=>create_midpoint.A,createSupplementaryPoints:()=>create_supplementary_points.A,createVertex:()=>create_vertex.A,doubleClickZoom:()=>double_click_zoom.A,euclideanDistance:()=>euclidean_distance,featuresAt:()=>features_at,getFeatureAtAndSetCursors:()=>getFeatureAtAndSetCursors,isClick:()=>isClick,isEventAtCoordinates:()=>is_event_at_coordinates.A,isTap:()=>isTap,mapEventToBoundingBox:()=>map_event_to_bounding_box,moveFeatures:()=>move_features.A,sortFeatures:()=>sort_features,stringSetsAreEqual:()=>string_sets_are_equal,theme:()=>theme,toDenseArray:()=>to_dense_array});const mode_handler=function(mode,DrawContext){const handlers={drag:[],click:[],mousemove:[],mousedown:[],mouseup:[],mouseout:[],keydown:[],keyup:[],touchstart:[],touchmove:[],touchend:[],tap:[]},ctx={on(event,selector,fn){if(void 0===handlers[event])throw new Error(`Invalid event type: ${event}`);handlers[event].push({selector,fn})},render(id){DrawContext.store.featureChanged(id)}},delegate=function(eventName,event){const handles=handlers[eventName];let iHandle=handles.length;for(;iHandle--;){const handle=handles[iHandle];if(handle.selector(event)){handle.fn.call(ctx,event)||DrawContext.store.render(),DrawContext.ui.updateMapClasses();break}}};return mode.start.call(ctx),{render:mode.render,stop(){mode.stop&&mode.stop()},trash(){mode.trash&&(mode.trash(),DrawContext.store.render())},combineFeatures(){mode.combineFeatures&&mode.combineFeatures()},uncombineFeatures(){mode.uncombineFeatures&&mode.uncombineFeatures()},drag(event){delegate("drag",event)},click(event){delegate("click",event)},mousemove(event){delegate("mousemove",event)},mousedown(event){delegate("mousedown",event)},mouseup(event){delegate("mouseup",event)},mouseout(event){delegate("mouseout",event)},keydown(event){delegate("keydown",event)},keyup(event){delegate("keyup",event)},touchstart(event){delegate("touchstart",event)},touchmove(event){delegate("touchmove",event)},touchend(event){delegate("touchend",event)},tap(event){delegate("tap",event)}}};var geojson_area=__webpack_require__("./node_modules/@mapbox/geojson-area/index.js"),constants=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/constants.js");const FEATURE_SORT_RANKS={Point:0,LineString:1,MultiLineString:1,Polygon:2};function comparator(a,b){const score=FEATURE_SORT_RANKS[a.geometry.type]-FEATURE_SORT_RANKS[b.geometry.type];return 0===score&&a.geometry.type===constants.geojsonTypes.POLYGON?a.area-b.area:score}const sort_features=function sortFeatures(features){return features.map((feature=>(feature.geometry.type===constants.geojsonTypes.POLYGON&&(feature.area=geojson_area.geometry({type:constants.geojsonTypes.FEATURE,property:{},geometry:feature.geometry})),feature))).sort(comparator).map((feature=>(delete feature.area,feature)))};const map_event_to_bounding_box=function mapEventToBoundingBox(mapEvent,buffer=0){return[[mapEvent.point.x-buffer,mapEvent.point.y-buffer],[mapEvent.point.x+buffer,mapEvent.point.y+buffer]]};function StringSet(items){if(this._items={},this._nums={},this._length=items?items.length:0,items)for(let i=0,l=items.length;i<l;i++)this.add(items[i]),void 0!==items[i]&&("string"==typeof items[i]?this._items[items[i]]=i:this._nums[items[i]]=i)}StringSet.prototype.add=function(x){return this.has(x)||(this._length++,"string"==typeof x?this._items[x]=this._length:this._nums[x]=this._length),this},StringSet.prototype.delete=function(x){return!1===this.has(x)||(this._length--,delete this._items[x],delete this._nums[x]),this},StringSet.prototype.has=function(x){return("string"==typeof x||"number"==typeof x)&&(void 0!==this._items[x]||void 0!==this._nums[x])},StringSet.prototype.values=function(){const values=[];return Object.keys(this._items).forEach((k=>{values.push({k,v:this._items[k]})})),Object.keys(this._nums).forEach((k=>{values.push({k:JSON.parse(k),v:this._nums[k]})})),values.sort(((a,b)=>a.v-b.v)).map((a=>a.k))},StringSet.prototype.clear=function(){return this._length=0,this._items={},this._nums={},this};const string_set=StringSet,META_TYPES=[constants.meta.FEATURE,constants.meta.MIDPOINT,constants.meta.VERTEX],features_at={click:function featuresAtClick(event,bbox,ctx){return featuresAt(event,bbox,ctx,ctx.options.clickBuffer)},touch:function featuresAtTouch(event,bbox,ctx){return featuresAt(event,bbox,ctx,ctx.options.touchBuffer)}};function featuresAt(event,bbox,ctx,buffer){if(null===ctx.map)return[];const box=event?map_event_to_bounding_box(event,buffer):bbox,queryParams={};ctx.options.styles&&(queryParams.layers=ctx.options.styles.map((s=>s.id)).filter((id=>null!=ctx.map.getLayer(id))));const features=ctx.map.queryRenderedFeatures(box,queryParams).filter((feature=>-1!==META_TYPES.indexOf(feature.properties.meta))),featureIds=new string_set,uniqueFeatures=[];return features.forEach((feature=>{const featureId=feature.properties.id;featureIds.has(featureId)||(featureIds.add(featureId),uniqueFeatures.push(feature))})),sort_features(uniqueFeatures)}function getFeatureAtAndSetCursors(event,ctx){const features=features_at.click(event,null,ctx),classes={mouse:constants.cursors.NONE};return features[0]&&(classes.mouse=features[0].properties.active===constants.activeStates.ACTIVE?constants.cursors.MOVE:constants.cursors.POINTER,classes.feature=features[0].properties.meta),-1!==ctx.events.currentModeName().indexOf("draw")&&(classes.mouse=constants.cursors.ADD),ctx.ui.queueMapClasses(classes),ctx.ui.updateMapClasses(),features[0]}function euclidean_distance(a,b){const x=a.x-b.x,y=a.y-b.y;return Math.sqrt(x*x+y*y)}const FINE_TOLERANCE=4,GROSS_TOLERANCE=12,INTERVAL=500;function isClick(start,end,options={}){const fineTolerance=null!=options.fineTolerance?options.fineTolerance:FINE_TOLERANCE,grossTolerance=null!=options.grossTolerance?options.grossTolerance:GROSS_TOLERANCE,interval=null!=options.interval?options.interval:INTERVAL;start.point=start.point||end.point,start.time=start.time||end.time;const moveDistance=euclidean_distance(start.point,end.point);return moveDistance<fineTolerance||moveDistance<grossTolerance&&end.time-start.time<interval}const TAP_TOLERANCE=25,TAP_INTERVAL=250;function isTap(start,end,options={}){const tolerance=null!=options.tolerance?options.tolerance:TAP_TOLERANCE,interval=null!=options.interval?options.interval:TAP_INTERVAL;start.point=start.point||end.point,start.time=start.time||end.time;return euclidean_distance(start.point,end.point)<tolerance&&end.time-start.time<interval}const id_nanoid=((alphabet,defaultSize=21)=>(size=defaultSize)=>{let id="",i=0|size;for(;i--;)id+=alphabet[Math.random()*alphabet.length|0];return id})("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",32);function generateID(){return id_nanoid()}const Feature=function(ctx,geojson){this.ctx=ctx,this.properties=geojson.properties||{},this.coordinates=geojson.geometry.coordinates,this.id=geojson.id||generateID(),this.type=geojson.geometry.type};Feature.prototype.changed=function(){this.ctx.store.featureChanged(this.id)},Feature.prototype.incomingCoords=function(coords){this.setCoordinates(coords)},Feature.prototype.setCoordinates=function(coords){this.coordinates=coords,this.changed()},Feature.prototype.getCoordinates=function(){return JSON.parse(JSON.stringify(this.coordinates))},Feature.prototype.setProperty=function(property,value){this.properties[property]=value},Feature.prototype.toGeoJSON=function(){return JSON.parse(JSON.stringify({id:this.id,type:constants.geojsonTypes.FEATURE,properties:this.properties,geometry:{coordinates:this.getCoordinates(),type:this.type}}))},Feature.prototype.internal=function(mode){const properties={id:this.id,meta:constants.meta.FEATURE,"meta:type":this.type,active:constants.activeStates.INACTIVE,mode};if(this.ctx.options.userProperties)for(const name in this.properties)properties[`user_${name}`]=this.properties[name];return{type:constants.geojsonTypes.FEATURE,properties,geometry:{coordinates:this.getCoordinates(),type:this.type}}};const feature=Feature,Point=function(ctx,geojson){feature.call(this,ctx,geojson)};(Point.prototype=Object.create(feature.prototype)).isValid=function(){return"number"==typeof this.coordinates[0]&&"number"==typeof this.coordinates[1]},Point.prototype.updateCoordinate=function(pathOrLng,lngOrLat,lat){this.coordinates=3===arguments.length?[lngOrLat,lat]:[pathOrLng,lngOrLat],this.changed()},Point.prototype.getCoordinate=function(){return this.getCoordinates()};const point=Point,LineString=function(ctx,geojson){feature.call(this,ctx,geojson)};(LineString.prototype=Object.create(feature.prototype)).isValid=function(){return this.coordinates.length>1},LineString.prototype.addCoordinate=function(path,lng,lat){this.changed();const id=parseInt(path,10);this.coordinates.splice(id,0,[lng,lat])},LineString.prototype.getCoordinate=function(path){const id=parseInt(path,10);return JSON.parse(JSON.stringify(this.coordinates[id]))},LineString.prototype.removeCoordinate=function(path){this.changed(),this.coordinates.splice(parseInt(path,10),1)},LineString.prototype.updateCoordinate=function(path,lng,lat){const id=parseInt(path,10);this.coordinates[id]=[lng,lat],this.changed()};const line_string=LineString,Polygon=function(ctx,geojson){feature.call(this,ctx,geojson),this.coordinates=this.coordinates.map((ring=>ring.slice(0,-1)))};(Polygon.prototype=Object.create(feature.prototype)).isValid=function(){return 0!==this.coordinates.length&&this.coordinates.every((ring=>ring.length>2))},Polygon.prototype.incomingCoords=function(coords){this.coordinates=coords.map((ring=>ring.slice(0,-1))),this.changed()},Polygon.prototype.setCoordinates=function(coords){this.coordinates=coords,this.changed()},Polygon.prototype.addCoordinate=function(path,lng,lat){this.changed();const ids=path.split(".").map((x=>parseInt(x,10)));this.coordinates[ids[0]].splice(ids[1],0,[lng,lat])},Polygon.prototype.removeCoordinate=function(path){this.changed();const ids=path.split(".").map((x=>parseInt(x,10))),ring=this.coordinates[ids[0]];ring&&(ring.splice(ids[1],1),ring.length<3&&this.coordinates.splice(ids[0],1))},Polygon.prototype.getCoordinate=function(path){const ids=path.split(".").map((x=>parseInt(x,10))),ring=this.coordinates[ids[0]];return JSON.parse(JSON.stringify(ring[ids[1]]))},Polygon.prototype.getCoordinates=function(){return this.coordinates.map((coords=>coords.concat([coords[0]])))},Polygon.prototype.updateCoordinate=function(path,lng,lat){this.changed();const parts=path.split("."),ringId=parseInt(parts[0],10),coordId=parseInt(parts[1],10);void 0===this.coordinates[ringId]&&(this.coordinates[ringId]=[]),this.coordinates[ringId][coordId]=[lng,lat]};const polygon=Polygon,models={MultiPoint:point,MultiLineString:line_string,MultiPolygon:polygon},takeAction=(features,action,path,lng,lat)=>{const parts=path.split("."),idx=parseInt(parts[0],10),tail=parts[1]?parts.slice(1).join("."):null;return features[idx][action](tail,lng,lat)},MultiFeature=function(ctx,geojson){if(feature.call(this,ctx,geojson),delete this.coordinates,this.model=models[geojson.geometry.type],void 0===this.model)throw new TypeError(`${geojson.geometry.type} is not a valid type`);this.features=this._coordinatesToFeatures(geojson.geometry.coordinates)};(MultiFeature.prototype=Object.create(feature.prototype))._coordinatesToFeatures=function(coordinates){const Model=this.model.bind(this);return coordinates.map((coords=>new Model(this.ctx,{id:generateID(),type:constants.geojsonTypes.FEATURE,properties:{},geometry:{coordinates:coords,type:this.type.replace("Multi","")}})))},MultiFeature.prototype.isValid=function(){return this.features.every((f=>f.isValid()))},MultiFeature.prototype.setCoordinates=function(coords){this.features=this._coordinatesToFeatures(coords),this.changed()},MultiFeature.prototype.getCoordinate=function(path){return takeAction(this.features,"getCoordinate",path)},MultiFeature.prototype.getCoordinates=function(){return JSON.parse(JSON.stringify(this.features.map((f=>f.type===constants.geojsonTypes.POLYGON?f.getCoordinates():f.coordinates))))},MultiFeature.prototype.updateCoordinate=function(path,lng,lat){takeAction(this.features,"updateCoordinate",path,lng,lat),this.changed()},MultiFeature.prototype.addCoordinate=function(path,lng,lat){takeAction(this.features,"addCoordinate",path,lng,lat),this.changed()},MultiFeature.prototype.removeCoordinate=function(path){takeAction(this.features,"removeCoordinate",path),this.changed()},MultiFeature.prototype.getFeatures=function(){return this.features};const multi_feature=MultiFeature;function ModeInterface(ctx){this.map=ctx.map,this.drawConfig=JSON.parse(JSON.stringify(ctx.options||{})),this._ctx=ctx}ModeInterface.prototype.setSelected=function(features){return this._ctx.store.setSelected(features)},ModeInterface.prototype.setSelectedCoordinates=function(coords){this._ctx.store.setSelectedCoordinates(coords),coords.reduce(((m,c)=>(void 0===m[c.feature_id]&&(m[c.feature_id]=!0,this._ctx.store.get(c.feature_id).changed()),m)),{})},ModeInterface.prototype.getSelected=function(){return this._ctx.store.getSelected()},ModeInterface.prototype.getSelectedIds=function(){return this._ctx.store.getSelectedIds()},ModeInterface.prototype.isSelected=function(id){return this._ctx.store.isSelected(id)},ModeInterface.prototype.getFeature=function(id){return this._ctx.store.get(id)},ModeInterface.prototype.select=function(id){return this._ctx.store.select(id)},ModeInterface.prototype.deselect=function(id){return this._ctx.store.deselect(id)},ModeInterface.prototype.deleteFeature=function(id,opts={}){return this._ctx.store.delete(id,opts)},ModeInterface.prototype.addFeature=function(feature,opts={}){return this._ctx.store.add(feature,opts)},ModeInterface.prototype.clearSelectedFeatures=function(){return this._ctx.store.clearSelected()},ModeInterface.prototype.clearSelectedCoordinates=function(){return this._ctx.store.clearSelectedCoordinates()},ModeInterface.prototype.setActionableState=function(actions={}){const newSet={trash:actions.trash||!1,combineFeatures:actions.combineFeatures||!1,uncombineFeatures:actions.uncombineFeatures||!1};return this._ctx.events.actionable(newSet)},ModeInterface.prototype.changeMode=function(mode,opts={},eventOpts={}){return this._ctx.events.changeMode(mode,opts,eventOpts)},ModeInterface.prototype.fire=function(eventName,eventData){return this._ctx.events.fire(eventName,eventData)},ModeInterface.prototype.updateUIClasses=function(opts){return this._ctx.ui.queueMapClasses(opts)},ModeInterface.prototype.activateUIButton=function(name){return this._ctx.ui.setActiveButton(name)},ModeInterface.prototype.featuresAt=function(event,bbox,bufferType="click"){if("click"!==bufferType&&"touch"!==bufferType)throw new Error("invalid buffer type");return features_at[bufferType](event,bbox,this._ctx)},ModeInterface.prototype.newFeature=function(geojson){const type=geojson.geometry.type;return type===constants.geojsonTypes.POINT?new point(this._ctx,geojson):type===constants.geojsonTypes.LINE_STRING?new line_string(this._ctx,geojson):type===constants.geojsonTypes.POLYGON?new polygon(this._ctx,geojson):new multi_feature(this._ctx,geojson)},ModeInterface.prototype.isInstanceOf=function(type,feature){if(type===constants.geojsonTypes.POINT)return feature instanceof point;if(type===constants.geojsonTypes.LINE_STRING)return feature instanceof line_string;if(type===constants.geojsonTypes.POLYGON)return feature instanceof polygon;if("MultiFeature"===type)return feature instanceof multi_feature;throw new Error(`Unknown feature class: ${type}`)},ModeInterface.prototype.doRender=function(id){return this._ctx.store.featureChanged(id)};const mode_interface=ModeInterface;ModeInterface.prototype.onSetup=function(){},ModeInterface.prototype.onDrag=function(){},ModeInterface.prototype.onClick=function(){},ModeInterface.prototype.onMouseMove=function(){},ModeInterface.prototype.onMouseDown=function(){},ModeInterface.prototype.onMouseUp=function(){},ModeInterface.prototype.onMouseOut=function(){},ModeInterface.prototype.onKeyUp=function(){},ModeInterface.prototype.onKeyDown=function(){},ModeInterface.prototype.onTouchStart=function(){},ModeInterface.prototype.onTouchMove=function(){},ModeInterface.prototype.onTouchEnd=function(){},ModeInterface.prototype.onTap=function(){},ModeInterface.prototype.onStop=function(){},ModeInterface.prototype.onTrash=function(){},ModeInterface.prototype.onCombineFeature=function(){},ModeInterface.prototype.onUncombineFeature=function(){},ModeInterface.prototype.toDisplayFeatures=function(){throw new Error("You must overwrite toDisplayFeatures")};const eventMapper={drag:"onDrag",click:"onClick",mousemove:"onMouseMove",mousedown:"onMouseDown",mouseup:"onMouseUp",mouseout:"onMouseOut",keyup:"onKeyUp",keydown:"onKeyDown",touchstart:"onTouchStart",touchmove:"onTouchMove",touchend:"onTouchEnd",tap:"onTap"},eventKeys=Object.keys(eventMapper);function object_to_mode(modeObject){const modeObjectKeys=Object.keys(modeObject);return function(ctx,startOpts={}){let state={};const mode=modeObjectKeys.reduce(((m,k)=>(m[k]=modeObject[k],m)),new mode_interface(ctx));return{start(){state=mode.onSetup(startOpts),eventKeys.forEach((key=>{const modeHandler=eventMapper[key];let selector=()=>!1;modeObject[modeHandler]&&(selector=()=>!0),this.on(key,selector,function wrapper(eh){return e=>mode[eh](state,e)}(modeHandler))}))},stop(){mode.onStop(state)},trash(){mode.onTrash(state)},combineFeatures(){mode.onCombineFeatures(state)},uncombineFeatures(){mode.onUncombineFeatures(state)},render(geojson,push){mode.toDisplayFeatures(state,geojson,push)}}}}const to_dense_array=function toDenseArray(x){return[].concat(x).filter((y=>void 0!==y))};function render(){const store=this;if(!(store.ctx.map&&void 0!==store.ctx.map.getSource(constants.sources.HOT)))return cleanup();const mode=store.ctx.events.currentModeName();store.ctx.ui.queueMapClasses({mode});let newHotIds=[],newColdIds=[];store.isDirty?newColdIds=store.getAllIds():(newHotIds=store.getChangedIds().filter((id=>void 0!==store.get(id))),newColdIds=store.sources.hot.filter((geojson=>geojson.properties.id&&-1===newHotIds.indexOf(geojson.properties.id)&&void 0!==store.get(geojson.properties.id))).map((geojson=>geojson.properties.id))),store.sources.hot=[];const lastColdCount=store.sources.cold.length;store.sources.cold=store.isDirty?[]:store.sources.cold.filter((geojson=>{const id=geojson.properties.id||geojson.properties.parent;return-1===newHotIds.indexOf(id)}));const coldChanged=lastColdCount!==store.sources.cold.length||newColdIds.length>0;function renderFeature(id,source){const featureInternal=store.get(id).internal(mode);store.ctx.events.currentModeRender(featureInternal,(geojson=>{geojson.properties.mode=mode,store.sources[source].push(geojson)}))}function cleanup(){store.isDirty=!1,store.clearChangedIds()}newHotIds.forEach((id=>renderFeature(id,"hot"))),newColdIds.forEach((id=>renderFeature(id,"cold"))),coldChanged&&store.ctx.map.getSource(constants.sources.COLD).setData({type:constants.geojsonTypes.FEATURE_COLLECTION,features:store.sources.cold}),store.ctx.map.getSource(constants.sources.HOT).setData({type:constants.geojsonTypes.FEATURE_COLLECTION,features:store.sources.hot}),cleanup()}function Store(ctx){let renderRequest;this._features={},this._featureIds=new string_set,this._selectedFeatureIds=new string_set,this._selectedCoordinates=[],this._changedFeatureIds=new string_set,this._emitSelectionChange=!1,this._mapInitialConfig={},this.ctx=ctx,this.sources={hot:[],cold:[]},this.render=()=>{renderRequest||(renderRequest=requestAnimationFrame((()=>{renderRequest=null,render.call(this),this._emitSelectionChange&&(this.ctx.events.fire(constants.events.SELECTION_CHANGE,{features:this.getSelected().map((feature=>feature.toGeoJSON())),points:this.getSelectedCoordinates().map((coordinate=>({type:constants.geojsonTypes.FEATURE,properties:{},geometry:{type:constants.geojsonTypes.POINT,coordinates:coordinate.coordinates}})))}),this._emitSelectionChange=!1),this.ctx.events.fire(constants.events.RENDER,{})})))},this.isDirty=!1}function refreshSelectedCoordinates(store,options={}){const newSelectedCoordinates=store._selectedCoordinates.filter((point=>store._selectedFeatureIds.has(point.feature_id)));store._selectedCoordinates.length===newSelectedCoordinates.length||options.silent||(store._emitSelectionChange=!0),store._selectedCoordinates=newSelectedCoordinates}Store.prototype.createRenderBatch=function(){const holdRender=this.render;let numRenders=0;return this.render=function(){numRenders++},()=>{this.render=holdRender,numRenders>0&&this.render()}},Store.prototype.setDirty=function(){return this.isDirty=!0,this},Store.prototype.featureCreated=function(featureId,options={}){this._changedFeatureIds.add(featureId);if(!0!==(null!=options.silent?options.silent:this.ctx.options.suppressAPIEvents)){const feature=this.get(featureId);this.ctx.events.fire(constants.events.CREATE,{features:[feature.toGeoJSON()]})}return this},Store.prototype.featureChanged=function(featureId,options={}){this._changedFeatureIds.add(featureId);return!0!==(null!=options.silent?options.silent:this.ctx.options.suppressAPIEvents)&&this.ctx.events.fire(constants.events.UPDATE,{action:options.action?options.action:constants.updateActions.CHANGE_COORDINATES,features:[this.get(featureId).toGeoJSON()]}),this},Store.prototype.getChangedIds=function(){return this._changedFeatureIds.values()},Store.prototype.clearChangedIds=function(){return this._changedFeatureIds.clear(),this},Store.prototype.getAllIds=function(){return this._featureIds.values()},Store.prototype.add=function(feature,options={}){return this._features[feature.id]=feature,this._featureIds.add(feature.id),this.featureCreated(feature.id,{silent:options.silent}),this},Store.prototype.delete=function(featureIds,options={}){const deletedFeaturesToEmit=[];return to_dense_array(featureIds).forEach((id=>{this._featureIds.has(id)&&(this._featureIds.delete(id),this._selectedFeatureIds.delete(id),options.silent||-1===deletedFeaturesToEmit.indexOf(this._features[id])&&deletedFeaturesToEmit.push(this._features[id].toGeoJSON()),delete this._features[id],this.isDirty=!0)})),deletedFeaturesToEmit.length&&this.ctx.events.fire(constants.events.DELETE,{features:deletedFeaturesToEmit}),refreshSelectedCoordinates(this,options),this},Store.prototype.get=function(id){return this._features[id]},Store.prototype.getAll=function(){return Object.keys(this._features).map((id=>this._features[id]))},Store.prototype.select=function(featureIds,options={}){return to_dense_array(featureIds).forEach((id=>{this._selectedFeatureIds.has(id)||(this._selectedFeatureIds.add(id),this._changedFeatureIds.add(id),options.silent||(this._emitSelectionChange=!0))})),this},Store.prototype.deselect=function(featureIds,options={}){return to_dense_array(featureIds).forEach((id=>{this._selectedFeatureIds.has(id)&&(this._selectedFeatureIds.delete(id),this._changedFeatureIds.add(id),options.silent||(this._emitSelectionChange=!0))})),refreshSelectedCoordinates(this,options),this},Store.prototype.clearSelected=function(options={}){return this.deselect(this._selectedFeatureIds.values(),{silent:options.silent}),this},Store.prototype.setSelected=function(featureIds,options={}){return featureIds=to_dense_array(featureIds),this.deselect(this._selectedFeatureIds.values().filter((id=>-1===featureIds.indexOf(id))),{silent:options.silent}),this.select(featureIds.filter((id=>!this._selectedFeatureIds.has(id))),{silent:options.silent}),this},Store.prototype.setSelectedCoordinates=function(coordinates){return this._selectedCoordinates=coordinates,this._emitSelectionChange=!0,this},Store.prototype.clearSelectedCoordinates=function(){return this._selectedCoordinates=[],this._emitSelectionChange=!0,this},Store.prototype.getSelectedIds=function(){return this._selectedFeatureIds.values()},Store.prototype.getSelected=function(){return this.getSelectedIds().map((id=>this.get(id)))},Store.prototype.getSelectedCoordinates=function(){return this._selectedCoordinates.map((coordinate=>({coordinates:this.get(coordinate.feature_id).getCoordinate(coordinate.coord_path)})))},Store.prototype.isSelected=function(featureId){return this._selectedFeatureIds.has(featureId)},Store.prototype.setFeatureProperty=function(featureId,property,value,options={}){this.get(featureId).setProperty(property,value),this.featureChanged(featureId,{silent:options.silent,action:constants.updateActions.CHANGE_PROPERTIES})},Store.prototype.storeMapConfig=function(){constants.interactions.forEach((interaction=>{this.ctx.map[interaction]&&(this._mapInitialConfig[interaction]=this.ctx.map[interaction].isEnabled())}))},Store.prototype.restoreMapConfig=function(){Object.keys(this._mapInitialConfig).forEach((key=>{this._mapInitialConfig[key]?this.ctx.map[key].enable():this.ctx.map[key].disable()}))},Store.prototype.getInitialConfigValue=function(interaction){return void 0===this._mapInitialConfig[interaction]||this._mapInitialConfig[interaction]};const classTypes=["mode","feature","mouse"];function src_setup(ctx){let controlContainer=null,mapLoadedInterval=null;const setup={onRemove(){return ctx.map.off("load",setup.connect),clearInterval(mapLoadedInterval),setup.removeLayers(),ctx.store.restoreMapConfig(),ctx.ui.removeButtons(),ctx.events.removeEventListeners(),ctx.ui.clearMapClasses(),ctx.boxZoomInitial&&ctx.map.boxZoom.enable(),ctx.map=null,ctx.container=null,ctx.store=null,controlContainer&&controlContainer.parentNode&&controlContainer.parentNode.removeChild(controlContainer),controlContainer=null,this},connect(){ctx.map.off("load",setup.connect),clearInterval(mapLoadedInterval),setup.addLayers(),ctx.store.storeMapConfig(),ctx.events.addEventListeners()},onAdd(map){if(ctx.map=map,ctx.events=function events(ctx){const modes=Object.keys(ctx.options.modes).reduce(((m,k)=>(m[k]=object_to_mode(ctx.options.modes[k]),m)),{});let mouseDownInfo={},touchStartInfo={};const events={};let currentModeName=null,currentMode=null;events.drag=function(event,isDrag){isDrag({point:event.point,time:(new Date).getTime()})?(ctx.ui.queueMapClasses({mouse:constants.cursors.DRAG}),currentMode.drag(event)):event.originalEvent.stopPropagation()},events.mousedrag=function(event){events.drag(event,(endInfo=>!isClick(mouseDownInfo,endInfo)))},events.touchdrag=function(event){events.drag(event,(endInfo=>!isTap(touchStartInfo,endInfo)))},events.mousemove=function(event){if(1===(void 0!==event.originalEvent.buttons?event.originalEvent.buttons:event.originalEvent.which))return events.mousedrag(event);const target=getFeatureAtAndSetCursors(event,ctx);event.featureTarget=target,currentMode.mousemove(event)},events.mousedown=function(event){mouseDownInfo={time:(new Date).getTime(),point:event.point};const target=getFeatureAtAndSetCursors(event,ctx);event.featureTarget=target,currentMode.mousedown(event)},events.mouseup=function(event){const target=getFeatureAtAndSetCursors(event,ctx);event.featureTarget=target,isClick(mouseDownInfo,{point:event.point,time:(new Date).getTime()})?currentMode.click(event):currentMode.mouseup(event)},events.mouseout=function(event){currentMode.mouseout(event)},events.touchstart=function(event){if(!ctx.options.touchEnabled)return;touchStartInfo={time:(new Date).getTime(),point:event.point};const target=features_at.touch(event,null,ctx)[0];event.featureTarget=target,currentMode.touchstart(event)},events.touchmove=function(event){if(ctx.options.touchEnabled)return currentMode.touchmove(event),events.touchdrag(event)},events.touchend=function(event){if(event.originalEvent.preventDefault(),!ctx.options.touchEnabled)return;const target=features_at.touch(event,null,ctx)[0];event.featureTarget=target,isTap(touchStartInfo,{time:(new Date).getTime(),point:event.point})?currentMode.tap(event):currentMode.touchend(event)};const isKeyModeValid=code=>!(8===code||46===code||code>=48&&code<=57);function changeMode(modename,nextModeOptions,eventOptions={}){currentMode.stop();const modebuilder=modes[modename];if(void 0===modebuilder)throw new Error(`${modename} is not valid`);currentModeName=modename;const mode=modebuilder(ctx,nextModeOptions);currentMode=mode_handler(mode,ctx),eventOptions.silent||ctx.map.fire(constants.events.MODE_CHANGE,{mode:modename}),ctx.store.setDirty(),ctx.store.render()}events.keydown=function(event){(event.srcElement||event.target).classList.contains(constants.classes.CANVAS)&&(8!==event.keyCode&&46!==event.keyCode||!ctx.options.controls.trash?isKeyModeValid(event.keyCode)?currentMode.keydown(event):49===event.keyCode&&ctx.options.controls.point?changeMode(constants.modes.DRAW_POINT):50===event.keyCode&&ctx.options.controls.line_string?changeMode(constants.modes.DRAW_LINE_STRING):51===event.keyCode&&ctx.options.controls.polygon&&changeMode(constants.modes.DRAW_POLYGON):(event.preventDefault(),currentMode.trash()))},events.keyup=function(event){isKeyModeValid(event.keyCode)&&currentMode.keyup(event)},events.zoomend=function(){ctx.store.changeZoom()},events.data=function(event){if("style"===event.dataType){const{setup,map,options,store}=ctx;options.styles.some((style=>map.getLayer(style.id)))||(setup.addLayers(),store.setDirty(),store.render())}};const actionState={trash:!1,combineFeatures:!1,uncombineFeatures:!1};return{start(){currentModeName=ctx.options.defaultMode,currentMode=mode_handler(modes[currentModeName](ctx),ctx)},changeMode,actionable:function actionable(actions){let changed=!1;Object.keys(actions).forEach((action=>{if(void 0===actionState[action])throw new Error("Invalid action type");actionState[action]!==actions[action]&&(changed=!0),actionState[action]=actions[action]})),changed&&ctx.map.fire(constants.events.ACTIONABLE,{actions:actionState})},currentModeName:()=>currentModeName,currentModeRender:(geojson,push)=>currentMode.render(geojson,push),fire(eventName,eventData){ctx.map&&ctx.map.fire(eventName,eventData)},addEventListeners(){ctx.map.on("mousemove",events.mousemove),ctx.map.on("mousedown",events.mousedown),ctx.map.on("mouseup",events.mouseup),ctx.map.on("data",events.data),ctx.map.on("touchmove",events.touchmove),ctx.map.on("touchstart",events.touchstart),ctx.map.on("touchend",events.touchend),ctx.container.addEventListener("mouseout",events.mouseout),ctx.options.keybindings&&(ctx.container.addEventListener("keydown",events.keydown),ctx.container.addEventListener("keyup",events.keyup))},removeEventListeners(){ctx.map.off("mousemove",events.mousemove),ctx.map.off("mousedown",events.mousedown),ctx.map.off("mouseup",events.mouseup),ctx.map.off("data",events.data),ctx.map.off("touchmove",events.touchmove),ctx.map.off("touchstart",events.touchstart),ctx.map.off("touchend",events.touchend),ctx.container.removeEventListener("mouseout",events.mouseout),ctx.options.keybindings&&(ctx.container.removeEventListener("keydown",events.keydown),ctx.container.removeEventListener("keyup",events.keyup))},trash(options){currentMode.trash(options)},combineFeatures(){currentMode.combineFeatures()},uncombineFeatures(){currentMode.uncombineFeatures()},getMode:()=>currentModeName}}(ctx),ctx.ui=function ui(ctx){const buttonElements={};let activeButton=null,currentMapClasses={mode:null,feature:null,mouse:null},nextMapClasses={mode:null,feature:null,mouse:null};function queueMapClasses(options){nextMapClasses=Object.assign(nextMapClasses,options)}function updateMapClasses(){if(!ctx.container)return;const classesToRemove=[],classesToAdd=[];classTypes.forEach((type=>{nextMapClasses[type]!==currentMapClasses[type]&&(classesToRemove.push(`${type}-${currentMapClasses[type]}`),null!==nextMapClasses[type]&&classesToAdd.push(`${type}-${nextMapClasses[type]}`))})),classesToRemove.length>0&&ctx.container.classList.remove(...classesToRemove),classesToAdd.length>0&&ctx.container.classList.add(...classesToAdd),currentMapClasses=Object.assign(currentMapClasses,nextMapClasses)}function createControlButton(id,options={}){const button=document.createElement("button");return button.className=`${constants.classes.CONTROL_BUTTON} ${options.className}`,button.setAttribute("title",options.title),options.container.appendChild(button),button.addEventListener("click",(e=>{if(e.preventDefault(),e.stopPropagation(),e.target===activeButton)return deactivateButtons(),void options.onDeactivate();setActiveButton(id),options.onActivate()}),!0),button}function deactivateButtons(){activeButton&&(activeButton.classList.remove(constants.classes.ACTIVE_BUTTON),activeButton=null)}function setActiveButton(id){deactivateButtons();const button=buttonElements[id];button&&button&&"trash"!==id&&(button.classList.add(constants.classes.ACTIVE_BUTTON),activeButton=button)}return{setActiveButton,queueMapClasses,updateMapClasses,clearMapClasses:function clearMapClasses(){queueMapClasses({mode:null,feature:null,mouse:null}),updateMapClasses()},addButtons:function addButtons(){const controls=ctx.options.controls,controlGroup=document.createElement("div");return controlGroup.className=`${constants.classes.CONTROL_GROUP} ${constants.classes.CONTROL_BASE}`,controls?(controls[constants.types.LINE]&&(buttonElements[constants.types.LINE]=createControlButton(constants.types.LINE,{container:controlGroup,className:constants.classes.CONTROL_BUTTON_LINE,title:"LineString tool "+(ctx.options.keybindings?"(l)":""),onActivate:()=>ctx.events.changeMode(constants.modes.DRAW_LINE_STRING),onDeactivate:()=>ctx.events.trash()})),controls[constants.types.POLYGON]&&(buttonElements[constants.types.POLYGON]=createControlButton(constants.types.POLYGON,{container:controlGroup,className:constants.classes.CONTROL_BUTTON_POLYGON,title:"Polygon tool "+(ctx.options.keybindings?"(p)":""),onActivate:()=>ctx.events.changeMode(constants.modes.DRAW_POLYGON),onDeactivate:()=>ctx.events.trash()})),controls[constants.types.POINT]&&(buttonElements[constants.types.POINT]=createControlButton(constants.types.POINT,{container:controlGroup,className:constants.classes.CONTROL_BUTTON_POINT,title:"Marker tool "+(ctx.options.keybindings?"(m)":""),onActivate:()=>ctx.events.changeMode(constants.modes.DRAW_POINT),onDeactivate:()=>ctx.events.trash()})),controls.trash&&(buttonElements.trash=createControlButton("trash",{container:controlGroup,className:constants.classes.CONTROL_BUTTON_TRASH,title:"Delete",onActivate:()=>{ctx.events.trash()}})),controls.combine_features&&(buttonElements.combine_features=createControlButton("combineFeatures",{container:controlGroup,className:constants.classes.CONTROL_BUTTON_COMBINE_FEATURES,title:"Combine",onActivate:()=>{ctx.events.combineFeatures()}})),controls.uncombine_features&&(buttonElements.uncombine_features=createControlButton("uncombineFeatures",{container:controlGroup,className:constants.classes.CONTROL_BUTTON_UNCOMBINE_FEATURES,title:"Uncombine",onActivate:()=>{ctx.events.uncombineFeatures()}})),controlGroup):controlGroup},removeButtons:function removeButtons(){Object.keys(buttonElements).forEach((buttonId=>{const button=buttonElements[buttonId];button.parentNode&&button.parentNode.removeChild(button),delete buttonElements[buttonId]}))}}}(ctx),ctx.container=map.getContainer(),ctx.store=new Store(ctx),controlContainer=ctx.ui.addButtons(),ctx.options.boxSelect){ctx.boxZoomInitial=map.boxZoom.isEnabled(),map.boxZoom.disable();const dragPanIsEnabled=map.dragPan.isEnabled();map.dragPan.disable(),map.dragPan.enable(),dragPanIsEnabled||map.dragPan.disable()}return map.loaded()?setup.connect():(map.on("load",setup.connect),mapLoadedInterval=setInterval((()=>{map.loaded()&&setup.connect()}),16)),ctx.events.start(),controlContainer},addLayers(){ctx.map.addSource(constants.sources.COLD,{data:{type:constants.geojsonTypes.FEATURE_COLLECTION,features:[]},type:"geojson"}),ctx.map.addSource(constants.sources.HOT,{data:{type:constants.geojsonTypes.FEATURE_COLLECTION,features:[]},type:"geojson"}),ctx.options.styles.forEach((style=>{ctx.map.addLayer(style)})),ctx.store.setDirty(!0),ctx.store.render()},removeLayers(){ctx.options.styles.forEach((style=>{ctx.map.getLayer(style.id)&&ctx.map.removeLayer(style.id)})),ctx.map.getSource(constants.sources.COLD)&&ctx.map.removeSource(constants.sources.COLD),ctx.map.getSource(constants.sources.HOT)&&ctx.map.removeSource(constants.sources.HOT)}};return ctx.setup=setup,setup}const theme=[{id:"gl-draw-polygon-fill",type:"fill",filter:["all",["==","$type","Polygon"]],paint:{"fill-color":["case",["==",["get","active"],"true"],"#fbb03b","#3bb2d0"],"fill-opacity":.1}},{id:"gl-draw-lines",type:"line",filter:["any",["==","$type","LineString"],["==","$type","Polygon"]],layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":["case",["==",["get","active"],"true"],"#fbb03b","#3bb2d0"],"line-dasharray":["case",["==",["get","active"],"true"],[.2,2],[2,0]],"line-width":2}},{id:"gl-draw-point-outer",type:"circle",filter:["all",["==","$type","Point"],["==","meta","feature"]],paint:{"circle-radius":["case",["==",["get","active"],"true"],7,5],"circle-color":"#fff"}},{id:"gl-draw-point-inner",type:"circle",filter:["all",["==","$type","Point"],["==","meta","feature"]],paint:{"circle-radius":["case",["==",["get","active"],"true"],5,3],"circle-color":["case",["==",["get","active"],"true"],"#fbb03b","#3bb2d0"]}},{id:"gl-draw-vertex-outer",type:"circle",filter:["all",["==","$type","Point"],["==","meta","vertex"],["!=","mode","simple_select"]],paint:{"circle-radius":["case",["==",["get","active"],"true"],7,5],"circle-color":"#fff"}},{id:"gl-draw-vertex-inner",type:"circle",filter:["all",["==","$type","Point"],["==","meta","vertex"],["!=","mode","simple_select"]],paint:{"circle-radius":["case",["==",["get","active"],"true"],5,3],"circle-color":"#fbb03b"}},{id:"gl-draw-midpoint",type:"circle",filter:["all",["==","meta","midpoint"]],paint:{"circle-radius":3,"circle-color":"#fbb03b"}}];var common_selectors=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/common_selectors.js");function point_geometry_Point(x,y){this.x=x,this.y=y}point_geometry_Point.prototype={clone(){return new point_geometry_Point(this.x,this.y)},add(p){return this.clone()._add(p)},sub(p){return this.clone()._sub(p)},multByPoint(p){return this.clone()._multByPoint(p)},divByPoint(p){return this.clone()._divByPoint(p)},mult(k){return this.clone()._mult(k)},div(k){return this.clone()._div(k)},rotate(a){return this.clone()._rotate(a)},rotateAround(a,p){return this.clone()._rotateAround(a,p)},matMult(m){return this.clone()._matMult(m)},unit(){return this.clone()._unit()},perp(){return this.clone()._perp()},round(){return this.clone()._round()},mag(){return Math.sqrt(this.x*this.x+this.y*this.y)},equals(other){return this.x===other.x&&this.y===other.y},dist(p){return Math.sqrt(this.distSqr(p))},distSqr(p){const dx=p.x-this.x,dy=p.y-this.y;return dx*dx+dy*dy},angle(){return Math.atan2(this.y,this.x)},angleTo(b){return Math.atan2(this.y-b.y,this.x-b.x)},angleWith(b){return this.angleWithSep(b.x,b.y)},angleWithSep(x,y){return Math.atan2(this.x*y-this.y*x,this.x*x+this.y*y)},_matMult(m){const x=m[0]*this.x+m[1]*this.y,y=m[2]*this.x+m[3]*this.y;return this.x=x,this.y=y,this},_add(p){return this.x+=p.x,this.y+=p.y,this},_sub(p){return this.x-=p.x,this.y-=p.y,this},_mult(k){return this.x*=k,this.y*=k,this},_div(k){return this.x/=k,this.y/=k,this},_multByPoint(p){return this.x*=p.x,this.y*=p.y,this},_divByPoint(p){return this.x/=p.x,this.y/=p.y,this},_unit(){return this._div(this.mag()),this},_perp(){const y=this.y;return this.y=this.x,this.x=-y,this},_rotate(angle){const cos=Math.cos(angle),sin=Math.sin(angle),x=cos*this.x-sin*this.y,y=sin*this.x+cos*this.y;return this.x=x,this.y=y,this},_rotateAround(angle,p){const cos=Math.cos(angle),sin=Math.sin(angle),x=p.x+cos*(this.x-p.x)-sin*(this.y-p.y),y=p.y+sin*(this.x-p.x)+cos*(this.y-p.y);return this.x=x,this.y=y,this},_round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},constructor:point_geometry_Point},point_geometry_Point.convert=function(p){if(p instanceof point_geometry_Point)return p;if(Array.isArray(p))return new point_geometry_Point(+p[0],+p[1]);if(void 0!==p.x&&void 0!==p.y)return new point_geometry_Point(+p.x,+p.y);throw new Error("Expected [x, y] or {x, y} point format")};const mouse_event_point=function mouseEventPoint(mouseEvent,container){const rect=container.getBoundingClientRect();return new point_geometry_Point(mouseEvent.clientX-rect.left-(container.clientLeft||0),mouseEvent.clientY-rect.top-(container.clientTop||0))};var create_supplementary_points=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/create_supplementary_points.js"),double_click_zoom=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/double_click_zoom.js"),move_features=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/move_features.js");const SimpleSelect={onSetup:function(opts){const state={dragMoveLocation:null,boxSelectStartLocation:null,boxSelectElement:void 0,boxSelecting:!1,canBoxSelect:!1,dragMoving:!1,canDragMove:!1,initialDragPanState:this.map.dragPan.isEnabled(),initiallySelectedFeatureIds:opts.featureIds||[]};return this.setSelected(state.initiallySelectedFeatureIds.filter((id=>void 0!==this.getFeature(id)))),this.fireActionable(),this.setActionableState({combineFeatures:!0,uncombineFeatures:!0,trash:!0}),state},fireUpdate:function(){this.fire(constants.events.UPDATE,{action:constants.updateActions.MOVE,features:this.getSelected().map((f=>f.toGeoJSON()))})},fireActionable:function(){const selectedFeatures=this.getSelected(),multiFeatures=selectedFeatures.filter((feature=>this.isInstanceOf("MultiFeature",feature)));let combineFeatures=!1;if(selectedFeatures.length>1){combineFeatures=!0;const featureType=selectedFeatures[0].type.replace("Multi","");selectedFeatures.forEach((feature=>{feature.type.replace("Multi","")!==featureType&&(combineFeatures=!1)}))}const uncombineFeatures=multiFeatures.length>0,trash=selectedFeatures.length>0;this.setActionableState({combineFeatures,uncombineFeatures,trash})},getUniqueIds:function(allFeatures){if(!allFeatures.length)return[];return allFeatures.map((s=>s.properties.id)).filter((id=>void 0!==id)).reduce(((memo,id)=>(memo.add(id),memo)),new string_set).values()},stopExtendedInteractions:function(state){state.boxSelectElement&&(state.boxSelectElement.parentNode&&state.boxSelectElement.parentNode.removeChild(state.boxSelectElement),state.boxSelectElement=null),(state.canDragMove||state.canBoxSelect)&&!0===state.initialDragPanState&&this.map.dragPan.enable(),state.boxSelecting=!1,state.canBoxSelect=!1,state.dragMoving=!1,state.canDragMove=!1},onStop:function(){double_click_zoom.A.enable(this)},onMouseMove:function(state,e){return common_selectors.isFeature(e)&&state.dragMoving&&this.fireUpdate(),this.stopExtendedInteractions(state),!0},onMouseOut:function(state){return!state.dragMoving||this.fireUpdate()}};SimpleSelect.onTap=SimpleSelect.onClick=function(state,e){return common_selectors.noTarget(e)?this.clickAnywhere(state,e):common_selectors.isOfMetaType(constants.meta.VERTEX)(e)?this.clickOnVertex(state,e):common_selectors.isFeature(e)?this.clickOnFeature(state,e):void 0},SimpleSelect.clickAnywhere=function(state){const wasSelected=this.getSelectedIds();wasSelected.length&&(this.clearSelectedFeatures(),wasSelected.forEach((id=>this.doRender(id)))),double_click_zoom.A.enable(this),this.stopExtendedInteractions(state)},SimpleSelect.clickOnVertex=function(state,e){this.changeMode(constants.modes.DIRECT_SELECT,{featureId:e.featureTarget.properties.parent,coordPath:e.featureTarget.properties.coord_path,startPos:e.lngLat}),this.updateUIClasses({mouse:constants.cursors.MOVE})},SimpleSelect.startOnActiveFeature=function(state,e){this.stopExtendedInteractions(state),this.map.dragPan.disable(),this.doRender(e.featureTarget.properties.id),state.canDragMove=!0,state.dragMoveLocation=e.lngLat},SimpleSelect.clickOnFeature=function(state,e){double_click_zoom.A.disable(this),this.stopExtendedInteractions(state);const isShiftClick=common_selectors.isShiftDown(e),selectedFeatureIds=this.getSelectedIds(),featureId=e.featureTarget.properties.id,isFeatureSelected=this.isSelected(featureId);if(!isShiftClick&&isFeatureSelected&&this.getFeature(featureId).type!==constants.geojsonTypes.POINT)return this.changeMode(constants.modes.DIRECT_SELECT,{featureId});isFeatureSelected&&isShiftClick?(this.deselect(featureId),this.updateUIClasses({mouse:constants.cursors.POINTER}),1===selectedFeatureIds.length&&double_click_zoom.A.enable(this)):!isFeatureSelected&&isShiftClick?(this.select(featureId),this.updateUIClasses({mouse:constants.cursors.MOVE})):isFeatureSelected||isShiftClick||(selectedFeatureIds.forEach((id=>this.doRender(id))),this.setSelected(featureId),this.updateUIClasses({mouse:constants.cursors.MOVE})),this.doRender(featureId)},SimpleSelect.onMouseDown=function(state,e){return state.initialDragPanState=this.map.dragPan.isEnabled(),common_selectors.isActiveFeature(e)?this.startOnActiveFeature(state,e):this.drawConfig.boxSelect&&common_selectors.isShiftMousedown(e)?this.startBoxSelect(state,e):void 0},SimpleSelect.startBoxSelect=function(state,e){this.stopExtendedInteractions(state),this.map.dragPan.disable(),state.boxSelectStartLocation=mouse_event_point(e.originalEvent,this.map.getContainer()),state.canBoxSelect=!0},SimpleSelect.onTouchStart=function(state,e){if(common_selectors.isActiveFeature(e))return this.startOnActiveFeature(state,e)},SimpleSelect.onDrag=function(state,e){return state.canDragMove?this.dragMove(state,e):this.drawConfig.boxSelect&&state.canBoxSelect?this.whileBoxSelect(state,e):void 0},SimpleSelect.whileBoxSelect=function(state,e){state.boxSelecting=!0,this.updateUIClasses({mouse:constants.cursors.ADD}),state.boxSelectElement||(state.boxSelectElement=document.createElement("div"),state.boxSelectElement.classList.add(constants.classes.BOX_SELECT),this.map.getContainer().appendChild(state.boxSelectElement));const current=mouse_event_point(e.originalEvent,this.map.getContainer()),minX=Math.min(state.boxSelectStartLocation.x,current.x),maxX=Math.max(state.boxSelectStartLocation.x,current.x),minY=Math.min(state.boxSelectStartLocation.y,current.y),maxY=Math.max(state.boxSelectStartLocation.y,current.y),translateValue=`translate(${minX}px, ${minY}px)`;state.boxSelectElement.style.transform=translateValue,state.boxSelectElement.style.WebkitTransform=translateValue,state.boxSelectElement.style.width=maxX-minX+"px",state.boxSelectElement.style.height=maxY-minY+"px"},SimpleSelect.dragMove=function(state,e){state.dragMoving=!0,e.originalEvent.stopPropagation();const delta={lng:e.lngLat.lng-state.dragMoveLocation.lng,lat:e.lngLat.lat-state.dragMoveLocation.lat};(0,move_features.A)(this.getSelected(),delta),state.dragMoveLocation=e.lngLat},SimpleSelect.onTouchEnd=SimpleSelect.onMouseUp=function(state,e){if(state.dragMoving)this.fireUpdate();else if(state.boxSelecting){const bbox=[state.boxSelectStartLocation,mouse_event_point(e.originalEvent,this.map.getContainer())],featuresInBox=this.featuresAt(null,bbox,"click"),idsToSelect=this.getUniqueIds(featuresInBox).filter((id=>!this.isSelected(id)));idsToSelect.length&&(this.select(idsToSelect),idsToSelect.forEach((id=>this.doRender(id))),this.updateUIClasses({mouse:constants.cursors.MOVE}))}this.stopExtendedInteractions(state)},SimpleSelect.toDisplayFeatures=function(state,geojson,display){geojson.properties.active=this.isSelected(geojson.properties.id)?constants.activeStates.ACTIVE:constants.activeStates.INACTIVE,display(geojson),this.fireActionable(),geojson.properties.active===constants.activeStates.ACTIVE&&geojson.geometry.type!==constants.geojsonTypes.POINT&&(0,create_supplementary_points.A)(geojson).forEach(display)},SimpleSelect.onTrash=function(){this.deleteFeature(this.getSelectedIds()),this.fireActionable()},SimpleSelect.onCombineFeatures=function(){const selectedFeatures=this.getSelected();if(0===selectedFeatures.length||selectedFeatures.length<2)return;const coordinates=[],featuresCombined=[],featureType=selectedFeatures[0].type.replace("Multi","");for(let i=0;i<selectedFeatures.length;i++){const feature=selectedFeatures[i];if(feature.type.replace("Multi","")!==featureType)return;feature.type.includes("Multi")?feature.getCoordinates().forEach((subcoords=>{coordinates.push(subcoords)})):coordinates.push(feature.getCoordinates()),featuresCombined.push(feature.toGeoJSON())}if(featuresCombined.length>1){const multiFeature=this.newFeature({type:constants.geojsonTypes.FEATURE,properties:featuresCombined[0].properties,geometry:{type:`Multi${featureType}`,coordinates}});this.addFeature(multiFeature),this.deleteFeature(this.getSelectedIds(),{silent:!0}),this.setSelected([multiFeature.id]),this.fire(constants.events.COMBINE_FEATURES,{createdFeatures:[multiFeature.toGeoJSON()],deletedFeatures:featuresCombined})}this.fireActionable()},SimpleSelect.onUncombineFeatures=function(){const selectedFeatures=this.getSelected();if(0===selectedFeatures.length)return;const createdFeatures=[],featuresUncombined=[];for(let i=0;i<selectedFeatures.length;i++){const feature=selectedFeatures[i];this.isInstanceOf("MultiFeature",feature)&&(feature.getFeatures().forEach((subFeature=>{this.addFeature(subFeature),subFeature.properties=feature.properties,createdFeatures.push(subFeature.toGeoJSON()),this.select([subFeature.id])})),this.deleteFeature(feature.id,{silent:!0}),featuresUncombined.push(feature.toGeoJSON()))}createdFeatures.length>1&&this.fire(constants.events.UNCOMBINE_FEATURES,{createdFeatures,deletedFeatures:featuresUncombined}),this.fireActionable()};const simple_select=SimpleSelect;var direct_select=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/modes/direct_select.js");const DrawPoint={onSetup:function(){const point=this.newFeature({type:constants.geojsonTypes.FEATURE,properties:{},geometry:{type:constants.geojsonTypes.POINT,coordinates:[]}});return this.addFeature(point),this.clearSelectedFeatures(),this.updateUIClasses({mouse:constants.cursors.ADD}),this.activateUIButton(constants.types.POINT),this.setActionableState({trash:!0}),{point}},stopDrawingAndRemove:function(state){this.deleteFeature([state.point.id],{silent:!0}),this.changeMode(constants.modes.SIMPLE_SELECT)}};DrawPoint.onTap=DrawPoint.onClick=function(state,e){this.updateUIClasses({mouse:constants.cursors.MOVE}),state.point.updateCoordinate("",e.lngLat.lng,e.lngLat.lat),this.fire(constants.events.CREATE,{features:[state.point.toGeoJSON()]}),this.changeMode(constants.modes.SIMPLE_SELECT,{featureIds:[state.point.id]})},DrawPoint.onStop=function(state){this.activateUIButton(),state.point.getCoordinate().length||this.deleteFeature([state.point.id],{silent:!0})},DrawPoint.toDisplayFeatures=function(state,geojson,display){const isActivePoint=geojson.properties.id===state.point.id;if(geojson.properties.active=isActivePoint?constants.activeStates.ACTIVE:constants.activeStates.INACTIVE,!isActivePoint)return display(geojson)},DrawPoint.onTrash=DrawPoint.stopDrawingAndRemove,DrawPoint.onKeyUp=function(state,e){if(common_selectors.isEscapeKey(e)||common_selectors.isEnterKey(e))return this.stopDrawingAndRemove(state,e)};const draw_point=DrawPoint;var draw_polygon=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/modes/draw_polygon.js"),is_event_at_coordinates=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/is_event_at_coordinates.js"),create_vertex=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/create_vertex.js");const DrawLineString={onSetup:function(opts){const featureId=(opts=opts||{}).featureId;let line,currentVertexPosition,direction="forward";if(featureId){if(line=this.getFeature(featureId),!line)throw new Error("Could not find a feature with the provided featureId");let from=opts.from;if(from&&"Feature"===from.type&&from.geometry&&"Point"===from.geometry.type&&(from=from.geometry),from&&"Point"===from.type&&from.coordinates&&2===from.coordinates.length&&(from=from.coordinates),!from||!Array.isArray(from))throw new Error("Please use the `from` property to indicate which point to continue the line from");const lastCoord=line.coordinates.length-1;if(line.coordinates[lastCoord][0]===from[0]&&line.coordinates[lastCoord][1]===from[1])currentVertexPosition=lastCoord+1,line.addCoordinate(currentVertexPosition,...line.coordinates[lastCoord]);else{if(line.coordinates[0][0]!==from[0]||line.coordinates[0][1]!==from[1])throw new Error("`from` should match the point at either the start or the end of the provided LineString");direction="backwards",currentVertexPosition=0,line.addCoordinate(currentVertexPosition,...line.coordinates[0])}}else line=this.newFeature({type:constants.geojsonTypes.FEATURE,properties:{},geometry:{type:constants.geojsonTypes.LINE_STRING,coordinates:[]}}),currentVertexPosition=0,this.addFeature(line);return this.clearSelectedFeatures(),double_click_zoom.A.disable(this),this.updateUIClasses({mouse:constants.cursors.ADD}),this.activateUIButton(constants.types.LINE),this.setActionableState({trash:!0}),{line,currentVertexPosition,direction}},clickAnywhere:function(state,e){if(state.currentVertexPosition>0&&(0,is_event_at_coordinates.A)(e,state.line.coordinates[state.currentVertexPosition-1])||"backwards"===state.direction&&(0,is_event_at_coordinates.A)(e,state.line.coordinates[state.currentVertexPosition+1]))return this.changeMode(constants.modes.SIMPLE_SELECT,{featureIds:[state.line.id]});this.updateUIClasses({mouse:constants.cursors.ADD}),state.line.updateCoordinate(state.currentVertexPosition,e.lngLat.lng,e.lngLat.lat),"forward"===state.direction?(state.currentVertexPosition++,state.line.updateCoordinate(state.currentVertexPosition,e.lngLat.lng,e.lngLat.lat)):state.line.addCoordinate(0,e.lngLat.lng,e.lngLat.lat)},clickOnVertex:function(state){return this.changeMode(constants.modes.SIMPLE_SELECT,{featureIds:[state.line.id]})},onMouseMove:function(state,e){state.line.updateCoordinate(state.currentVertexPosition,e.lngLat.lng,e.lngLat.lat),common_selectors.isVertex(e)&&this.updateUIClasses({mouse:constants.cursors.POINTER})}};DrawLineString.onTap=DrawLineString.onClick=function(state,e){if(common_selectors.isVertex(e))return this.clickOnVertex(state,e);this.clickAnywhere(state,e)},DrawLineString.onKeyUp=function(state,e){common_selectors.isEnterKey(e)?this.changeMode(constants.modes.SIMPLE_SELECT,{featureIds:[state.line.id]}):common_selectors.isEscapeKey(e)&&(this.deleteFeature([state.line.id],{silent:!0}),this.changeMode(constants.modes.SIMPLE_SELECT))},DrawLineString.onStop=function(state){double_click_zoom.A.enable(this),this.activateUIButton(),void 0!==this.getFeature(state.line.id)&&(state.line.removeCoordinate(`${state.currentVertexPosition}`),state.line.isValid()?this.fire(constants.events.CREATE,{features:[state.line.toGeoJSON()]}):(this.deleteFeature([state.line.id],{silent:!0}),this.changeMode(constants.modes.SIMPLE_SELECT,{},{silent:!0})))},DrawLineString.onTrash=function(state){this.deleteFeature([state.line.id],{silent:!0}),this.changeMode(constants.modes.SIMPLE_SELECT)},DrawLineString.toDisplayFeatures=function(state,geojson,display){const isActiveLine=geojson.properties.id===state.line.id;if(geojson.properties.active=isActiveLine?constants.activeStates.ACTIVE:constants.activeStates.INACTIVE,!isActiveLine)return display(geojson);geojson.geometry.coordinates.length<2||(geojson.properties.meta=constants.meta.FEATURE,display((0,create_vertex.A)(state.line.id,geojson.geometry.coordinates["forward"===state.direction?geojson.geometry.coordinates.length-2:1],""+("forward"===state.direction?geojson.geometry.coordinates.length-2:1),!1)),display(geojson))};const draw_line_string=DrawLineString,modes={simple_select,direct_select:direct_select.A,draw_point,draw_polygon:draw_polygon.A,draw_line_string},defaultOptions={defaultMode:constants.modes.SIMPLE_SELECT,keybindings:!0,touchEnabled:!0,clickBuffer:2,touchBuffer:25,boxSelect:!0,displayControlsDefault:!0,styles:theme,modes,controls:{},userProperties:!1,suppressAPIEvents:!0},showControls={point:!0,line_string:!0,polygon:!0,trash:!0,combine_features:!0,uncombine_features:!0},hideControls={point:!1,line_string:!1,polygon:!1,trash:!1,combine_features:!1,uncombine_features:!1};function addSources(styles,sourceBucket){return styles.map((style=>style.source?style:Object.assign({},style,{id:`${style.id}.${sourceBucket}`,source:"hot"===sourceBucket?constants.sources.HOT:constants.sources.COLD})))}var fast_deep_equal=__webpack_require__("./node_modules/fast-deep-equal/index.js"),fast_deep_equal_default=__webpack_require__.n(fast_deep_equal),geojson_normalize=__webpack_require__("./node_modules/@mapbox/geojson-normalize/index.js"),geojson_normalize_default=__webpack_require__.n(geojson_normalize);function string_sets_are_equal(a,b){return a.length===b.length&&JSON.stringify(a.map((id=>id)).sort())===JSON.stringify(b.map((id=>id)).sort())}const featureTypes={Polygon:polygon,LineString:line_string,Point:point,MultiPolygon:multi_feature,MultiLineString:multi_feature,MultiPoint:multi_feature};var constrain_feature_movement=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/constrain_feature_movement.js"),create_midpoint=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/create_midpoint.js");const setupDraw=function(options,api){const ctx={options:options=function src_options(options={}){let withDefaults=Object.assign({},options);return options.controls||(withDefaults.controls={}),!1===options.displayControlsDefault?withDefaults.controls=Object.assign({},hideControls,options.controls):withDefaults.controls=Object.assign({},showControls,options.controls),withDefaults=Object.assign({},defaultOptions,withDefaults),withDefaults.styles=addSources(withDefaults.styles,"cold").concat(addSources(withDefaults.styles,"hot")),withDefaults}(options)};api=function src_api(ctx,api){api.modes=constants.modes;const silent=void 0===ctx.options.suppressAPIEvents||!!ctx.options.suppressAPIEvents;return api.getFeatureIdsAt=function(point){return features_at.click({point},null,ctx).map((feature=>feature.properties.id))},api.getSelectedIds=function(){return ctx.store.getSelectedIds()},api.getSelected=function(){return{type:constants.geojsonTypes.FEATURE_COLLECTION,features:ctx.store.getSelectedIds().map((id=>ctx.store.get(id))).map((feature=>feature.toGeoJSON()))}},api.getSelectedPoints=function(){return{type:constants.geojsonTypes.FEATURE_COLLECTION,features:ctx.store.getSelectedCoordinates().map((coordinate=>({type:constants.geojsonTypes.FEATURE,properties:{},geometry:{type:constants.geojsonTypes.POINT,coordinates:coordinate.coordinates}})))}},api.set=function(featureCollection){if(void 0===featureCollection.type||featureCollection.type!==constants.geojsonTypes.FEATURE_COLLECTION||!Array.isArray(featureCollection.features))throw new Error("Invalid FeatureCollection");const renderBatch=ctx.store.createRenderBatch();let toDelete=ctx.store.getAllIds().slice();const newIds=api.add(featureCollection),newIdsLookup=new string_set(newIds);return toDelete=toDelete.filter((id=>!newIdsLookup.has(id))),toDelete.length&&api.delete(toDelete),renderBatch(),newIds},api.add=function(geojson){const ids=JSON.parse(JSON.stringify(geojson_normalize_default()(geojson))).features.map((feature=>{if(feature.id=feature.id||generateID(),null===feature.geometry)throw new Error("Invalid geometry: null");if(void 0===ctx.store.get(feature.id)||ctx.store.get(feature.id).type!==feature.geometry.type){const Model=featureTypes[feature.geometry.type];if(void 0===Model)throw new Error(`Invalid geometry type: ${feature.geometry.type}.`);const internalFeature=new Model(ctx,feature);ctx.store.add(internalFeature,{silent})}else{const internalFeature=ctx.store.get(feature.id),originalProperties=internalFeature.properties;internalFeature.properties=feature.properties,fast_deep_equal_default()(originalProperties,feature.properties)||ctx.store.featureChanged(internalFeature.id,{silent}),fast_deep_equal_default()(internalFeature.getCoordinates(),feature.geometry.coordinates)||internalFeature.incomingCoords(feature.geometry.coordinates)}return feature.id}));return ctx.store.render(),ids},api.get=function(id){const feature=ctx.store.get(id);if(feature)return feature.toGeoJSON()},api.getAll=function(){return{type:constants.geojsonTypes.FEATURE_COLLECTION,features:ctx.store.getAll().map((feature=>feature.toGeoJSON()))}},api.delete=function(featureIds){return ctx.store.delete(featureIds,{silent}),api.getMode()!==constants.modes.DIRECT_SELECT||ctx.store.getSelectedIds().length?ctx.store.render():ctx.events.changeMode(constants.modes.SIMPLE_SELECT,void 0,{silent}),api},api.deleteAll=function(){return ctx.store.delete(ctx.store.getAllIds(),{silent}),api.getMode()===constants.modes.DIRECT_SELECT?ctx.events.changeMode(constants.modes.SIMPLE_SELECT,void 0,{silent}):ctx.store.render(),api},api.changeMode=function(mode,modeOptions={}){return mode===constants.modes.SIMPLE_SELECT&&api.getMode()===constants.modes.SIMPLE_SELECT?(string_sets_are_equal(modeOptions.featureIds||[],ctx.store.getSelectedIds())||(ctx.store.setSelected(modeOptions.featureIds,{silent}),ctx.store.render()),api):(mode===constants.modes.DIRECT_SELECT&&api.getMode()===constants.modes.DIRECT_SELECT&&modeOptions.featureId===ctx.store.getSelectedIds()[0]||ctx.events.changeMode(mode,modeOptions,{silent}),api)},api.getMode=function(){return ctx.events.getMode()},api.trash=function(){return ctx.events.trash({silent}),api},api.combineFeatures=function(){return ctx.events.combineFeatures({silent}),api},api.uncombineFeatures=function(){return ctx.events.uncombineFeatures({silent}),api},api.setFeatureProperty=function(featureId,property,value){return ctx.store.setFeatureProperty(featureId,property,value,{silent}),api},api}(ctx,api),ctx.api=api;const setup=src_setup(ctx);return api.onAdd=setup.onAdd,api.onRemove=setup.onRemove,api.types=constants.types,api.options=options,api};function MapboxDraw(options){setupDraw(options,this)}MapboxDraw.modes=modes,MapboxDraw.constants=constants,MapboxDraw.lib=lib_namespaceObject;const mapbox_gl_draw=MapboxDraw},"./node_modules/@mapbox/mapbox-gl-draw/src/constants.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{LAT_MAX:()=>LAT_MAX,LAT_MIN:()=>LAT_MIN,LAT_RENDERED_MAX:()=>LAT_RENDERED_MAX,LAT_RENDERED_MIN:()=>LAT_RENDERED_MIN,LNG_MAX:()=>LNG_MAX,LNG_MIN:()=>LNG_MIN,activeStates:()=>activeStates,classes:()=>classes,cursors:()=>cursors,events:()=>events,geojsonTypes:()=>geojsonTypes,interactions:()=>interactions,meta:()=>meta,modes:()=>modes,sources:()=>sources,types:()=>types,updateActions:()=>updateActions});const classes={CANVAS:"mapboxgl-canvas",CONTROL_BASE:"mapboxgl-ctrl",CONTROL_PREFIX:"mapboxgl-ctrl-",CONTROL_BUTTON:"mapbox-gl-draw_ctrl-draw-btn",CONTROL_BUTTON_LINE:"mapbox-gl-draw_line",CONTROL_BUTTON_POLYGON:"mapbox-gl-draw_polygon",CONTROL_BUTTON_POINT:"mapbox-gl-draw_point",CONTROL_BUTTON_TRASH:"mapbox-gl-draw_trash",CONTROL_BUTTON_COMBINE_FEATURES:"mapbox-gl-draw_combine",CONTROL_BUTTON_UNCOMBINE_FEATURES:"mapbox-gl-draw_uncombine",CONTROL_GROUP:"mapboxgl-ctrl-group",ATTRIBUTION:"mapboxgl-ctrl-attrib",ACTIVE_BUTTON:"active",BOX_SELECT:"mapbox-gl-draw_boxselect"},sources={HOT:"mapbox-gl-draw-hot",COLD:"mapbox-gl-draw-cold"},cursors={ADD:"add",MOVE:"move",DRAG:"drag",POINTER:"pointer",NONE:"none"},types={POLYGON:"polygon",LINE:"line_string",POINT:"point"},geojsonTypes={FEATURE:"Feature",POLYGON:"Polygon",LINE_STRING:"LineString",POINT:"Point",FEATURE_COLLECTION:"FeatureCollection",MULTI_PREFIX:"Multi",MULTI_POINT:"MultiPoint",MULTI_LINE_STRING:"MultiLineString",MULTI_POLYGON:"MultiPolygon"},modes={DRAW_LINE_STRING:"draw_line_string",DRAW_POLYGON:"draw_polygon",DRAW_POINT:"draw_point",SIMPLE_SELECT:"simple_select",DIRECT_SELECT:"direct_select"},events={CREATE:"draw.create",DELETE:"draw.delete",UPDATE:"draw.update",SELECTION_CHANGE:"draw.selectionchange",MODE_CHANGE:"draw.modechange",ACTIONABLE:"draw.actionable",RENDER:"draw.render",COMBINE_FEATURES:"draw.combine",UNCOMBINE_FEATURES:"draw.uncombine"},updateActions={MOVE:"move",CHANGE_PROPERTIES:"change_properties",CHANGE_COORDINATES:"change_coordinates"},meta={FEATURE:"feature",MIDPOINT:"midpoint",VERTEX:"vertex"},activeStates={ACTIVE:"true",INACTIVE:"false"},interactions=["scrollZoom","boxZoom","dragRotate","dragPan","keyboard","doubleClickZoom","touchZoomRotate"],LAT_MIN=-90,LAT_RENDERED_MIN=-85,LAT_MAX=90,LAT_RENDERED_MAX=85,LNG_MIN=-270,LNG_MAX=270},"./node_modules/@mapbox/mapbox-gl-draw/src/lib/common_selectors.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{isActiveFeature:()=>isActiveFeature,isEnterKey:()=>isEnterKey,isEscapeKey:()=>isEscapeKey,isFeature:()=>isFeature,isInactiveFeature:()=>isInactiveFeature,isOfMetaType:()=>isOfMetaType,isShiftDown:()=>isShiftDown,isShiftMousedown:()=>isShiftMousedown,isTrue:()=>isTrue,isVertex:()=>isVertex,noTarget:()=>noTarget});var _constants_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/constants.js");function isOfMetaType(type){return function(e){const featureTarget=e.featureTarget;return!!featureTarget&&(!!featureTarget.properties&&featureTarget.properties.meta===type)}}function isShiftMousedown(e){return!!e.originalEvent&&(!!e.originalEvent.shiftKey&&0===e.originalEvent.button)}function isActiveFeature(e){return!!e.featureTarget&&(!!e.featureTarget.properties&&(e.featureTarget.properties.active===_constants_js__WEBPACK_IMPORTED_MODULE_0__.activeStates.ACTIVE&&e.featureTarget.properties.meta===_constants_js__WEBPACK_IMPORTED_MODULE_0__.meta.FEATURE))}function isInactiveFeature(e){return!!e.featureTarget&&(!!e.featureTarget.properties&&(e.featureTarget.properties.active===_constants_js__WEBPACK_IMPORTED_MODULE_0__.activeStates.INACTIVE&&e.featureTarget.properties.meta===_constants_js__WEBPACK_IMPORTED_MODULE_0__.meta.FEATURE))}function noTarget(e){return void 0===e.featureTarget}function isFeature(e){return!!e.featureTarget&&(!!e.featureTarget.properties&&e.featureTarget.properties.meta===_constants_js__WEBPACK_IMPORTED_MODULE_0__.meta.FEATURE)}function isVertex(e){const featureTarget=e.featureTarget;return!!featureTarget&&(!!featureTarget.properties&&featureTarget.properties.meta===_constants_js__WEBPACK_IMPORTED_MODULE_0__.meta.VERTEX)}function isShiftDown(e){return!!e.originalEvent&&!0===e.originalEvent.shiftKey}function isEscapeKey(e){return 27===e.keyCode}function isEnterKey(e){return 13===e.keyCode}function isTrue(){return!0}},"./node_modules/@mapbox/mapbox-gl-draw/src/lib/constrain_feature_movement.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _constants_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/constants.js");const{LAT_MIN,LAT_MAX,LAT_RENDERED_MIN,LAT_RENDERED_MAX,LNG_MIN,LNG_MAX}=_constants_js__WEBPACK_IMPORTED_MODULE_0__;function __WEBPACK_DEFAULT_EXPORT__(geojsonFeatures,delta){let northInnerEdge=LAT_MIN,southInnerEdge=LAT_MAX,northOuterEdge=LAT_MIN,southOuterEdge=LAT_MAX,westEdge=LNG_MAX,eastEdge=LNG_MIN;geojsonFeatures.forEach((feature=>{const bounds=function extent(feature){const depth={Point:0,LineString:1,Polygon:2,MultiPoint:1,MultiLineString:2,MultiPolygon:3}[feature.geometry.type],coords=[feature.geometry.coordinates].flat(depth),lngs=coords.map((coord=>coord[0])),lats=coords.map((coord=>coord[1])),min=vals=>Math.min.apply(null,vals),max=vals=>Math.max.apply(null,vals);return[min(lngs),min(lats),max(lngs),max(lats)]}(feature),featureSouthEdge=bounds[1],featureNorthEdge=bounds[3],featureWestEdge=bounds[0],featureEastEdge=bounds[2];featureSouthEdge>northInnerEdge&&(northInnerEdge=featureSouthEdge),featureNorthEdge<southInnerEdge&&(southInnerEdge=featureNorthEdge),featureNorthEdge>northOuterEdge&&(northOuterEdge=featureNorthEdge),featureSouthEdge<southOuterEdge&&(southOuterEdge=featureSouthEdge),featureWestEdge<westEdge&&(westEdge=featureWestEdge),featureEastEdge>eastEdge&&(eastEdge=featureEastEdge)}));const constrainedDelta=delta;return northInnerEdge+constrainedDelta.lat>LAT_RENDERED_MAX&&(constrainedDelta.lat=LAT_RENDERED_MAX-northInnerEdge),northOuterEdge+constrainedDelta.lat>LAT_MAX&&(constrainedDelta.lat=LAT_MAX-northOuterEdge),southInnerEdge+constrainedDelta.lat<LAT_RENDERED_MIN&&(constrainedDelta.lat=LAT_RENDERED_MIN-southInnerEdge),southOuterEdge+constrainedDelta.lat<LAT_MIN&&(constrainedDelta.lat=LAT_MIN-southOuterEdge),westEdge+constrainedDelta.lng<=LNG_MIN&&(constrainedDelta.lng+=360*Math.ceil(Math.abs(constrainedDelta.lng)/360)),eastEdge+constrainedDelta.lng>=LNG_MAX&&(constrainedDelta.lng-=360*Math.ceil(Math.abs(constrainedDelta.lng)/360)),constrainedDelta}},"./node_modules/@mapbox/mapbox-gl-draw/src/lib/create_midpoint.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _constants_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/constants.js");function __WEBPACK_DEFAULT_EXPORT__(parent,startVertex,endVertex){const startCoord=startVertex.geometry.coordinates,endCoord=endVertex.geometry.coordinates;if(startCoord[1]>_constants_js__WEBPACK_IMPORTED_MODULE_0__.LAT_RENDERED_MAX||startCoord[1]<_constants_js__WEBPACK_IMPORTED_MODULE_0__.LAT_RENDERED_MIN||endCoord[1]>_constants_js__WEBPACK_IMPORTED_MODULE_0__.LAT_RENDERED_MAX||endCoord[1]<_constants_js__WEBPACK_IMPORTED_MODULE_0__.LAT_RENDERED_MIN)return null;const mid={lng:(startCoord[0]+endCoord[0])/2,lat:(startCoord[1]+endCoord[1])/2};return{type:_constants_js__WEBPACK_IMPORTED_MODULE_0__.geojsonTypes.FEATURE,properties:{meta:_constants_js__WEBPACK_IMPORTED_MODULE_0__.meta.MIDPOINT,parent,lng:mid.lng,lat:mid.lat,coord_path:endVertex.properties.coord_path},geometry:{type:_constants_js__WEBPACK_IMPORTED_MODULE_0__.geojsonTypes.POINT,coordinates:[mid.lng,mid.lat]}}}},"./node_modules/@mapbox/mapbox-gl-draw/src/lib/create_supplementary_points.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _create_vertex_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/create_vertex.js"),_create_midpoint_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/create_midpoint.js"),_constants_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/constants.js");const __WEBPACK_DEFAULT_EXPORT__=function createSupplementaryPoints(geojson,options={},basePath=null){const{type,coordinates}=geojson.geometry,featureId=geojson.properties&&geojson.properties.id;let supplementaryPoints=[];function processLine(line,lineBasePath){let firstPointString="",lastVertex=null;line.forEach(((point,pointIndex)=>{const pointPath=null!=lineBasePath?`${lineBasePath}.${pointIndex}`:String(pointIndex),vertex=(0,_create_vertex_js__WEBPACK_IMPORTED_MODULE_0__.A)(featureId,point,pointPath,isSelectedPath(pointPath));if(options.midpoints&&lastVertex){const midpoint=(0,_create_midpoint_js__WEBPACK_IMPORTED_MODULE_1__.A)(featureId,lastVertex,vertex);midpoint&&supplementaryPoints.push(midpoint)}lastVertex=vertex;const stringifiedPoint=JSON.stringify(point);firstPointString!==stringifiedPoint&&supplementaryPoints.push(vertex),0===pointIndex&&(firstPointString=stringifiedPoint)}))}function isSelectedPath(path){return!!options.selectedPaths&&-1!==options.selectedPaths.indexOf(path)}return type===_constants_js__WEBPACK_IMPORTED_MODULE_2__.geojsonTypes.POINT?supplementaryPoints.push((0,_create_vertex_js__WEBPACK_IMPORTED_MODULE_0__.A)(featureId,coordinates,basePath,isSelectedPath(basePath))):type===_constants_js__WEBPACK_IMPORTED_MODULE_2__.geojsonTypes.POLYGON?coordinates.forEach(((line,lineIndex)=>{processLine(line,null!==basePath?`${basePath}.${lineIndex}`:String(lineIndex))})):type===_constants_js__WEBPACK_IMPORTED_MODULE_2__.geojsonTypes.LINE_STRING?processLine(coordinates,basePath):0===type.indexOf(_constants_js__WEBPACK_IMPORTED_MODULE_2__.geojsonTypes.MULTI_PREFIX)&&function processMultiGeometry(){const subType=type.replace(_constants_js__WEBPACK_IMPORTED_MODULE_2__.geojsonTypes.MULTI_PREFIX,"");coordinates.forEach(((subCoordinates,index)=>{const subFeature={type:_constants_js__WEBPACK_IMPORTED_MODULE_2__.geojsonTypes.FEATURE,properties:geojson.properties,geometry:{type:subType,coordinates:subCoordinates}};supplementaryPoints=supplementaryPoints.concat(createSupplementaryPoints(subFeature,options,index))}))}(),supplementaryPoints}},"./node_modules/@mapbox/mapbox-gl-draw/src/lib/create_vertex.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _constants_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/constants.js");function __WEBPACK_DEFAULT_EXPORT__(parentId,coordinates,path,selected){return{type:_constants_js__WEBPACK_IMPORTED_MODULE_0__.geojsonTypes.FEATURE,properties:{meta:_constants_js__WEBPACK_IMPORTED_MODULE_0__.meta.VERTEX,parent:parentId,coord_path:path,active:selected?_constants_js__WEBPACK_IMPORTED_MODULE_0__.activeStates.ACTIVE:_constants_js__WEBPACK_IMPORTED_MODULE_0__.activeStates.INACTIVE},geometry:{type:_constants_js__WEBPACK_IMPORTED_MODULE_0__.geojsonTypes.POINT,coordinates}}}},"./node_modules/@mapbox/mapbox-gl-draw/src/lib/double_click_zoom.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__={enable(ctx){setTimeout((()=>{ctx.map&&ctx.map.doubleClickZoom&&ctx._ctx&&ctx._ctx.store&&ctx._ctx.store.getInitialConfigValue&&ctx._ctx.store.getInitialConfigValue("doubleClickZoom")&&ctx.map.doubleClickZoom.enable()}),0)},disable(ctx){setTimeout((()=>{ctx.map&&ctx.map.doubleClickZoom&&ctx.map.doubleClickZoom.disable()}),0)}}},"./node_modules/@mapbox/mapbox-gl-draw/src/lib/is_event_at_coordinates.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__=function isEventAtCoordinates(event,coordinates){return!!event.lngLat&&(event.lngLat.lng===coordinates[0]&&event.lngLat.lat===coordinates[1])}},"./node_modules/@mapbox/mapbox-gl-draw/src/lib/move_features.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _constrain_feature_movement_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/constrain_feature_movement.js"),_constants_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/constants.js");function __WEBPACK_DEFAULT_EXPORT__(features,delta){const constrainedDelta=(0,_constrain_feature_movement_js__WEBPACK_IMPORTED_MODULE_0__.A)(features.map((feature=>feature.toGeoJSON())),delta);features.forEach((feature=>{const currentCoordinates=feature.getCoordinates(),moveCoordinate=coord=>{const point={lng:coord[0]+constrainedDelta.lng,lat:coord[1]+constrainedDelta.lat};return[point.lng,point.lat]},moveRing=ring=>ring.map((coord=>moveCoordinate(coord))),moveMultiPolygon=multi=>multi.map((ring=>moveRing(ring)));let nextCoordinates;feature.type===_constants_js__WEBPACK_IMPORTED_MODULE_1__.geojsonTypes.POINT?nextCoordinates=moveCoordinate(currentCoordinates):feature.type===_constants_js__WEBPACK_IMPORTED_MODULE_1__.geojsonTypes.LINE_STRING||feature.type===_constants_js__WEBPACK_IMPORTED_MODULE_1__.geojsonTypes.MULTI_POINT?nextCoordinates=currentCoordinates.map(moveCoordinate):feature.type===_constants_js__WEBPACK_IMPORTED_MODULE_1__.geojsonTypes.POLYGON||feature.type===_constants_js__WEBPACK_IMPORTED_MODULE_1__.geojsonTypes.MULTI_LINE_STRING?nextCoordinates=currentCoordinates.map(moveRing):feature.type===_constants_js__WEBPACK_IMPORTED_MODULE_1__.geojsonTypes.MULTI_POLYGON&&(nextCoordinates=currentCoordinates.map(moveMultiPolygon)),feature.incomingCoords(nextCoordinates)}))}},"./node_modules/@mapbox/mapbox-gl-draw/src/modes/direct_select.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _lib_common_selectors_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/common_selectors.js"),_lib_create_supplementary_points_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/create_supplementary_points.js"),_lib_constrain_feature_movement_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/constrain_feature_movement.js"),_lib_double_click_zoom_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/double_click_zoom.js"),_constants_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/constants.js"),_lib_move_features_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/move_features.js");const isVertex=(0,_lib_common_selectors_js__WEBPACK_IMPORTED_MODULE_0__.isOfMetaType)(_constants_js__WEBPACK_IMPORTED_MODULE_4__.meta.VERTEX),isMidpoint=(0,_lib_common_selectors_js__WEBPACK_IMPORTED_MODULE_0__.isOfMetaType)(_constants_js__WEBPACK_IMPORTED_MODULE_4__.meta.MIDPOINT),DirectSelect={fireUpdate:function(){this.fire(_constants_js__WEBPACK_IMPORTED_MODULE_4__.events.UPDATE,{action:_constants_js__WEBPACK_IMPORTED_MODULE_4__.updateActions.CHANGE_COORDINATES,features:this.getSelected().map((f=>f.toGeoJSON()))})},fireActionable:function(state){this.setActionableState({combineFeatures:!1,uncombineFeatures:!1,trash:state.selectedCoordPaths.length>0})},startDragging:function(state,e){state.initialDragPanState=this.map.dragPan.isEnabled(),this.map.dragPan.disable(),state.canDragMove=!0,state.dragMoveLocation=e.lngLat},stopDragging:function(state){state.canDragMove&&!0===state.initialDragPanState&&this.map.dragPan.enable(),state.dragMoving=!1,state.canDragMove=!1,state.dragMoveLocation=null},onVertex:function(state,e){this.startDragging(state,e);const about=e.featureTarget.properties,selectedIndex=state.selectedCoordPaths.indexOf(about.coord_path);(0,_lib_common_selectors_js__WEBPACK_IMPORTED_MODULE_0__.isShiftDown)(e)||-1!==selectedIndex?(0,_lib_common_selectors_js__WEBPACK_IMPORTED_MODULE_0__.isShiftDown)(e)&&-1===selectedIndex&&state.selectedCoordPaths.push(about.coord_path):state.selectedCoordPaths=[about.coord_path];const selectedCoordinates=this.pathsToCoordinates(state.featureId,state.selectedCoordPaths);this.setSelectedCoordinates(selectedCoordinates)},onMidpoint:function(state,e){this.startDragging(state,e);const about=e.featureTarget.properties;state.feature.addCoordinate(about.coord_path,about.lng,about.lat),this.fireUpdate(),state.selectedCoordPaths=[about.coord_path]},pathsToCoordinates:function(featureId,paths){return paths.map((coord_path=>({feature_id:featureId,coord_path})))},onFeature:function(state,e){0===state.selectedCoordPaths.length?this.startDragging(state,e):this.stopDragging(state)},dragFeature:function(state,e,delta){(0,_lib_move_features_js__WEBPACK_IMPORTED_MODULE_5__.A)(this.getSelected(),delta),state.dragMoveLocation=e.lngLat},dragVertex:function(state,e,delta){const selectedCoords=state.selectedCoordPaths.map((coord_path=>state.feature.getCoordinate(coord_path))),selectedCoordPoints=selectedCoords.map((coords=>({type:_constants_js__WEBPACK_IMPORTED_MODULE_4__.geojsonTypes.FEATURE,properties:{},geometry:{type:_constants_js__WEBPACK_IMPORTED_MODULE_4__.geojsonTypes.POINT,coordinates:coords}}))),constrainedDelta=(0,_lib_constrain_feature_movement_js__WEBPACK_IMPORTED_MODULE_2__.A)(selectedCoordPoints,delta);for(let i=0;i<selectedCoords.length;i++){const coord=selectedCoords[i];state.feature.updateCoordinate(state.selectedCoordPaths[i],coord[0]+constrainedDelta.lng,coord[1]+constrainedDelta.lat)}},clickNoTarget:function(){this.changeMode(_constants_js__WEBPACK_IMPORTED_MODULE_4__.modes.SIMPLE_SELECT)},clickInactive:function(){this.changeMode(_constants_js__WEBPACK_IMPORTED_MODULE_4__.modes.SIMPLE_SELECT)},clickActiveFeature:function(state){state.selectedCoordPaths=[],this.clearSelectedCoordinates(),state.feature.changed()},onSetup:function(opts){const featureId=opts.featureId,feature=this.getFeature(featureId);if(!feature)throw new Error("You must provide a featureId to enter direct_select mode");if(feature.type===_constants_js__WEBPACK_IMPORTED_MODULE_4__.geojsonTypes.POINT)throw new TypeError("direct_select mode doesn't handle point features");const state={featureId,feature,dragMoveLocation:opts.startPos||null,dragMoving:!1,canDragMove:!1,selectedCoordPaths:opts.coordPath?[opts.coordPath]:[]};return this.setSelectedCoordinates(this.pathsToCoordinates(featureId,state.selectedCoordPaths)),this.setSelected(featureId),_lib_double_click_zoom_js__WEBPACK_IMPORTED_MODULE_3__.A.disable(this),this.setActionableState({trash:!0}),state},onStop:function(){_lib_double_click_zoom_js__WEBPACK_IMPORTED_MODULE_3__.A.enable(this),this.clearSelectedCoordinates()},toDisplayFeatures:function(state,geojson,push){state.featureId===geojson.properties.id?(geojson.properties.active=_constants_js__WEBPACK_IMPORTED_MODULE_4__.activeStates.ACTIVE,push(geojson),(0,_lib_create_supplementary_points_js__WEBPACK_IMPORTED_MODULE_1__.A)(geojson,{map:this.map,midpoints:!0,selectedPaths:state.selectedCoordPaths}).forEach(push)):(geojson.properties.active=_constants_js__WEBPACK_IMPORTED_MODULE_4__.activeStates.INACTIVE,push(geojson)),this.fireActionable(state)},onTrash:function(state){state.selectedCoordPaths.sort(((a,b)=>b.localeCompare(a,"en",{numeric:!0}))).forEach((id=>state.feature.removeCoordinate(id))),this.fireUpdate(),state.selectedCoordPaths=[],this.clearSelectedCoordinates(),this.fireActionable(state),!1===state.feature.isValid()&&(this.deleteFeature([state.featureId]),this.changeMode(_constants_js__WEBPACK_IMPORTED_MODULE_4__.modes.SIMPLE_SELECT,{}))},onMouseMove:function(state,e){const isFeature=(0,_lib_common_selectors_js__WEBPACK_IMPORTED_MODULE_0__.isActiveFeature)(e),onVertex=isVertex(e),isMidPoint=isMidpoint(e),noCoords=0===state.selectedCoordPaths.length;isFeature&&noCoords||onVertex&&!noCoords?this.updateUIClasses({mouse:_constants_js__WEBPACK_IMPORTED_MODULE_4__.cursors.MOVE}):this.updateUIClasses({mouse:_constants_js__WEBPACK_IMPORTED_MODULE_4__.cursors.NONE});return(onVertex||isFeature||isMidPoint)&&state.dragMoving&&this.fireUpdate(),this.stopDragging(state),!0},onMouseOut:function(state){return state.dragMoving&&this.fireUpdate(),!0}};DirectSelect.onTouchStart=DirectSelect.onMouseDown=function(state,e){return isVertex(e)?this.onVertex(state,e):(0,_lib_common_selectors_js__WEBPACK_IMPORTED_MODULE_0__.isActiveFeature)(e)?this.onFeature(state,e):isMidpoint(e)?this.onMidpoint(state,e):void 0},DirectSelect.onDrag=function(state,e){if(!0!==state.canDragMove)return;state.dragMoving=!0,e.originalEvent.stopPropagation();const delta={lng:e.lngLat.lng-state.dragMoveLocation.lng,lat:e.lngLat.lat-state.dragMoveLocation.lat};state.selectedCoordPaths.length>0?this.dragVertex(state,e,delta):this.dragFeature(state,e,delta),state.dragMoveLocation=e.lngLat},DirectSelect.onClick=function(state,e){return(0,_lib_common_selectors_js__WEBPACK_IMPORTED_MODULE_0__.noTarget)(e)?this.clickNoTarget(state,e):(0,_lib_common_selectors_js__WEBPACK_IMPORTED_MODULE_0__.isActiveFeature)(e)?this.clickActiveFeature(state,e):(0,_lib_common_selectors_js__WEBPACK_IMPORTED_MODULE_0__.isInactiveFeature)(e)?this.clickInactive(state,e):void this.stopDragging(state)},DirectSelect.onTap=function(state,e){return(0,_lib_common_selectors_js__WEBPACK_IMPORTED_MODULE_0__.noTarget)(e)?this.clickNoTarget(state,e):(0,_lib_common_selectors_js__WEBPACK_IMPORTED_MODULE_0__.isActiveFeature)(e)?this.clickActiveFeature(state,e):(0,_lib_common_selectors_js__WEBPACK_IMPORTED_MODULE_0__.isInactiveFeature)(e)?this.clickInactive(state,e):void 0},DirectSelect.onTouchEnd=DirectSelect.onMouseUp=function(state){state.dragMoving&&this.fireUpdate(),this.stopDragging(state)};const __WEBPACK_DEFAULT_EXPORT__=DirectSelect},"./node_modules/@mapbox/mapbox-gl-draw/src/modes/draw_polygon.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _lib_common_selectors_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/common_selectors.js"),_lib_double_click_zoom_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/double_click_zoom.js"),_constants_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/constants.js"),_lib_is_event_at_coordinates_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/is_event_at_coordinates.js"),_lib_create_vertex_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mapbox/mapbox-gl-draw/src/lib/create_vertex.js");const DrawPolygon={onSetup:function(){const polygon=this.newFeature({type:_constants_js__WEBPACK_IMPORTED_MODULE_2__.geojsonTypes.FEATURE,properties:{},geometry:{type:_constants_js__WEBPACK_IMPORTED_MODULE_2__.geojsonTypes.POLYGON,coordinates:[[]]}});return this.addFeature(polygon),this.clearSelectedFeatures(),_lib_double_click_zoom_js__WEBPACK_IMPORTED_MODULE_1__.A.disable(this),this.updateUIClasses({mouse:_constants_js__WEBPACK_IMPORTED_MODULE_2__.cursors.ADD}),this.activateUIButton(_constants_js__WEBPACK_IMPORTED_MODULE_2__.types.POLYGON),this.setActionableState({trash:!0}),{polygon,currentVertexPosition:0}},clickAnywhere:function(state,e){if(state.currentVertexPosition>0&&(0,_lib_is_event_at_coordinates_js__WEBPACK_IMPORTED_MODULE_4__.A)(e,state.polygon.coordinates[0][state.currentVertexPosition-1]))return this.changeMode(_constants_js__WEBPACK_IMPORTED_MODULE_2__.modes.SIMPLE_SELECT,{featureIds:[state.polygon.id]});this.updateUIClasses({mouse:_constants_js__WEBPACK_IMPORTED_MODULE_2__.cursors.ADD}),state.polygon.updateCoordinate(`0.${state.currentVertexPosition}`,e.lngLat.lng,e.lngLat.lat),state.currentVertexPosition++,state.polygon.updateCoordinate(`0.${state.currentVertexPosition}`,e.lngLat.lng,e.lngLat.lat)},clickOnVertex:function(state){return this.changeMode(_constants_js__WEBPACK_IMPORTED_MODULE_2__.modes.SIMPLE_SELECT,{featureIds:[state.polygon.id]})},onMouseMove:function(state,e){state.polygon.updateCoordinate(`0.${state.currentVertexPosition}`,e.lngLat.lng,e.lngLat.lat),_lib_common_selectors_js__WEBPACK_IMPORTED_MODULE_0__.isVertex(e)&&this.updateUIClasses({mouse:_constants_js__WEBPACK_IMPORTED_MODULE_2__.cursors.POINTER})}};DrawPolygon.onTap=DrawPolygon.onClick=function(state,e){return _lib_common_selectors_js__WEBPACK_IMPORTED_MODULE_0__.isVertex(e)?this.clickOnVertex(state,e):this.clickAnywhere(state,e)},DrawPolygon.onKeyUp=function(state,e){_lib_common_selectors_js__WEBPACK_IMPORTED_MODULE_0__.isEscapeKey(e)?(this.deleteFeature([state.polygon.id],{silent:!0}),this.changeMode(_constants_js__WEBPACK_IMPORTED_MODULE_2__.modes.SIMPLE_SELECT)):_lib_common_selectors_js__WEBPACK_IMPORTED_MODULE_0__.isEnterKey(e)&&this.changeMode(_constants_js__WEBPACK_IMPORTED_MODULE_2__.modes.SIMPLE_SELECT,{featureIds:[state.polygon.id]})},DrawPolygon.onStop=function(state){this.updateUIClasses({mouse:_constants_js__WEBPACK_IMPORTED_MODULE_2__.cursors.NONE}),_lib_double_click_zoom_js__WEBPACK_IMPORTED_MODULE_1__.A.enable(this),this.activateUIButton(),void 0!==this.getFeature(state.polygon.id)&&(state.polygon.removeCoordinate(`0.${state.currentVertexPosition}`),state.polygon.isValid()?this.fire(_constants_js__WEBPACK_IMPORTED_MODULE_2__.events.CREATE,{features:[state.polygon.toGeoJSON()]}):(this.deleteFeature([state.polygon.id],{silent:!0}),this.changeMode(_constants_js__WEBPACK_IMPORTED_MODULE_2__.modes.SIMPLE_SELECT,{},{silent:!0})))},DrawPolygon.toDisplayFeatures=function(state,geojson,display){const isActivePolygon=geojson.properties.id===state.polygon.id;if(geojson.properties.active=isActivePolygon?_constants_js__WEBPACK_IMPORTED_MODULE_2__.activeStates.ACTIVE:_constants_js__WEBPACK_IMPORTED_MODULE_2__.activeStates.INACTIVE,!isActivePolygon)return display(geojson);if(0===geojson.geometry.coordinates.length)return;const coordinateCount=geojson.geometry.coordinates[0].length;if(!(coordinateCount<3)){if(geojson.properties.meta=_constants_js__WEBPACK_IMPORTED_MODULE_2__.meta.FEATURE,display((0,_lib_create_vertex_js__WEBPACK_IMPORTED_MODULE_3__.A)(state.polygon.id,geojson.geometry.coordinates[0][0],"0.0",!1)),coordinateCount>3){const endPos=geojson.geometry.coordinates[0].length-3;display((0,_lib_create_vertex_js__WEBPACK_IMPORTED_MODULE_3__.A)(state.polygon.id,geojson.geometry.coordinates[0][endPos],`0.${endPos}`,!1))}if(coordinateCount<=4){const lineCoordinates=[[geojson.geometry.coordinates[0][0][0],geojson.geometry.coordinates[0][0][1]],[geojson.geometry.coordinates[0][1][0],geojson.geometry.coordinates[0][1][1]]];if(display({type:_constants_js__WEBPACK_IMPORTED_MODULE_2__.geojsonTypes.FEATURE,properties:geojson.properties,geometry:{coordinates:lineCoordinates,type:_constants_js__WEBPACK_IMPORTED_MODULE_2__.geojsonTypes.LINE_STRING}}),3===coordinateCount)return}return display(geojson)}},DrawPolygon.onTrash=function(state){this.deleteFeature([state.polygon.id],{silent:!0}),this.changeMode(_constants_js__WEBPACK_IMPORTED_MODULE_2__.modes.SIMPLE_SELECT)};const __WEBPACK_DEFAULT_EXPORT__=DrawPolygon},"./node_modules/@turf/circle/dist/esm/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{n:()=>circle});var esm=__webpack_require__("./node_modules/@turf/helpers/dist/esm/index.js"),dist_esm=__webpack_require__("./node_modules/@turf/invariant/dist/esm/index.js");function destination(origin,distance,bearing,options={}){const coordinates1=(0,dist_esm.uG)(origin),longitude1=(0,esm.tR)(coordinates1[0]),latitude1=(0,esm.tR)(coordinates1[1]),bearingRad=(0,esm.tR)(bearing),radians=(0,esm.Gf)(distance,options.units),latitude2=Math.asin(Math.sin(latitude1)*Math.cos(radians)+Math.cos(latitude1)*Math.sin(radians)*Math.cos(bearingRad)),longitude2=longitude1+Math.atan2(Math.sin(bearingRad)*Math.sin(radians)*Math.cos(latitude1),Math.cos(radians)-Math.sin(latitude1)*Math.sin(latitude2)),lng=(0,esm.nv)(longitude2),lat=(0,esm.nv)(latitude2);return(0,esm.zx)([lng,lat],options.properties)}function circle(center,radius,options={}){const steps=options.steps||64,properties=options.properties?options.properties:!Array.isArray(center)&&"Feature"===center.type&&center.properties?center.properties:{},coordinates=[];for(let i=0;i<steps;i++)coordinates.push(destination(center,radius,-360*i/steps,options).geometry.coordinates);return coordinates.push(coordinates[0]),(0,esm.n1)([coordinates],properties)}},"./node_modules/fast-deep-equal/index.js":module=>{"use strict";module.exports=function equal(a,b){if(a===b)return!0;if(a&&b&&"object"==typeof a&&"object"==typeof b){if(a.constructor!==b.constructor)return!1;var length,i,keys;if(Array.isArray(a)){if((length=a.length)!=b.length)return!1;for(i=length;0!=i--;)if(!equal(a[i],b[i]))return!1;return!0}if(a.constructor===RegExp)return a.source===b.source&&a.flags===b.flags;if(a.valueOf!==Object.prototype.valueOf)return a.valueOf()===b.valueOf();if(a.toString!==Object.prototype.toString)return a.toString()===b.toString();if((length=(keys=Object.keys(a)).length)!==Object.keys(b).length)return!1;for(i=length;0!=i--;)if(!Object.prototype.hasOwnProperty.call(b,keys[i]))return!1;for(i=length;0!=i--;){var key=keys[i];if(!equal(a[key],b[key]))return!1}return!0}return a!=a&&b!=b}},"./node_modules/wgs84/index.js":module=>{module.exports.RADIUS=6378137,module.exports.FLATTENING=1/298.257223563,module.exports.POLAR_RADIUS=6356752.3142}}]);