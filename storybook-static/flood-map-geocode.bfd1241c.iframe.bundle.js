"use strict";(self.webpackChunk_defra_flood_map=self.webpackChunk_defra_flood_map||[]).push([[1163],{"./src/js/lib/viewport.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{BS:()=>getStatus,CK:()=>getShortcutKey,Ig:()=>getFocusPadding,Ox:()=>getPlace,X_:()=>getScale,Yf:()=>getDistance,ZM:()=>getMapPixel,cj:()=>spatialNavigate,dN:()=>parseCentre,fC:()=>getPoint,fY:()=>getDescription,gd:()=>getStyle,mG:()=>getFeatureShape,mK:()=>getFocusBounds,qo:()=>detectCoordinateType,zw:()=>parseZoom});var _turf_distance__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@turf/distance/dist/esm/index.js"),_turf_helpers__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@turf/helpers/dist/esm/index.js"),_store_constants__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/js/store/constants.js");const getUnits=metres=>{let units;return units=metres<800?`${metres} metres`:metres<5e3?(metres/1e3*.621371).toFixed(1)+" miles":Math.round(metres/1e3*.621371)+" miles",units},getBoundsChange=(oCentre,originalZoom,isMaxZoom,isMinZoom,center,zoom)=>{const isSameCentre=JSON.stringify(oCentre)===JSON.stringify(center),isSameZoom=originalZoom===zoom,maxZoom=isMaxZoom?" (Maximum zoom reached)":"",minZoom=isMinZoom?" (Minimum zoom reached)":"";let change="";if(oCentre&&originalZoom&&!(isSameCentre&&isSameZoom))if(isSameCentre||isSameZoom)if(isSameCentre){change=`Zoomed ${zoom>originalZoom?"in":"out"}${maxZoom}${minZoom}: `}else change=`Map move: ${((coord1,coord2)=>{coord1=coord1.map((n=>n>1e3?Math.round(n):Math.round(1e5*n)/1e5)),coord2=coord2.map((n=>n>1e3?Math.round(n):Math.round(1e5*n)/1e5));const ns1=[coord1[0],coord1[1]],ns2=[coord1[0],coord2[1]],ew1=[coord1[0],coord1[1]],ew2=[coord2[0],coord1[1]],nsd=getDistance(ns1,ns2),ewd=getDistance(ew1,ew2),bearing=((coord1,coord2)=>[coord1[0]<coord2[0]&&"east",coord1[0]>coord2[0]&&"west",coord1[1]<coord2[1]&&"north",coord1[1]>coord2[1]&&"south"].filter((b=>b&&"string"==typeof b)))(coord1,coord2),ewc=bearing.filter((b=>["east","west"].includes(b))).join(""),nsc=bearing.filter((b=>["north","south"].includes(b))).join(""),ew=ewc?`${ewc} ${getUnits(ewd)}`:"";return(nsc?`${nsc} ${getUnits(nsd)}`:"")+(ewc&&nsc?", ":"")+ew})(oCentre,center)}, `;else change=`New area${maxZoom}${minZoom}: `;return change},getOffsetBoundingClientRect=el=>(el.closest("[data-fm-main]")||document.body).getBoundingClientRect(),detectCoordinateType=coords=>{if(3===coords.length)return"BNG";const[x,y]=coords;return x>=-180&&x<=180&&y>=-90&&y<=90?"WSG84":x>180&&y>90?"BNG":"Unknown"},getDistance=(coord1,coord2)=>{let distance;if(coord1[0]>1e3){const x=Math.abs(coord1[0]-coord2[0]),y=Math.abs(coord1[1]-coord2[1]);distance=Math.sqrt(Math.pow(x,2)+Math.pow(y,2))}else{const p1=new _turf_helpers__WEBPACK_IMPORTED_MODULE_1__.zx(coord1),p2=new _turf_helpers__WEBPACK_IMPORTED_MODULE_1__.zx(coord2);distance=(0,_turf_distance__WEBPACK_IMPORTED_MODULE_2__.I)(p1,p2,{units:"metres"})}return Math.round(distance)},getFocusPadding=(el,scale)=>{let padding;if(el){const parent=getOffsetBoundingClientRect(el),box=el.getBoundingClientRect(),boxX=box.x||box.left,boxY=box.y||box.top,parentX=parent.x||parent.left,parentY=parent.y||parent.top;padding={top:(boxY-parentY)/scale,left:(boxX-parentX)/scale,right:(parent.width-box.width-(boxX-parentX))/scale,bottom:(parent.height-box.height-(boxY-parentY))/scale}}return Object.values(padding).every((i=>i>=0))&&padding},getFocusBounds=(el,scale)=>{let bounds;if(el){const parent=getOffsetBoundingClientRect(el),box=el.getBoundingClientRect(),m=10;bounds=[[((box.x||box.left)-(parent.x||parent.left)+m)/scale,((box.y||box.top)-(parent.y||parent.top)+box.height-m)/scale],[(box.width+((box.x||box.left)-(parent.x||parent.left))-m)/scale,((box.y||box.top)-(parent.y||parent.top)+m)/scale]]}return bounds},getMapPixel=(el,scale)=>{const parent=getOffsetBoundingClientRect(el),box=el.getBoundingClientRect(),left=((box.x||box.left)-(parent.x||parent.left))/scale,top=((box.y||box.top)-(parent.y||parent.top))/scale;return[left+box.width/2/scale,top+box.height/2/scale]},getDescription=(place,bounds,features)=>{const{featuresTotal,isFeaturesInMap,isPixelFeaturesAtPixel,isPixelFeaturesInMap}=features||{};let text="";featuresTotal?text=`${featuresTotal} feature${1===featuresTotal?"":"s"} in this area. `:isPixelFeaturesAtPixel?text="Data visible at the center coordinate. ":isPixelFeaturesInMap?text="No data visible at the center coordinate. ":isFeaturesInMap&&(text="No feature data in this area. ");const focusPlace=place?`approximate centre ${place}, `:"",focusArea=`covering ${(bounds=>{const ew=getDistance([bounds[0],bounds[1]],[bounds[2],bounds[1]]),ns=getDistance([bounds[0],bounds[1]],[bounds[0],bounds[3]]);return`${getUnits(ew)} by ${getUnits(ns)}`})(bounds)}`;return`${focusPlace}${focusArea}. ${text}${place?"":"Use ALT plus I to find closest place"}`},getStatus=(action,isBoundsChange,place,state,current)=>{const{center,bounds,zoom,isMaxZoom,isMinZoom,features,label,selectedId}=current;let status=null;if(label)status=label;else if(selectedId){status=((featuresInViewport,id)=>{const total=featuresInViewport.length,index=featuresInViewport.findIndex((f=>f.id===id));return index>=0&&`${total} feature${1!==total?"s":""} in this area. ${featuresInViewport[index].name}. ${index+1} of ${total} highlighted.`})(features?.featuresInViewport,selectedId)}else if("DATA"===action)status="Map change: new data. Use ALT plus I to get new details";else if(isBoundsChange){const direction=getBoundsChange(state.center,state.zoom,isMaxZoom,isMinZoom,center,zoom);status=`${direction}${direction?"f":"F"}ocus area ${getDescription(place,bounds,features)}`}else status="";return status},getPlace=(isUserInitiated,action,oPlace,newPlace)=>{let place;return isUserInitiated||(place="RESET"===action?oPlace:newPlace),place},parseCentre=(value,srid)=>{const mb=_store_constants__WEBPACK_IMPORTED_MODULE_0__.NT[`MAX_BOUNDS_${srid}`];let isInRange,coords=value?.split(",");return Array.isArray(coords)&&3===coords?.length?(coords=coords.slice(0,2).map((x=>parseFloat(x))),coords=!coords.some(isNaN)&&coords,coords?(isInRange="27700"===srid?!!coords.filter((c=>c>=0)).length:coords[0]>mb[0]&&coords[0]<mb[2]&&coords[1]>mb[1]&&coords[1]<mb[3],isInRange?coords:null):null):null},parseZoom=value=>{const coords=value?.split(",");if(!Array.isArray(coords)||3!==coords?.length)return null;const zoom=parseFloat(coords[2]);return zoom.isNaN?null:zoom},getShortcutKey=(e,featuresViewport)=>{const number=e.code.slice(-1);return featuresViewport.length>=number?featuresViewport[number-1].id:""},getFeatureShape=feature=>{if((geometry=>{const coordinates=geometry?.coordinates?.[0];if(65!==coordinates?.length)return!1;const[x1,y1]=coordinates[0],[x2,y2]=coordinates[32],center=[(x1+x2)/2,(y1+y2)/2];let minDist=1/0,maxDist=-1/0,minEdge=1/0,maxEdge=-1/0;for(let i=0;i<64;i++){const[xA,yA]=coordinates[i],[xB,yB]=coordinates[(i+1)%64],dist=Math.hypot(xA-center[0],yA-center[1]);minDist=Math.min(minDist,dist),maxDist=Math.max(maxDist,dist);const edgeDist=Math.hypot(xB-xA,yB-yA);minEdge=Math.min(minEdge,edgeDist),maxEdge=Math.max(maxEdge,edgeDist)}const tolerance=(detectCoordinateType(center),.3);return Math.abs(maxDist-minDist)<tolerance&&Math.abs(maxEdge-minEdge)<tolerance})(feature?.geometry))return"circle";if("polygon"===feature?.geometry?.type?.toLowerCase()){const coords=feature.geometry?.coordinates,flatCoords=coords&&Array.from(new Set(coords.flat(2)))||null;return 4===flatCoords?.length?"square":"polygon"}return null},spatialNavigate=(direction,start,pixels)=>{const quadrant=pixels.filter((p=>{const offsetX=Math.abs(p[0]-start[0]),offsetY=Math.abs(p[1]-start[1]);let isQuadrant=!1;return isQuadrant="up"===direction?p[1]<=start[1]&&offsetY>=offsetX:"down"===direction?p[1]>start[1]&&offsetY>=offsetX:"left"===direction?p[0]<=start[0]&&offsetY<offsetX:p[0]>start[0]&&offsetY<offsetX,isQuadrant&&JSON.stringify(p)!==JSON.stringify(start)}));quadrant.length||quadrant.push(start);const distances=quadrant.map((p=>{return a=Math.abs(start[0]-p[0]),b=Math.abs(start[1]-p[1]),Math.sqrt(Math.pow(a,2)+Math.pow(b,2));var a,b})),closest=quadrant[distances.indexOf(Math.min(...distances))];return pixels.findIndex((i=>JSON.stringify(i)===JSON.stringify(closest)))},getScale=size=>({small:1,medium:1.5,large:2}[size]||1),getPoint=(el,e,scale)=>{const{left,top}=el.getBoundingClientRect(),{clientX,clientY}=e.nativeEvent;return[(clientX-left)/scale,(clientY-top)/scale]},getStyle=(styles=[])=>{const validStyles=styles.filter((s=>_store_constants__WEBPACK_IMPORTED_MODULE_0__.NT.STYLES.includes(s.name))),style=window.localStorage.getItem("style");return validStyles.find((s=>s.name===style))||validStyles.find((s=>"default"===s.name))}},"./src/js/provider/os-open-names/config.json":module=>{module.exports=JSON.parse('{"k":"https://api.os.uk/search/names/v1/find?query={query}&fq=local_type:postcode%20local_type:hamlet%20local_type:village%20local_type:town%20local_type:city%20local_type:other_settlement&maxresults={maxresults}","KM":"https://api.os.uk/search/names/v1/nearest?point={easting},{northing}&radius=1000&fq=local_type:Airfield%20local_type:Airport%20local_type:Bus_Station%20local_type:Chemical_Works%20local_type:City%20local_type:Coach_Station%20local_type:Electricity_Distribution%20local_type:Electricity_Production%20local_type:Further_Education%20local_type:Gas_Distribution_or_Storage%20local_type:Hamlet%20local_type:Harbour%20local_type:Helicopter_Station%20local_type:Heliport%20local_type:Higher_or_University_Education%20local_type:Hill_Or_Mountain%20local_type:Hospice%20local_type:Hospital%20local_type:Medical_Care_Accommodation%20local_type:Named_Road%20local_type:Non_State_Primary_Education%20local_type:Non_State_Secondary_Education%20local_type:Other_Settlement%20local_type:Passenger_Ferry_Terminal%20local_type:Port_Consisting_of_Docks_and_Nautical_Berthing%20local_type:Postcode%20local_type:Primary_Education%20local_type:Railway_Station%20local_type:Road_User_Services%20local_type:Secondary_Education%20local_type:Section_Of_Named_Road%20local_type:Section_Of_Numbered_Road%20local_type:Special_Needs_Education%20local_type:Suburban_Area%20local_type:Town%20local_type:Urban_Greenspace%20local_type:Vehicular_Ferry_Terminal%20local_type:Vehicular_Rail_Terminal%20local_type:Village%20local_type:Waterfall%20","SW":500}')},"./src/js/provider/os-open-names/geocode.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>__WEBPACK_DEFAULT_EXPORT__});var geodesy_osgridref_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/geodesy/osgridref.js"),_config_json__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/js/provider/os-open-names/config.json");const markString=(string,find)=>{find=find.replace(/,/g,"");const patterns=[...new Set([find,...find.trim().split(/[stn]+/)])].join("|"),reg=new RegExp(`(${patterns})`,"i","g","gi");return{__html:string.replace(reg,"<mark>$1</mark>")}},parseResults=async(query,transformGeocodeRequest)=>{if(!query)return[];let url=_config_json__WEBPACK_IMPORTED_MODULE_1__.k;var value;url=url.replace("{query}",encodeURI(query)).replace("{maxresults}",(value=(value=query).replace(/\s/g,""),/^(([A-Z]{1,2}\d[A-Z\d]?|ASCN|STHL|TDCU|BBND|[BFS]IQQ|PCRN|TKCA) ?\d[A-Z]{2}|BFPO ?\d{1,4}|(KY\d|MSR|VG|AI)[ -]?\d{4}|[A-Z]{2} ?\d{2}|GE ?CX|GIR ?0A{2}|SAN ?TA1)$/i.test(value)?1:100));let results=[];try{const response=await fetch(await transformGeocodeRequest(url)),json=await response.json();if(json.error||0===json.header.totalresults)return[];results=((results,query)=>{const words=query.toLowerCase().replace(/,/g,"").split(" ");return results.filter((l=>words.some((w=>l.GAZETTEER_ENTRY.NAME1.toLowerCase().includes(w)))))})(json.results,query),results=(results=>Array.from(new Map(results.map((result=>[result.GAZETTEER_ENTRY.ID,result]))).values()))(results),results=(results=>results.filter((r=>"england"===r.GAZETTEER_ENTRY.COUNTRY.toLowerCase())))(results),results=results.slice(0,8)}catch(err){console.log(err)}return results};const __WEBPACK_DEFAULT_EXPORT__=class Geocode{constructor(transformGeocodeRequest=u=>u){this.transformGeocodeRequest=transformGeocodeRequest}async suggest(query){if(!query)return[];return(await parseResults(query,this.transformGeocodeRequest)).map((l=>((query,{ID,NAME1,COUNTY_UNITARY,DISTRICT_BOROUGH,POSTCODE_DISTRICT,LOCAL_TYPE})=>{const qualifier=`${["City","Postcode"].includes(LOCAL_TYPE)?"":POSTCODE_DISTRICT+", "}${"City"!==LOCAL_TYPE?COUNTY_UNITARY||DISTRICT_BOROUGH:""}`;return{id:ID,text:`${NAME1}${qualifier?", "+qualifier:""}`,marked:markString(`${NAME1}${qualifier?", "+qualifier:""}`,query)}})(query,l.GAZETTEER_ENTRY)))}async find(query){if(!query)return null;const results=await parseResults(query,this.transformGeocodeRequest);return results.length?(({ID,NAME1,MBR_XMIN,MBR_YMIN,MBR_XMAX,MBR_YMAX,GEOMETRY_X,GEOMETRY_Y})=>({id:ID,text:NAME1,bounds:MBR_XMIN?[new geodesy_osgridref_js__WEBPACK_IMPORTED_MODULE_0__.Ay(MBR_XMIN,MBR_YMIN).toLatLon().lon,new geodesy_osgridref_js__WEBPACK_IMPORTED_MODULE_0__.Ay(MBR_XMIN,MBR_YMIN).toLatLon().lat,new geodesy_osgridref_js__WEBPACK_IMPORTED_MODULE_0__.Ay(MBR_XMAX,MBR_YMAX).toLatLon().lon,new geodesy_osgridref_js__WEBPACK_IMPORTED_MODULE_0__.Ay(MBR_XMAX,MBR_YMAX).toLatLon().lat].map((n=>Math.round(1e6*n)/1e6)):[new geodesy_osgridref_js__WEBPACK_IMPORTED_MODULE_0__.Ay(GEOMETRY_X-_config_json__WEBPACK_IMPORTED_MODULE_1__.SW,GEOMETRY_Y-_config_json__WEBPACK_IMPORTED_MODULE_1__.SW).toLatLon().lon,new geodesy_osgridref_js__WEBPACK_IMPORTED_MODULE_0__.Ay(GEOMETRY_X-_config_json__WEBPACK_IMPORTED_MODULE_1__.SW,GEOMETRY_Y-_config_json__WEBPACK_IMPORTED_MODULE_1__.SW).toLatLon().lat,new geodesy_osgridref_js__WEBPACK_IMPORTED_MODULE_0__.Ay(GEOMETRY_X+_config_json__WEBPACK_IMPORTED_MODULE_1__.SW,GEOMETRY_Y+_config_json__WEBPACK_IMPORTED_MODULE_1__.SW).toLatLon().lon,new geodesy_osgridref_js__WEBPACK_IMPORTED_MODULE_0__.Ay(GEOMETRY_X+_config_json__WEBPACK_IMPORTED_MODULE_1__.SW,GEOMETRY_Y+_config_json__WEBPACK_IMPORTED_MODULE_1__.SW).toLatLon().lat].map((n=>Math.round(1e6*n)/1e6)),center:GEOMETRY_X?[new geodesy_osgridref_js__WEBPACK_IMPORTED_MODULE_0__.Ay(GEOMETRY_X,GEOMETRY_Y).toLatLon().lon,new geodesy_osgridref_js__WEBPACK_IMPORTED_MODULE_0__.Ay(GEOMETRY_X,GEOMETRY_Y).toLatLon().lat].map((n=>Math.round(1e6*n)/1e6)):null}))(results[0].GAZETTEER_ENTRY):null}}},"./src/js/provider/os-open-names/reverse-geocode.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>__WEBPACK_DEFAULT_EXPORT__});var _config_json__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/js/provider/os-open-names/config.json"),_lib_viewport__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/js/lib/viewport.js"),geodesy_osgridref_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/geodesy/osgridref.js");const __WEBPACK_DEFAULT_EXPORT__=class ReverseGeocode{constructor(transformGeocodeRequest=u=>u){this.transformGeocodeRequest=transformGeocodeRequest}async getNearest(zoom,coord){if("WSG84"===(0,_lib_viewport__WEBPACK_IMPORTED_MODULE_1__.qo)(coord))try{const bng=new geodesy_osgridref_js__WEBPACK_IMPORTED_MODULE_2__.B7(coord[1],coord[0]).toOsGrid();coord=[bng.easting,bng.northing]}catch(err){return console.log(err),null}let url=_config_json__WEBPACK_IMPORTED_MODULE_0__.KM;url=url.replace("{easting}",Math.round(coord[0])).replace("{northing}",Math.round(coord[1]));const response=await fetch(await this.transformGeocodeRequest(url)),json=await response.json();return json.results?(({NAME1,POPULATED_PLACE,COUNTY_UNITARY,REGION})=>`${NAME1}${POPULATED_PLACE?", "+POPULATED_PLACE:""}${COUNTY_UNITARY?", "+COUNTY_UNITARY:""}, ${REGION}`)(json.results[0].GAZETTEER_ENTRY):null}}}}]);