{"version":3,"file":"flood-map-geocode-provider.js","mappings":"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","sources":["webpack://defra/./node_modules/geodesy/dms.js","webpack://defra/./node_modules/geodesy/vector3d.js","webpack://defra/./node_modules/geodesy/latlon-ellipsoidal.js","webpack://defra/./node_modules/geodesy/latlon-ellipsoidal-datum.js","webpack://defra/./node_modules/geodesy/osgridref.js","webpack://defra/./src/js/provider/os-open-names/geocode.js"],"sourcesContent":["/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Geodesy representation conversion functions                        (c) Chris Veness 2002-2020  */\n/*                                                                                   MIT Licence  */\n/* www.movable-type.co.uk/scripts/latlong.html                                                    */\n/* www.movable-type.co.uk/scripts/js/geodesy/geodesy-library.html#dms                             */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n/* eslint no-irregular-whitespace: [2, { skipComments: true }] */\n\n\n/**\n * Latitude/longitude points may be represented as decimal degrees, or subdivided into sexagesimal\n * minutes and seconds. This module provides methods for parsing and representing degrees / minutes\n * / seconds.\n *\n * @module dms\n */\n\n\n/* Degree-minutes-seconds (& cardinal directions) separator character */\nlet dmsSeparator = '\\u202f'; // U+202F = 'narrow no-break space'\n\n\n/**\n * Functions for parsing and representing degrees / minutes / seconds.\n */\nclass Dms {\n\n    // note Unicode Degree = U+00B0. Prime = U+2032, Double prime = U+2033\n\n    /**\n     * Separator character to be used to separate degrees, minutes, seconds, and cardinal directions.\n     *\n     * Default separator is U+202F ‘narrow no-break space’.\n     *\n     * To change this (e.g. to empty string or full space), set Dms.separator prior to invoking\n     * formatting.\n     *\n     * @example\n     *   import LatLon, { Dms } from '/js/geodesy/latlon-spherical.js';\n     *   const p = new LatLon(51.2, 0.33).toString('dms');  // 51° 12′ 00″ N, 000° 19′ 48″ E\n     *   Dms.separator = '';                                // no separator\n     *   const pʹ = new LatLon(51.2, 0.33).toString('dms'); // 51°12′00″N, 000°19′48″E\n     */\n    static get separator()     { return dmsSeparator; }\n    static set separator(char) { dmsSeparator = char; }\n\n\n    /**\n     * Parses string representing degrees/minutes/seconds into numeric degrees.\n     *\n     * This is very flexible on formats, allowing signed decimal degrees, or deg-min-sec optionally\n     * suffixed by compass direction (NSEW); a variety of separators are accepted. Examples -3.62,\n     * '3 37 12W', '3°37′12″W'.\n     *\n     * Thousands/decimal separators must be comma/dot; use Dms.fromLocale to convert locale-specific\n     * thousands/decimal separators.\n     *\n     * @param   {string|number} dms - Degrees or deg/min/sec in variety of formats.\n     * @returns {number}        Degrees as decimal number.\n     *\n     * @example\n     *   const lat = Dms.parse('51° 28′ 40.37″ N');\n     *   const lon = Dms.parse('000° 00′ 05.29″ W');\n     *   const p1 = new LatLon(lat, lon); // 51.4779°N, 000.0015°W\n     */\n    static parse(dms) {\n        // check for signed decimal degrees without NSEW, if so return it directly\n        if (!isNaN(parseFloat(dms)) && isFinite(dms)) return Number(dms);\n\n        // strip off any sign or compass dir'n & split out separate d/m/s\n        const dmsParts = String(dms).trim().replace(/^-/, '').replace(/[NSEW]$/i, '').split(/[^0-9.,]+/);\n        if (dmsParts[dmsParts.length-1]=='') dmsParts.splice(dmsParts.length-1);  // from trailing symbol\n\n        if (dmsParts == '') return NaN;\n\n        // and convert to decimal degrees...\n        let deg = null;\n        switch (dmsParts.length) {\n            case 3:  // interpret 3-part result as d/m/s\n                deg = dmsParts[0]/1 + dmsParts[1]/60 + dmsParts[2]/3600;\n                break;\n            case 2:  // interpret 2-part result as d/m\n                deg = dmsParts[0]/1 + dmsParts[1]/60;\n                break;\n            case 1:  // just d (possibly decimal) or non-separated dddmmss\n                deg = dmsParts[0];\n                // check for fixed-width unseparated format eg 0033709W\n                //if (/[NS]/i.test(dmsParts)) deg = '0' + deg;  // - normalise N/S to 3-digit degrees\n                //if (/[0-9]{7}/.test(deg)) deg = deg.slice(0,3)/1 + deg.slice(3,5)/60 + deg.slice(5)/3600;\n                break;\n            default:\n                return NaN;\n        }\n        if (/^-|[WS]$/i.test(dms.trim())) deg = -deg; // take '-', west and south as -ve\n\n        return Number(deg);\n    }\n\n\n    /**\n     * Converts decimal degrees to deg/min/sec format\n     *  - degree, prime, double-prime symbols are added, but sign is discarded, though no compass\n     *    direction is added.\n     *  - degrees are zero-padded to 3 digits; for degrees latitude, use .slice(1) to remove leading\n     *    zero.\n     *\n     * @private\n     * @param   {number} deg - Degrees to be formatted as specified.\n     * @param   {string} [format=d] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.\n     * @param   {number} [dp=4|2|0] - Number of decimal places to use – default 4 for d, 2 for dm, 0 for dms.\n     * @returns {string} Degrees formatted as deg/min/secs according to specified format.\n     */\n    static toDms(deg, format='d', dp=undefined) {\n        if (isNaN(deg)) return null;  // give up here if we can't make a number from deg\n        if (typeof deg == 'string' && deg.trim() == '') return null;\n        if (typeof deg == 'boolean') return null;\n        if (deg == Infinity) return null;\n        if (deg == null) return null;\n\n        // default values\n        if (dp === undefined) {\n            switch (format) {\n                case 'd':   case 'deg':         dp = 4; break;\n                case 'dm':  case 'deg+min':     dp = 2; break;\n                case 'dms': case 'deg+min+sec': dp = 0; break;\n                default:          format = 'd'; dp = 4; break; // be forgiving on invalid format\n            }\n        }\n\n        deg = Math.abs(deg);  // (unsigned result ready for appending compass dir'n)\n\n        let dms = null, d = null, m = null, s = null;\n        switch (format) {\n            default: // invalid format spec!\n            case 'd': case 'deg':\n                d = deg.toFixed(dp);                       // round/right-pad degrees\n                if (d<100) d = '0' + d;                    // left-pad with leading zeros (note may include decimals)\n                if (d<10) d = '0' + d;\n                dms = d + '°';\n                break;\n            case 'dm': case 'deg+min':\n                d = Math.floor(deg);                       // get component deg\n                m = ((deg*60) % 60).toFixed(dp);           // get component min & round/right-pad\n                if (m == 60) { m = (0).toFixed(dp); d++; } // check for rounding up\n                d = ('000'+d).slice(-3);                   // left-pad with leading zeros\n                if (m<10) m = '0' + m;                     // left-pad with leading zeros (note may include decimals)\n                dms = d + '°'+Dms.separator + m + '′';\n                break;\n            case 'dms': case 'deg+min+sec':\n                d = Math.floor(deg);                       // get component deg\n                m = Math.floor((deg*3600)/60) % 60;        // get component min\n                s = (deg*3600 % 60).toFixed(dp);           // get component sec & round/right-pad\n                if (s == 60) { s = (0).toFixed(dp); m++; } // check for rounding up\n                if (m == 60) { m = 0; d++; }               // check for rounding up\n                d = ('000'+d).slice(-3);                   // left-pad with leading zeros\n                m = ('00'+m).slice(-2);                    // left-pad with leading zeros\n                if (s<10) s = '0' + s;                     // left-pad with leading zeros (note may include decimals)\n                dms = d + '°'+Dms.separator + m + '′'+Dms.separator + s + '″';\n                break;\n        }\n\n        return dms;\n    }\n\n\n    /**\n     * Converts numeric degrees to deg/min/sec latitude (2-digit degrees, suffixed with N/S).\n     *\n     * @param   {number} deg - Degrees to be formatted as specified.\n     * @param   {string} [format=d] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.\n     * @param   {number} [dp=4|2|0] - Number of decimal places to use – default 4 for d, 2 for dm, 0 for dms.\n     * @returns {string} Degrees formatted as deg/min/secs according to specified format.\n     *\n     * @example\n     *   const lat = Dms.toLat(-3.62, 'dms'); // 3°37′12″S\n     */\n    static toLat(deg, format, dp) {\n        const lat = Dms.toDms(Dms.wrap90(deg), format, dp);\n        return lat===null ? '–' : lat.slice(1) + Dms.separator + (deg<0 ? 'S' : 'N');  // knock off initial '0' for lat!\n    }\n\n\n    /**\n     * Convert numeric degrees to deg/min/sec longitude (3-digit degrees, suffixed with E/W).\n     *\n     * @param   {number} deg - Degrees to be formatted as specified.\n     * @param   {string} [format=d] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.\n     * @param   {number} [dp=4|2|0] - Number of decimal places to use – default 4 for d, 2 for dm, 0 for dms.\n     * @returns {string} Degrees formatted as deg/min/secs according to specified format.\n     *\n     * @example\n     *   const lon = Dms.toLon(-3.62, 'dms'); // 3°37′12″W\n     */\n    static toLon(deg, format, dp) {\n        const lon = Dms.toDms(Dms.wrap180(deg), format, dp);\n        return lon===null ? '–' : lon + Dms.separator + (deg<0 ? 'W' : 'E');\n    }\n\n\n    /**\n     * Converts numeric degrees to deg/min/sec as a bearing (0°..360°).\n     *\n     * @param   {number} deg - Degrees to be formatted as specified.\n     * @param   {string} [format=d] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.\n     * @param   {number} [dp=4|2|0] - Number of decimal places to use – default 4 for d, 2 for dm, 0 for dms.\n     * @returns {string} Degrees formatted as deg/min/secs according to specified format.\n     *\n     * @example\n     *   const lon = Dms.toBrng(-3.62, 'dms'); // 356°22′48″\n     */\n    static toBrng(deg, format, dp) {\n        const brng =  Dms.toDms(Dms.wrap360(deg), format, dp);\n        return brng===null ? '–' : brng.replace('360', '0');  // just in case rounding took us up to 360°!\n    }\n\n\n    /**\n     * Converts DMS string from locale thousands/decimal separators to JavaScript comma/dot separators\n     * for subsequent parsing.\n     *\n     * Both thousands and decimal separators must be followed by a numeric character, to facilitate\n     * parsing of single lat/long string (in which whitespace must be left after the comma separator).\n     *\n     * @param   {string} str - Degrees/minutes/seconds formatted with locale separators.\n     * @returns {string} Degrees/minutes/seconds formatted with standard Javascript separators.\n     *\n     * @example\n     *   const lat = Dms.fromLocale('51°28′40,12″N');                          // '51°28′40.12″N' in France\n     *   const p = new LatLon(Dms.fromLocale('51°28′40,37″N, 000°00′05,29″W'); // '51.4779°N, 000.0015°W' in France\n     */\n    static fromLocale(str) {\n        const locale = (123456.789).toLocaleString();\n        const separator = { thousands: locale.slice(3, 4), decimal: locale.slice(7, 8) };\n        return str.replace(separator.thousands, '⁜').replace(separator.decimal, '.').replace('⁜', ',');\n    }\n\n\n    /**\n     * Converts DMS string from JavaScript comma/dot thousands/decimal separators to locale separators.\n     *\n     * Can also be used to format standard numbers such as distances.\n     *\n     * @param   {string} str - Degrees/minutes/seconds formatted with standard Javascript separators.\n     * @returns {string} Degrees/minutes/seconds formatted with locale separators.\n     *\n     * @example\n     *   const Dms.toLocale('123,456.789');                   // '123.456,789' in France\n     *   const Dms.toLocale('51°28′40.12″N, 000°00′05.31″W'); // '51°28′40,12″N, 000°00′05,31″W' in France\n     */\n    static toLocale(str) {\n        const locale = (123456.789).toLocaleString();\n        const separator = { thousands: locale.slice(3, 4), decimal: locale.slice(7, 8) };\n        return str.replace(/,([0-9])/, '⁜$1').replace('.', separator.decimal).replace('⁜', separator.thousands);\n    }\n\n\n    /**\n     * Returns compass point (to given precision) for supplied bearing.\n     *\n     * @param   {number} bearing - Bearing in degrees from north.\n     * @param   {number} [precision=3] - Precision (1:cardinal / 2:intercardinal / 3:secondary-intercardinal).\n     * @returns {string} Compass point for supplied bearing.\n     *\n     * @example\n     *   const point = Dms.compassPoint(24);    // point = 'NNE'\n     *   const point = Dms.compassPoint(24, 1); // point = 'N'\n     */\n    static compassPoint(bearing, precision=3) {\n        if (![ 1, 2, 3 ].includes(Number(precision))) throw new RangeError(`invalid precision ‘${precision}’`);\n        // note precision could be extended to 4 for quarter-winds (eg NbNW), but I think they are little used\n\n        bearing = Dms.wrap360(bearing); // normalise to range 0..360°\n\n        const cardinals = [\n            'N', 'NNE', 'NE', 'ENE',\n            'E', 'ESE', 'SE', 'SSE',\n            'S', 'SSW', 'SW', 'WSW',\n            'W', 'WNW', 'NW', 'NNW' ];\n        const n = 4 * 2**(precision-1); // no of compass points at req’d precision (1=>4, 2=>8, 3=>16)\n        const cardinal = cardinals[Math.round(bearing*n/360)%n * 16/n];\n\n        return cardinal;\n    }\n\n\n    /**\n     * Constrain degrees to range -90..+90 (for latitude); e.g. -91 => -89, 91 => 89.\n     *\n     * @private\n     * @param {number} degrees\n     * @returns degrees within range -90..+90.\n     */\n    static wrap90(degrees) {\n        if (-90<=degrees && degrees<=90) return degrees; // avoid rounding due to arithmetic ops if within range\n\n        // latitude wrapping requires a triangle wave function; a general triangle wave is\n        //     f(x) = 4a/p ⋅ | (x-p/4)%p - p/2 | - a\n        // where a = amplitude, p = period, % = modulo; however, JavaScript '%' is a remainder operator\n        // not a modulo operator - for modulo, replace 'x%n' with '((x%n)+n)%n'\n        const x = degrees, a = 90, p = 360;\n        return 4*a/p * Math.abs((((x-p/4)%p)+p)%p - p/2) - a;\n    }\n\n    /**\n     * Constrain degrees to range -180..+180 (for longitude); e.g. -181 => 179, 181 => -179.\n     *\n     * @private\n     * @param {number} degrees\n     * @returns degrees within range -180..+180.\n     */\n    static wrap180(degrees) {\n        if (-180<=degrees && degrees<=180) return degrees; // avoid rounding due to arithmetic ops if within range\n\n        // longitude wrapping requires a sawtooth wave function; a general sawtooth wave is\n        //     f(x) = (2ax/p - p/2) % p - a\n        // where a = amplitude, p = period, % = modulo; however, JavaScript '%' is a remainder operator\n        // not a modulo operator - for modulo, replace 'x%n' with '((x%n)+n)%n'\n        const x = degrees, a = 180, p = 360;\n        return (((2*a*x/p - p/2)%p)+p)%p - a;\n    }\n\n    /**\n     * Constrain degrees to range 0..360 (for bearings); e.g. -1 => 359, 361 => 1.\n     *\n     * @private\n     * @param {number} degrees\n     * @returns degrees within range 0..360.\n     */\n    static wrap360(degrees) {\n        if (0<=degrees && degrees<360) return degrees; // avoid rounding due to arithmetic ops if within range\n\n        // bearing wrapping requires a sawtooth wave function with a vertical offset equal to the\n        // amplitude and a corresponding phase shift; this changes the general sawtooth wave function from\n        //     f(x) = (2ax/p - p/2) % p - a\n        // to\n        //     f(x) = (2ax/p) % p\n        // where a = amplitude, p = period, % = modulo; however, JavaScript '%' is a remainder operator\n        // not a modulo operator - for modulo, replace 'x%n' with '((x%n)+n)%n'\n        const x = degrees, a = 180, p = 360;\n        return (((2*a*x/p)%p)+p)%p;\n    }\n\n}\n\n\n// Extend Number object with methods to convert between degrees & radians\nNumber.prototype.toRadians = function() { return this * Math.PI / 180; };\nNumber.prototype.toDegrees = function() { return this * 180 / Math.PI; };\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport default Dms;\n","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Vector handling functions                                          (c) Chris Veness 2011-2019  */\n/*                                                                                   MIT Licence  */\n/* www.movable-type.co.uk/scripts/geodesy-library.html#vector3d                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n\n/**\n * Library of 3-d vector manipulation routines.\n *\n * @module vector3d\n */\n\n\n/* Vector3d - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\n/**\n * Functions for manipulating generic 3-d vectors.\n *\n * Functions return vectors as return results, so that operations can be chained.\n *\n * @example\n *   const v = v1.cross(v2).dot(v3) // ≡ v1×v2⋅v3\n */\nclass Vector3d {\n\n    /**\n     * Creates a 3-d vector.\n     *\n     * @param {number} x - X component of vector.\n     * @param {number} y - Y component of vector.\n     * @param {number} z - Z component of vector.\n     *\n     * @example\n     *   import Vector3d from '/js/geodesy/vector3d.js';\n     *   const v = new Vector3d(0.267, 0.535, 0.802);\n     */\n    constructor(x, y, z) {\n        if (isNaN(x) || isNaN(y) || isNaN(z)) throw new TypeError(`invalid vector [${x},${y},${z}]`);\n\n        this.x = Number(x);\n        this.y = Number(y);\n        this.z = Number(z);\n    }\n\n\n    /**\n     * Length (magnitude or norm) of ‘this’ vector.\n     *\n     * @returns {number} Magnitude of this vector.\n     */\n    get length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    /**\n     * Adds supplied vector to ‘this’ vector.\n     *\n     * @param   {Vector3d} v - Vector to be added to this vector.\n     * @returns {Vector3d} Vector representing sum of this and v.\n     */\n    plus(v) {\n        if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n\n        return new Vector3d(this.x + v.x, this.y + v.y, this.z + v.z);\n    }\n\n\n    /**\n     * Subtracts supplied vector from ‘this’ vector.\n     *\n     * @param   {Vector3d} v - Vector to be subtracted from this vector.\n     * @returns {Vector3d} Vector representing difference between this and v.\n     */\n    minus(v) {\n        if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n\n        return new Vector3d(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n\n\n    /**\n     * Multiplies ‘this’ vector by a scalar value.\n     *\n     * @param   {number}   x - Factor to multiply this vector by.\n     * @returns {Vector3d} Vector scaled by x.\n     */\n    times(x) {\n        if (isNaN(x)) throw new TypeError(`invalid scalar value ‘${x}’`);\n\n        return new Vector3d(this.x * x, this.y * x, this.z * x);\n    }\n\n\n    /**\n     * Divides ‘this’ vector by a scalar value.\n     *\n     * @param   {number}   x - Factor to divide this vector by.\n     * @returns {Vector3d} Vector divided by x.\n     */\n    dividedBy(x) {\n        if (isNaN(x)) throw new TypeError(`invalid scalar value ‘${x}’`);\n\n        return new Vector3d(this.x / x, this.y / x, this.z / x);\n    }\n\n\n    /**\n     * Multiplies ‘this’ vector by the supplied vector using dot (scalar) product.\n     *\n     * @param   {Vector3d} v - Vector to be dotted with this vector.\n     * @returns {number}   Dot product of ‘this’ and v.\n     */\n    dot(v) {\n        if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    }\n\n\n    /**\n     * Multiplies ‘this’ vector by the supplied vector using cross (vector) product.\n     *\n     * @param   {Vector3d} v - Vector to be crossed with this vector.\n     * @returns {Vector3d} Cross product of ‘this’ and v.\n     */\n    cross(v) {\n        if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n\n        const x = this.y * v.z - this.z * v.y;\n        const y = this.z * v.x - this.x * v.z;\n        const z = this.x * v.y - this.y * v.x;\n\n        return new Vector3d(x, y, z);\n    }\n\n\n    /**\n     * Negates a vector to point in the opposite direction.\n     *\n     * @returns {Vector3d} Negated vector.\n     */\n    negate() {\n        return new Vector3d(-this.x, -this.y, -this.z);\n    }\n\n\n    /**\n     * Normalizes a vector to its unit vector\n     * – if the vector is already unit or is zero magnitude, this is a no-op.\n     *\n     * @returns {Vector3d} Normalised version of this vector.\n     */\n    unit() {\n        const norm = this.length;\n        if (norm == 1) return this;\n        if (norm == 0) return this;\n\n        const x = this.x / norm;\n        const y = this.y / norm;\n        const z = this.z / norm;\n\n        return new Vector3d(x, y, z);\n    }\n\n\n    /**\n     * Calculates the angle between ‘this’ vector and supplied vector atan2(|p₁×p₂|, p₁·p₂) (or if\n     * (extra-planar) ‘n’ supplied then atan2(n·p₁×p₂, p₁·p₂).\n     *\n     * @param   {Vector3d} v - Vector whose angle is to be determined from ‘this’ vector.\n     * @param   {Vector3d} [n] - Plane normal: if supplied, angle is signed +ve if this->v is\n     *                     clockwise looking along n, -ve in opposite direction.\n     * @returns {number}   Angle (in radians) between this vector and supplied vector (in range 0..π\n     *                     if n not supplied, range -π..+π if n supplied).\n     */\n    angleTo(v, n=undefined) {\n        if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n        if (!(n instanceof Vector3d || n == undefined)) throw new TypeError('n is not Vector3d object');\n\n        // q.v. stackoverflow.com/questions/14066933#answer-16544330, but n·p₁×p₂ is numerically\n        // ill-conditioned, so just calculate sign to apply to |p₁×p₂|\n\n        // if n·p₁×p₂ is -ve, negate |p₁×p₂|\n        const sign = n==undefined || this.cross(v).dot(n)>=0 ? 1 : -1;\n\n        const sinθ = this.cross(v).length * sign;\n        const cosθ = this.dot(v);\n\n        return Math.atan2(sinθ, cosθ);\n    }\n\n\n    /**\n     * Rotates ‘this’ point around an axis by a specified angle.\n     *\n     * @param   {Vector3d} axis - The axis being rotated around.\n     * @param   {number}   angle - The angle of rotation (in degrees).\n     * @returns {Vector3d} The rotated point.\n     */\n    rotateAround(axis, angle) {\n        if (!(axis instanceof Vector3d)) throw new TypeError('axis is not Vector3d object');\n\n        const θ = angle.toRadians();\n\n        // en.wikipedia.org/wiki/Rotation_matrix#Rotation_matrix_from_axis_and_angle\n        // en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Quaternion-derived_rotation_matrix\n        const p = this.unit();\n        const a = axis.unit();\n\n        const s = Math.sin(θ);\n        const c = Math.cos(θ);\n        const t = 1-c;\n        const x = a.x, y = a.y, z = a.z;\n\n        const r = [ // rotation matrix for rotation about supplied axis\n            [ t*x*x + c,   t*x*y - s*z, t*x*z + s*y ],\n            [ t*x*y + s*z, t*y*y + c,   t*y*z - s*x ],\n            [ t*x*z - s*y, t*y*z + s*x, t*z*z + c   ],\n        ];\n\n        // multiply r × p\n        const rp = [\n            r[0][0]*p.x + r[0][1]*p.y + r[0][2]*p.z,\n            r[1][0]*p.x + r[1][1]*p.y + r[1][2]*p.z,\n            r[2][0]*p.x + r[2][1]*p.y + r[2][2]*p.z,\n        ];\n        const p2 = new Vector3d(rp[0], rp[1], rp[2]);\n\n        return p2;\n        // qv en.wikipedia.org/wiki/Rodrigues'_rotation_formula...\n    }\n\n\n    /**\n     * String representation of vector.\n     *\n     * @param   {number} [dp=3] - Number of decimal places to be used.\n     * @returns {string} Vector represented as [x,y,z].\n     */\n    toString(dp=3) {\n        return `[${this.x.toFixed(dp)},${this.y.toFixed(dp)},${this.z.toFixed(dp)}]`;\n    }\n\n}\n\n\n// Extend Number object with methods to convert between degrees & radians\nNumber.prototype.toRadians = function() { return this * Math.PI / 180; };\nNumber.prototype.toDegrees = function() { return this * 180 / Math.PI; };\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport default Vector3d;\n","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Geodesy tools for an ellipsoidal earth model                       (c) Chris Veness 2005-2022  */\n/*                                                                                   MIT Licence  */\n/* Core class for latlon-ellipsoidal-datum & latlon-ellipsoidal-referenceframe.                   */\n/*                                                                                                */\n/* www.movable-type.co.uk/scripts/latlong-convert-coords.html                                     */\n/* www.movable-type.co.uk/scripts/geodesy-library.html#latlon-ellipsoidal                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nimport Dms      from './dms.js';\nimport Vector3d from './vector3d.js';\n\n\n/**\n * A latitude/longitude point defines a geographic location on or above/below the earth’s surface,\n * measured in degrees from the equator & the International Reference Meridian and in metres above\n * the ellipsoid, and based on a given datum.\n *\n * As so much modern geodesy is based on WGS-84 (as used by GPS), this module includes WGS-84\n * ellipsoid parameters, and it has methods for converting geodetic (latitude/longitude) points to/from\n * geocentric cartesian points; the latlon-ellipsoidal-datum and latlon-ellipsoidal-referenceframe\n * modules provide transformation parameters for converting between historical datums and between\n * modern reference frames.\n *\n * This module is used for both trigonometric geodesy (eg latlon-ellipsoidal-vincenty) and n-vector\n * geodesy (eg latlon-nvector-ellipsoidal), and also for UTM/MGRS mapping.\n *\n * @module latlon-ellipsoidal\n */\n\n\n/*\n * Ellipsoid parameters; exposed through static getter below.\n *\n * The only ellipsoid defined is WGS84, for use in utm/mgrs, vincenty, nvector.\n */\nconst ellipsoids = {\n    WGS84: { a: 6378137, b: 6356752.314245, f: 1/298.257223563 },\n};\n\n\n/*\n * Datums; exposed through static getter below.\n *\n * The only datum defined is WGS84, for use in utm/mgrs, vincenty, nvector.\n */\nconst datums = {\n    WGS84: { ellipsoid: ellipsoids.WGS84 },\n};\n\n\n// freeze static properties\nObject.freeze(ellipsoids.WGS84);\nObject.freeze(datums.WGS84);\n\n\n/* LatLonEllipsoidal - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n\n/**\n * Latitude/longitude points on an ellipsoidal model earth, with ellipsoid parameters and methods\n * for converting points to/from cartesian (ECEF) coordinates.\n *\n * This is the core class, which will usually be used via LatLonEllipsoidal_Datum or\n * LatLonEllipsoidal_ReferenceFrame.\n */\nclass LatLonEllipsoidal {\n\n    /**\n     * Creates a geodetic latitude/longitude point on a (WGS84) ellipsoidal model earth.\n     *\n     * @param  {number} lat - Latitude (in degrees).\n     * @param  {number} lon - Longitude (in degrees).\n     * @param  {number} [height=0] - Height above ellipsoid in metres.\n     * @throws {TypeError} Invalid lat/lon/height.\n     *\n     * @example\n     *   import LatLon from '/js/geodesy/latlon-ellipsoidal.js';\n     *   const p = new LatLon(51.47788, -0.00147, 17);\n     */\n    constructor(lat, lon, height=0) {\n        if (isNaN(lat) || lat == null) throw new TypeError(`invalid lat ‘${lat}’`);\n        if (isNaN(lon) || lon == null) throw new TypeError(`invalid lon ‘${lon}’`);\n        if (isNaN(height) || height == null) throw new TypeError(`invalid height ‘${height}’`);\n\n        this._lat = Dms.wrap90(Number(lat));\n        this._lon = Dms.wrap180(Number(lon));\n        this._height = Number(height);\n    }\n\n\n    /**\n     * Latitude in degrees north from equator (including aliases lat, latitude): can be set as\n     * numeric or hexagesimal (deg-min-sec); returned as numeric.\n     */\n    get lat()       { return this._lat; }\n    get latitude()  { return this._lat; }\n    set lat(lat) {\n        this._lat = isNaN(lat) ? Dms.wrap90(Dms.parse(lat)) : Dms.wrap90(Number(lat));\n        if (isNaN(this._lat)) throw new TypeError(`invalid lat ‘${lat}’`);\n    }\n    set latitude(lat) {\n        this._lat = isNaN(lat) ? Dms.wrap90(Dms.parse(lat)) : Dms.wrap90(Number(lat));\n        if (isNaN(this._lat)) throw new TypeError(`invalid latitude ‘${lat}’`);\n    }\n\n    /**\n     * Longitude in degrees east from international reference meridian (including aliases lon, lng,\n     * longitude): can be set as numeric or hexagesimal (deg-min-sec); returned as numeric.\n     */\n    get lon()       { return this._lon; }\n    get lng()       { return this._lon; }\n    get longitude() { return this._lon; }\n    set lon(lon) {\n        this._lon = isNaN(lon) ? Dms.wrap180(Dms.parse(lon)) : Dms.wrap180(Number(lon));\n        if (isNaN(this._lon)) throw new TypeError(`invalid lon ‘${lon}’`);\n    }\n    set lng(lon) {\n        this._lon = isNaN(lon) ? Dms.wrap180(Dms.parse(lon)) : Dms.wrap180(Number(lon));\n        if (isNaN(this._lon)) throw new TypeError(`invalid lng ‘${lon}’`);\n    }\n    set longitude(lon) {\n        this._lon = isNaN(lon) ? Dms.wrap180(Dms.parse(lon)) : Dms.wrap180(Number(lon));\n        if (isNaN(this._lon)) throw new TypeError(`invalid longitude ‘${lon}’`);\n    }\n\n    /**\n     * Height in metres above ellipsoid.\n     */\n    get height()       { return this._height; }\n    set height(height) { this._height = Number(height); if (isNaN(this._height)) throw new TypeError(`invalid height ‘${height}’`); }\n\n\n    /**\n     * Datum.\n     *\n     * Note this is replicated within LatLonEllipsoidal in order that a LatLonEllipsoidal object can\n     * be monkey-patched to look like a LatLonEllipsoidal_Datum, for Vincenty calculations on\n     * different ellipsoids.\n     *\n     * @private\n     */\n    get datum()      { return this._datum; }\n    set datum(datum) { this._datum = datum; }\n\n\n    /**\n     * Ellipsoids with their parameters; this module only defines WGS84 parameters a = 6378137, b =\n     * 6356752.314245, f = 1/298.257223563.\n     *\n     * @example\n     *   const a = LatLon.ellipsoids.WGS84.a; // 6378137\n     */\n    static get ellipsoids() {\n        return ellipsoids;\n    }\n\n    /**\n     * Datums; this module only defines WGS84 datum, hence no datum transformations.\n     *\n     * @example\n     *   const a = LatLon.datums.WGS84.ellipsoid.a; // 6377563.396\n     */\n    static get datums() {\n        return datums;\n    }\n\n\n    /**\n     * Parses a latitude/longitude point from a variety of formats.\n     *\n     * Latitude & longitude (in degrees) can be supplied as two separate parameters, as a single\n     * comma-separated lat/lon string, or as a single object with { lat, lon } or GeoJSON properties.\n     *\n     * The latitude/longitude values may be numeric or strings; they may be signed decimal or\n     * deg-min-sec (hexagesimal) suffixed by compass direction (NSEW); a variety of separators are\n     * accepted. Examples -3.62, '3 37 12W', '3°37′12″W'.\n     *\n     * Thousands/decimal separators must be comma/dot; use Dms.fromLocale to convert locale-specific\n     * thousands/decimal separators.\n     *\n     * @param   {number|string|Object} lat|latlon - Latitude (in degrees), or comma-separated lat/lon, or lat/lon object.\n     * @param   {number}               [lon]      - Longitude (in degrees).\n     * @param   {number}               [height=0] - Height above ellipsoid in metres.\n     * @returns {LatLon} Latitude/longitude point on WGS84 ellipsoidal model earth.\n     * @throws  {TypeError} Invalid coordinate.\n     *\n     * @example\n     *   const p1 = LatLon.parse(51.47788, -0.00147);              // numeric pair\n     *   const p2 = LatLon.parse('51°28′40″N, 000°00′05″W', 17);   // dms string + height\n     *   const p3 = LatLon.parse({ lat: 52.205, lon: 0.119 }, 17); // { lat, lon } object numeric + height\n     */\n    static parse(...args) {\n        if (args.length == 0) throw new TypeError('invalid (empty) point');\n\n        let lat=undefined, lon=undefined, height=undefined;\n\n        // single { lat, lon } object\n        if (typeof args[0]=='object' && (args.length==1 || !isNaN(parseFloat(args[1])))) {\n            const ll = args[0];\n            if (ll.type == 'Point' && Array.isArray(ll.coordinates)) { // GeoJSON\n                [ lon, lat, height ] = ll.coordinates;\n                height = height || 0;\n            } else { // regular { lat, lon } object\n                if (ll.latitude  != undefined) lat = ll.latitude;\n                if (ll.lat       != undefined) lat = ll.lat;\n                if (ll.longitude != undefined) lon = ll.longitude;\n                if (ll.lng       != undefined) lon = ll.lng;\n                if (ll.lon       != undefined) lon = ll.lon;\n                if (ll.height    != undefined) height = ll.height;\n                lat = Dms.wrap90(Dms.parse(lat));\n                lon = Dms.wrap180(Dms.parse(lon));\n            }\n            if (args[1] != undefined) height = args[1];\n            if (isNaN(lat) || isNaN(lon)) throw new TypeError(`invalid point ‘${JSON.stringify(args[0])}’`);\n        }\n\n        // single comma-separated lat/lon\n        if (typeof args[0] == 'string' && args[0].split(',').length == 2) {\n            [ lat, lon ] = args[0].split(',');\n            lat = Dms.wrap90(Dms.parse(lat));\n            lon = Dms.wrap180(Dms.parse(lon));\n            height = args[1] || 0;\n            if (isNaN(lat) || isNaN(lon)) throw new TypeError(`invalid point ‘${args[0]}’`);\n        }\n\n        // regular (lat, lon) arguments\n        if (lat==undefined && lon==undefined) {\n            [ lat, lon ] = args;\n            lat = Dms.wrap90(Dms.parse(lat));\n            lon = Dms.wrap180(Dms.parse(lon));\n            height = args[2] || 0;\n            if (isNaN(lat) || isNaN(lon)) throw new TypeError(`invalid point ‘${args.toString()}’`);\n        }\n\n        return new this(lat, lon, height); // 'new this' as may return subclassed types\n    }\n\n\n    /**\n     * Converts ‘this’ point from (geodetic) latitude/longitude coordinates to (geocentric)\n     * cartesian (x/y/z) coordinates.\n     *\n     * @returns {Cartesian} Cartesian point equivalent to lat/lon point, with x, y, z in metres from\n     *   earth centre.\n     */\n    toCartesian() {\n        // x = (ν+h)⋅cosφ⋅cosλ, y = (ν+h)⋅cosφ⋅sinλ, z = (ν⋅(1-e²)+h)⋅sinφ\n        // where ν = a/√(1−e²⋅sinφ⋅sinφ), e² = (a²-b²)/a² or (better conditioned) 2⋅f-f²\n        const ellipsoid = this.datum\n            ? this.datum.ellipsoid\n            : this.referenceFrame ? this.referenceFrame.ellipsoid : ellipsoids.WGS84;\n\n        const φ = this.lat.toRadians();\n        const λ = this.lon.toRadians();\n        const h = this.height;\n        const { a, f } = ellipsoid;\n\n        const sinφ = Math.sin(φ), cosφ = Math.cos(φ);\n        const sinλ = Math.sin(λ), cosλ = Math.cos(λ);\n\n        const eSq = 2*f - f*f;                      // 1st eccentricity squared ≡ (a²-b²)/a²\n        const ν = a / Math.sqrt(1 - eSq*sinφ*sinφ); // radius of curvature in prime vertical\n\n        const x = (ν+h) * cosφ * cosλ;\n        const y = (ν+h) * cosφ * sinλ;\n        const z = (ν*(1-eSq)+h) * sinφ;\n\n        return new Cartesian(x, y, z);\n    }\n\n\n    /**\n     * Checks if another point is equal to ‘this’ point.\n     *\n     * @param   {LatLon} point - Point to be compared against this point.\n     * @returns {bool} True if points have identical latitude, longitude, height, and datum/referenceFrame.\n     * @throws  {TypeError} Invalid point.\n     *\n     * @example\n     *   const p1 = new LatLon(52.205, 0.119);\n     *   const p2 = new LatLon(52.205, 0.119);\n     *   const equal = p1.equals(p2); // true\n     */\n    equals(point) {\n        if (!(point instanceof LatLonEllipsoidal)) throw new TypeError(`invalid point ‘${point}’`);\n\n        if (Math.abs(this.lat - point.lat) > Number.EPSILON) return false;\n        if (Math.abs(this.lon - point.lon) > Number.EPSILON) return false;\n        if (Math.abs(this.height - point.height) > Number.EPSILON) return false;\n        if (this.datum != point.datum) return false;\n        if (this.referenceFrame != point.referenceFrame) return false;\n        if (this.epoch != point.epoch) return false;\n\n        return true;\n    }\n\n\n    /**\n     * Returns a string representation of ‘this’ point, formatted as degrees, degrees+minutes, or\n     * degrees+minutes+seconds.\n     *\n     * @param   {string} [format=d] - Format point as 'd', 'dm', 'dms', or 'n' for signed numeric.\n     * @param   {number} [dp=4|2|0] - Number of decimal places to use: default 4 for d, 2 for dm, 0 for dms.\n     * @param   {number} [dpHeight=null] - Number of decimal places to use for height; default is no height display.\n     * @returns {string} Comma-separated formatted latitude/longitude.\n     * @throws  {RangeError} Invalid format.\n     *\n     * @example\n     *   const greenwich = new LatLon(51.47788, -0.00147, 46);\n     *   const d = greenwich.toString();                        // 51.4779°N, 000.0015°W\n     *   const dms = greenwich.toString('dms', 2);              // 51°28′40″N, 000°00′05″W\n     *   const [lat, lon] = greenwich.toString('n').split(','); // 51.4779, -0.0015\n     *   const dmsh = greenwich.toString('dms', 0, 0);          // 51°28′40″N, 000°00′06″W +46m\n     */\n    toString(format='d', dp=undefined, dpHeight=null) {\n        // note: explicitly set dp to undefined for passing through to toLat/toLon\n        if (![ 'd', 'dm', 'dms', 'n' ].includes(format)) throw new RangeError(`invalid format ‘${format}’`);\n\n        const height = (this.height>=0 ? ' +' : ' ') + this.height.toFixed(dpHeight) + 'm';\n        if (format == 'n') { // signed numeric degrees\n            if (dp == undefined) dp = 4;\n            const lat = this.lat.toFixed(dp);\n            const lon = this.lon.toFixed(dp);\n            return `${lat}, ${lon}${dpHeight==null ? '' : height}`;\n        }\n\n        const lat = Dms.toLat(this.lat, format, dp);\n        const lon = Dms.toLon(this.lon, format, dp);\n\n        return `${lat}, ${lon}${dpHeight==null ? '' : height}`;\n    }\n\n}\n\n\n/* Cartesian  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\n/**\n * ECEF (earth-centered earth-fixed) geocentric cartesian coordinates.\n *\n * @extends Vector3d\n */\nclass Cartesian extends Vector3d {\n\n    /**\n     * Creates cartesian coordinate representing ECEF (earth-centric earth-fixed) point.\n     *\n     * @param {number} x - X coordinate in metres (=> 0°N,0°E).\n     * @param {number} y - Y coordinate in metres (=> 0°N,90°E).\n     * @param {number} z - Z coordinate in metres (=> 90°N).\n     *\n     * @example\n     *   import { Cartesian } from '/js/geodesy/latlon-ellipsoidal.js';\n     *   const coord = new Cartesian(3980581.210, -111.159, 4966824.522);\n     */\n    constructor(x, y, z) {\n        super(x, y, z); // arguably redundant constructor, but specifies units & axes\n    }\n\n\n    /**\n     * Converts ‘this’ (geocentric) cartesian (x/y/z) coordinate to (geodetic) latitude/longitude\n     * point on specified ellipsoid.\n     *\n     * Uses Bowring’s (1985) formulation for μm precision in concise form; ‘The accuracy of geodetic\n     * latitude and height equations’, B R Bowring, Survey Review vol 28, 218, Oct 1985.\n     *\n     * @param   {LatLon.ellipsoids} [ellipsoid=WGS84] - Ellipsoid to use when converting point.\n     * @returns {LatLon} Latitude/longitude point defined by cartesian coordinates, on given ellipsoid.\n     * @throws  {TypeError} Invalid ellipsoid.\n     *\n     * @example\n     *   const c = new Cartesian(4027893.924, 307041.993, 4919474.294);\n     *   const p = c.toLatLon(); // 50.7978°N, 004.3592°E\n     */\n    toLatLon(ellipsoid=ellipsoids.WGS84) {\n        // note ellipsoid is available as a parameter for when toLatLon gets subclassed to\n        // Ellipsoidal_Datum / Ellipsoidal_Referenceframe.\n        if (!ellipsoid || !ellipsoid.a) throw new TypeError(`invalid ellipsoid ‘${ellipsoid}’`);\n\n        const { x, y, z } = this;\n        const { a, b, f } = ellipsoid;\n\n        const e2 = 2*f - f*f;           // 1st eccentricity squared ≡ (a²−b²)/a²\n        const ε2 = e2 / (1-e2);         // 2nd eccentricity squared ≡ (a²−b²)/b²\n        const p = Math.sqrt(x*x + y*y); // distance from minor axis\n        const R = Math.sqrt(p*p + z*z); // polar radius\n\n        // parametric latitude (Bowring eqn.17, replacing tanβ = z·a / p·b)\n        const tanβ = (b*z)/(a*p) * (1+ε2*b/R);\n        const sinβ = tanβ / Math.sqrt(1+tanβ*tanβ);\n        const cosβ = sinβ / tanβ;\n\n        // geodetic latitude (Bowring eqn.18: tanφ = z+ε²⋅b⋅sin³β / p−e²⋅cos³β)\n        const φ = isNaN(cosβ) ? 0 : Math.atan2(z + ε2*b*sinβ*sinβ*sinβ, p - e2*a*cosβ*cosβ*cosβ);\n\n        // longitude\n        const λ = Math.atan2(y, x);\n\n        // height above ellipsoid (Bowring eqn.7)\n        const sinφ = Math.sin(φ), cosφ = Math.cos(φ);\n        const ν = a / Math.sqrt(1-e2*sinφ*sinφ); // length of the normal terminated by the minor axis\n        const h = p*cosφ + z*sinφ - (a*a/ν);\n\n        const point = new LatLonEllipsoidal(φ.toDegrees(), λ.toDegrees(), h);\n\n        return point;\n    }\n\n\n    /**\n     * Returns a string representation of ‘this’ cartesian point.\n     *\n     * @param   {number} [dp=0] - Number of decimal places to use.\n     * @returns {string} Comma-separated latitude/longitude.\n     */\n    toString(dp=0) {\n        const x = this.x.toFixed(dp), y = this.y.toFixed(dp), z = this.z.toFixed(dp);\n        return `[${x},${y},${z}]`;\n    }\n\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport { LatLonEllipsoidal as default, Cartesian, Vector3d, Dms };\n","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Geodesy tools for conversions between (historical) datums          (c) Chris Veness 2005-2019  */\n/*                                                                                   MIT Licence  */\n/* www.movable-type.co.uk/scripts/latlong-convert-coords.html                                     */\n/* www.movable-type.co.uk/scripts/geodesy-library.html#latlon-ellipsoidal-datum                  */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nimport LatLonEllipsoidal, { Cartesian, Dms } from './latlon-ellipsoidal.js';\n\n\n/**\n * Historical geodetic datums: a latitude/longitude point defines a geographic location on or\n * above/below the  earth’s surface, measured in degrees from the equator & the International\n * Reference Meridian and metres above the ellipsoid, and based on a given datum. The datum is\n * based on a reference ellipsoid and tied to geodetic survey reference points.\n *\n * Modern geodesy is generally based on the WGS84 datum (as used for instance by GPS systems), but\n * previously various reference ellipsoids and datum references were used.\n *\n * This module extends the core latlon-ellipsoidal module to include ellipsoid parameters and datum\n * transformation parameters, and methods for converting between different (generally historical)\n * datums.\n *\n * It can be used for UK Ordnance Survey mapping (OS National Grid References are still based on the\n * otherwise historical OSGB36 datum), as well as for historical purposes.\n *\n * q.v. Ordnance Survey ‘A guide to coordinate systems in Great Britain’ Section 6,\n * www.ordnancesurvey.co.uk/docs/support/guide-coordinate-systems-great-britain.pdf, and also\n * www.ordnancesurvey.co.uk/blog/2014/12/2.\n *\n * @module latlon-ellipsoidal-datum\n */\n\n\n/*\n * Ellipsoid parameters; exposed through static getter below.\n */\nconst ellipsoids = {\n    WGS84:         { a: 6378137,     b: 6356752.314245, f: 1/298.257223563 },\n    Airy1830:      { a: 6377563.396, b: 6356256.909,    f: 1/299.3249646   },\n    AiryModified:  { a: 6377340.189, b: 6356034.448,    f: 1/299.3249646   },\n    Bessel1841:    { a: 6377397.155, b: 6356078.962818, f: 1/299.1528128   },\n    Clarke1866:    { a: 6378206.4,   b: 6356583.8,      f: 1/294.978698214 },\n    Clarke1880IGN: { a: 6378249.2,   b: 6356515.0,      f: 1/293.466021294 },\n    GRS80:         { a: 6378137,     b: 6356752.314140, f: 1/298.257222101 },\n    Intl1924:      { a: 6378388,     b: 6356911.946,    f: 1/297           }, // aka Hayford\n    WGS72:         { a: 6378135,     b: 6356750.5,      f: 1/298.26        },\n};\n\n\n/*\n * Datums; exposed through static getter below.\n */\nconst datums = {\n    // transforms: t in metres, s in ppm, r in arcseconds              tx       ty        tz       s        rx        ry        rz\n    ED50:       { ellipsoid: ellipsoids.Intl1924,      transform: [   89.5,    93.8,    123.1,    -1.2,     0.0,      0.0,      0.156    ] }, // epsg.io/1311\n    ETRS89:     { ellipsoid: ellipsoids.GRS80,         transform: [    0,       0,        0,       0,       0,        0,        0        ] }, // epsg.io/1149; @ 1-metre level\n    Irl1975:    { ellipsoid: ellipsoids.AiryModified,  transform: [ -482.530, 130.596, -564.557,  -8.150,   1.042,    0.214,    0.631    ] }, // epsg.io/1954\n    NAD27:      { ellipsoid: ellipsoids.Clarke1866,    transform: [    8,    -160,     -176,       0,       0,        0,        0        ] },\n    NAD83:      { ellipsoid: ellipsoids.GRS80,         transform: [    0.9956, -1.9103,  -0.5215, -0.00062, 0.025915, 0.009426, 0.011599 ] },\n    NTF:        { ellipsoid: ellipsoids.Clarke1880IGN, transform: [  168,      60,     -320,       0,       0,        0,        0        ] },\n    OSGB36:     { ellipsoid: ellipsoids.Airy1830,      transform: [ -446.448, 125.157, -542.060,  20.4894, -0.1502,  -0.2470,  -0.8421   ] }, // epsg.io/1314\n    Potsdam:    { ellipsoid: ellipsoids.Bessel1841,    transform: [ -582,    -105,     -414,      -8.3,     1.04,     0.35,    -3.08     ] },\n    TokyoJapan: { ellipsoid: ellipsoids.Bessel1841,    transform: [  148,    -507,     -685,       0,       0,        0,        0        ] },\n    WGS72:      { ellipsoid: ellipsoids.WGS72,         transform: [    0,       0,       -4.5,    -0.22,    0,        0,        0.554    ] },\n    WGS84:      { ellipsoid: ellipsoids.WGS84,         transform: [    0.0,     0.0,      0.0,     0.0,     0.0,      0.0,      0.0      ] },\n};\n/* sources:\n * - ED50:       www.gov.uk/guidance/oil-and-gas-petroleum-operations-notices#pon-4\n * - Irl1975:    www.osi.ie/wp-content/uploads/2015/05/transformations_booklet.pdf\n * - NAD27:      en.wikipedia.org/wiki/Helmert_transformation\n * - NAD83:      www.uvm.edu/giv/resources/WGS84_NAD83.pdf [strictly, WGS84(G1150) -> NAD83(CORS96) @ epoch 1997.0]\n *               (note NAD83(1986) ≡ WGS84(Original); confluence.qps.nl/pages/viewpage.action?pageId=29855173)\n * - NTF:        Nouvelle Triangulation Francaise geodesie.ign.fr/contenu/fichiers/Changement_systeme_geodesique.pdf\n * - OSGB36:     www.ordnancesurvey.co.uk/docs/support/guide-coordinate-systems-great-britain.pdf\n * - Potsdam:    kartoweb.itc.nl/geometrics/Coordinate%20transformations/coordtrans.html\n * - TokyoJapan: www.geocachingtoolbox.com?page=datumEllipsoidDetails\n * - WGS72:      www.icao.int/safety/pbn/documentation/eurocontrol/eurocontrol wgs 84 implementation manual.pdf\n *\n * more transform parameters are available from earth-info.nga.mil/GandG/coordsys/datums/NATO_DT.pdf,\n * www.fieldenmaps.info/cconv/web/cconv_params.js\n */\n/* note:\n * - ETRS89 reference frames are coincident with WGS-84 at epoch 1989.0 (ie null transform) at the one metre level.\n */\n\n\n// freeze static properties\nObject.keys(ellipsoids).forEach(e => Object.freeze(ellipsoids[e]));\nObject.keys(datums).forEach(d => { Object.freeze(datums[d]); Object.freeze(datums[d].transform); });\n\n\n/* LatLon - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\n/**\n * Latitude/longitude points on an ellipsoidal model earth, with ellipsoid parameters and methods\n * for converting between datums and to geocentric (ECEF) cartesian coordinates.\n *\n * @extends LatLonEllipsoidal\n */\nclass LatLonEllipsoidal_Datum extends LatLonEllipsoidal {\n\n    /**\n     * Creates a geodetic latitude/longitude point on an ellipsoidal model earth using given datum.\n     *\n     * @param {number} lat - Latitude (in degrees).\n     * @param {number} lon - Longitude (in degrees).\n     * @param {number} [height=0] - Height above ellipsoid in metres.\n     * @param {LatLon.datums} datum - Datum this point is defined within.\n     *\n     * @example\n     *   import LatLon from '/js/geodesy/latlon-ellipsoidal-datum.js';\n     *   const p = new LatLon(53.3444, -6.2577, 17, LatLon.datums.Irl1975);\n     */\n    constructor(lat, lon, height=0, datum=datums.WGS84) {\n        if (!datum || datum.ellipsoid==undefined) throw new TypeError(`unrecognised datum ‘${datum}’`);\n\n        super(lat, lon, height);\n\n        this._datum = datum;\n    }\n\n\n    /**\n     * Datum this point is defined within.\n     */\n    get datum() {\n        return this._datum;\n    }\n\n\n    /**\n     * Ellipsoids with their parameters; semi-major axis (a), semi-minor axis (b), and flattening (f).\n     *\n     * Flattening f = (a−b)/a; at least one of these parameters is derived from defining constants.\n     *\n     * @example\n     *   const a = LatLon.ellipsoids.Airy1830.a; // 6377563.396\n     */\n    static get ellipsoids() {\n        return ellipsoids;\n    }\n\n\n    /**\n     * Datums; with associated ellipsoid, and Helmert transform parameters to convert from WGS-84\n     * into given datum.\n     *\n     * Note that precision of various datums will vary, and WGS-84 (original) is not defined to be\n     * accurate to better than ±1 metre. No transformation should be assumed to be accurate to\n     * better than a metre, for many datums somewhat less.\n     *\n     * This is a small sample of commoner datums from a large set of historical datums. I will add\n     * new datums on request.\n     *\n     * @example\n     *   const a = LatLon.datums.OSGB36.ellipsoid.a;                    // 6377563.396\n     *   const tx = LatLon.datums.OSGB36.transform;                     // [ tx, ty, tz, s, rx, ry, rz ]\n     *   const availableDatums = Object.keys(LatLon.datums).join(', '); // ED50, Irl1975, NAD27, ...\n     */\n    static get datums() {\n        return datums;\n    }\n\n\n    // note instance datum getter/setters are in LatLonEllipsoidal\n\n\n    /**\n     * Parses a latitude/longitude point from a variety of formats.\n     *\n     * Latitude & longitude (in degrees) can be supplied as two separate parameters, as a single\n     * comma-separated lat/lon string, or as a single object with { lat, lon } or GeoJSON properties.\n     *\n     * The latitude/longitude values may be numeric or strings; they may be signed decimal or\n     * deg-min-sec (hexagesimal) suffixed by compass direction (NSEW); a variety of separators are\n     * accepted. Examples -3.62, '3 37 12W', '3°37′12″W'.\n     *\n     * Thousands/decimal separators must be comma/dot; use Dms.fromLocale to convert locale-specific\n     * thousands/decimal separators.\n     *\n     * @param   {number|string|Object} lat|latlon - Geodetic Latitude (in degrees) or comma-separated lat/lon or lat/lon object.\n     * @param   {number}               [lon] - Longitude in degrees.\n     * @param   {number}               [height=0] - Height above ellipsoid in metres.\n     * @param   {LatLon.datums}        [datum=WGS84] - Datum this point is defined within.\n     * @returns {LatLon} Latitude/longitude point on ellipsoidal model earth using given datum.\n     * @throws  {TypeError} Unrecognised datum.\n     *\n     * @example\n     *   const p = LatLon.parse('51.47736, 0.0000', 0, LatLon.datums.OSGB36);\n     */\n    static parse(...args) {\n        let datum = datums.WGS84;\n\n        // if the last argument is a datum, use that, otherwise use default WGS-84\n        if (args.length==4 || (args.length==3 && typeof args[2] == 'object')) datum = args.pop();\n\n        if (!datum || datum.ellipsoid==undefined) throw new TypeError(`unrecognised datum ‘${datum}’`);\n\n        const point = super.parse(...args);\n\n        point._datum = datum;\n\n        return point;\n    }\n\n\n    /**\n     * Converts ‘this’ lat/lon coordinate to new coordinate system.\n     *\n     * @param   {LatLon.datums} toDatum - Datum this coordinate is to be converted to.\n     * @returns {LatLon} This point converted to new datum.\n     * @throws  {TypeError} Unrecognised datum.\n     *\n     * @example\n     *   const pWGS84 = new LatLon(51.47788, -0.00147, 0, LatLon.datums.WGS84);\n     *   const pOSGB = pWGS84.convertDatum(LatLon.datums.OSGB36); // 51.4773°N, 000.0001°E\n     */\n    convertDatum(toDatum) {\n        if (!toDatum || toDatum.ellipsoid==undefined) throw new TypeError(`unrecognised datum ‘${toDatum}’`);\n\n        const oldCartesian = this.toCartesian();                 // convert geodetic to cartesian\n        const newCartesian = oldCartesian.convertDatum(toDatum); // convert datum\n        const newLatLon = newCartesian.toLatLon();               // convert cartesian back to geodetic\n\n        return newLatLon;\n    }\n\n\n    /**\n     * Converts ‘this’ point from (geodetic) latitude/longitude coordinates to (geocentric) cartesian\n     * (x/y/z) coordinates, based on the same datum.\n     *\n     * Shadow of LatLonEllipsoidal.toCartesian(), returning Cartesian augmented with\n     * LatLonEllipsoidal_Datum methods/properties.\n     *\n     * @returns {Cartesian} Cartesian point equivalent to lat/lon point, with x, y, z in metres from\n     *   earth centre, augmented with reference frame conversion methods and properties.\n     */\n    toCartesian() {\n        const cartesian = super.toCartesian();\n        const cartesianDatum = new Cartesian_Datum(cartesian.x, cartesian.y, cartesian.z, this.datum);\n        return cartesianDatum;\n    }\n\n}\n\n\n/* Cartesian  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\n/**\n * Augments Cartesian with datum the cooordinate is based on, and methods to convert between datums\n * (using Helmert 7-parameter transforms) and to convert cartesian to geodetic latitude/longitude\n * point.\n *\n * @extends Cartesian\n */\nclass Cartesian_Datum extends Cartesian {\n\n    /**\n     * Creates cartesian coordinate representing ECEF (earth-centric earth-fixed) point, on a given\n     * datum. The datum will identify the primary meridian (for the x-coordinate), and is also\n     * useful in transforming to/from geodetic (lat/lon) coordinates.\n     *\n     * @param  {number} x - X coordinate in metres (=> 0°N,0°E).\n     * @param  {number} y - Y coordinate in metres (=> 0°N,90°E).\n     * @param  {number} z - Z coordinate in metres (=> 90°N).\n     * @param  {LatLon.datums} [datum] - Datum this coordinate is defined within.\n     * @throws {TypeError} Unrecognised datum.\n     *\n     * @example\n     *   import { Cartesian } from '/js/geodesy/latlon-ellipsoidal-datum.js';\n     *   const coord = new Cartesian(3980581.210, -111.159, 4966824.522);\n     */\n    constructor(x, y, z, datum=undefined) {\n        if (datum && datum.ellipsoid==undefined) throw new TypeError(`unrecognised datum ‘${datum}’`);\n\n        super(x, y, z);\n\n        if (datum) this._datum = datum;\n    }\n\n\n    /**\n     * Datum this point is defined within.\n     */\n    get datum() {\n        return this._datum;\n    }\n    set datum(datum) {\n        if (!datum || datum.ellipsoid==undefined) throw new TypeError(`unrecognised datum ‘${datum}’`);\n        this._datum = datum;\n    }\n\n\n    /**\n     * Converts ‘this’ (geocentric) cartesian (x/y/z) coordinate to (geodetic) latitude/longitude\n     * point (based on the same datum, or WGS84 if unset).\n     *\n     * Shadow of Cartesian.toLatLon(), returning LatLon augmented with LatLonEllipsoidal_Datum\n     * methods convertDatum, toCartesian, etc.\n     *\n     * @returns {LatLon} Latitude/longitude point defined by cartesian coordinates.\n     * @throws  {TypeError} Unrecognised datum\n     *\n     * @example\n     *   const c = new Cartesian(4027893.924, 307041.993, 4919474.294);\n     *   const p = c.toLatLon(); // 50.7978°N, 004.3592°E\n     */\n    toLatLon(deprecatedDatum=undefined) {\n        if (deprecatedDatum) {\n            console.info('datum parameter to Cartesian_Datum.toLatLon is deprecated: set datum before calling toLatLon()');\n            this.datum = deprecatedDatum;\n        }\n        const datum = this.datum || datums.WGS84;\n        if (!datum || datum.ellipsoid==undefined) throw new TypeError(`unrecognised datum ‘${datum}’`);\n\n        const latLon = super.toLatLon(datum.ellipsoid); // TODO: what if datum is not geocentric?\n        const point = new LatLonEllipsoidal_Datum(latLon.lat, latLon.lon, latLon.height, this.datum);\n        return point;\n    }\n\n\n    /**\n     * Converts ‘this’ cartesian coordinate to new datum using Helmert 7-parameter transformation.\n     *\n     * @param   {LatLon.datums} toDatum - Datum this coordinate is to be converted to.\n     * @returns {Cartesian} This point converted to new datum.\n     * @throws  {Error} Undefined datum.\n     *\n     * @example\n     *   const c = new Cartesian(3980574.247, -102.127, 4966830.065, LatLon.datums.OSGB36);\n     *   c.convertDatum(LatLon.datums.Irl1975); // [??,??,??]\n     */\n    convertDatum(toDatum) {\n        // TODO: what if datum is not geocentric?\n        if (!toDatum || toDatum.ellipsoid == undefined) throw new TypeError(`unrecognised datum ‘${toDatum}’`);\n        if (!this.datum) throw new TypeError('cartesian coordinate has no datum');\n\n        let oldCartesian = null;\n        let transform = null;\n\n        if (this.datum == undefined || this.datum == datums.WGS84) {\n            // converting from WGS 84\n            oldCartesian = this;\n            transform = toDatum.transform;\n        }\n        if (toDatum == datums.WGS84) {\n            // converting to WGS 84; use inverse transform\n            oldCartesian = this;\n            transform = this.datum.transform.map(p => -p);\n        }\n        if (transform == null) {\n            // neither this.datum nor toDatum are WGS84: convert this to WGS84 first\n            oldCartesian = this.convertDatum(datums.WGS84);\n            transform = toDatum.transform;\n        }\n\n        const newCartesian = oldCartesian.applyTransform(transform);\n        newCartesian.datum = toDatum;\n\n        return newCartesian;\n    }\n\n\n    /**\n     * Applies Helmert 7-parameter transformation to ‘this’ coordinate using transform parameters t.\n     *\n     * This is used in converting datums (geodetic->cartesian, apply transform, cartesian->geodetic).\n     *\n     * @private\n     * @param   {number[]} t - Transformation to apply to this coordinate.\n     * @returns {Cartesian} Transformed point.\n     */\n    applyTransform(t)   {\n        // this point\n        const { x: x1, y: y1, z: z1 } = this;\n\n        // transform parameters\n        const tx = t[0];                    // x-shift in metres\n        const ty = t[1];                    // y-shift in metres\n        const tz = t[2];                    // z-shift in metres\n        const s  = t[3]/1e6 + 1;            // scale: normalise parts-per-million to (s+1)\n        const rx = (t[4]/3600).toRadians(); // x-rotation: normalise arcseconds to radians\n        const ry = (t[5]/3600).toRadians(); // y-rotation: normalise arcseconds to radians\n        const rz = (t[6]/3600).toRadians(); // z-rotation: normalise arcseconds to radians\n\n        // apply transform\n        const x2 = tx + x1*s  - y1*rz + z1*ry;\n        const y2 = ty + x1*rz + y1*s  - z1*rx;\n        const z2 = tz - x1*ry + y1*rx + z1*s;\n\n        return new Cartesian_Datum(x2, y2, z2);\n    }\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport { LatLonEllipsoidal_Datum as default, Cartesian_Datum as Cartesian, datums, Dms };\n","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Ordnance Survey Grid Reference functions                           (c) Chris Veness 2005-2021  */\n/*                                                                                   MIT Licence  */\n/* www.movable-type.co.uk/scripts/latlong-gridref.html                                            */\n/* www.movable-type.co.uk/scripts/geodesy-library.html#osgridref                                  */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nimport LatLonEllipsoidal, { Dms } from './latlon-ellipsoidal-datum.js';\n\n\n/**\n * Ordnance Survey OSGB grid references provide geocoordinate references for UK mapping purposes.\n *\n * Formulation implemented here due to Thomas, Redfearn, etc is as published by OS, but is inferior\n * to Krüger as used by e.g. Karney 2011.\n *\n * www.ordnancesurvey.co.uk/documents/resources/guide-coordinate-systems-great-britain.pdf.\n *\n * Note OSGB grid references cover Great Britain only; Ireland and the Channel Islands have their\n * own references.\n *\n * Note that these formulae are based on ellipsoidal calculations, and according to the OS are\n * accurate to about 4–5 metres – for greater accuracy, a geoid-based transformation (OSTN15) must\n * be used.\n */\n\n/*\n * Converted 2015 to work with WGS84 by default, OSGB36 as option;\n * www.ordnancesurvey.co.uk/blog/2014/12/confirmation-on-changes-to-latitude-and-longitude\n */\n\n\n/* OsGridRef  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\nconst nationalGrid = {\n    trueOrigin:  { lat: 49, lon: -2 },                 // true origin of grid 49°N,2°W on OSGB36 datum\n    falseOrigin: { easting: -400e3, northing: 100e3 }, // easting & northing of false origin, metres from true origin\n    scaleFactor: 0.9996012717,                         // scale factor on central meridian\n    ellipsoid:   LatLonEllipsoidal.ellipsoids.Airy1830,\n};\n// note Irish National Grid uses t/o 53°30′N, 8°W, f/o 200kmW, 250kmS, scale factor 1.000035, on Airy 1830 Modified ellipsoid\n\n\n/**\n * OS Grid References with methods to parse and convert them to latitude/longitude points.\n */\nclass OsGridRef {\n\n    /**\n     * Creates an OsGridRef object.\n     *\n     * @param {number} easting - Easting in metres from OS Grid false origin.\n     * @param {number} northing - Northing in metres from OS Grid false origin.\n     *\n     * @example\n     *   import OsGridRef from '/js/geodesy/osgridref.js';\n     *   const gridref = new OsGridRef(651409, 313177);\n     */\n    constructor(easting, northing) {\n        this.easting = Number(easting);\n        this.northing = Number(northing);\n\n        if (isNaN(easting)  || this.easting<0  || this.easting>700e3) throw new RangeError(`invalid easting ‘${easting}’`);\n        if (isNaN(northing) || this.northing<0 || this.northing>1300e3) throw new RangeError(`invalid northing ‘${northing}’`);\n    }\n\n\n    /**\n     * Converts ‘this’ Ordnance Survey Grid Reference easting/northing coordinate to latitude/longitude\n     * (SW corner of grid square).\n     *\n     * While OS Grid References are based on OSGB-36, the Ordnance Survey have deprecated the use of\n     * OSGB-36 for latitude/longitude coordinates (in favour of WGS-84), hence this function returns\n     * WGS-84 by default, with OSGB-36 as an option. See www.ordnancesurvey.co.uk/blog/2014/12/2.\n     *\n     * Note formulation implemented here due to Thomas, Redfearn, etc is as published by OS, but is\n     * inferior to Krüger as used by e.g. Karney 2011.\n     *\n     * @param   {LatLon.datum} [datum=WGS84] - Datum to convert grid reference into.\n     * @returns {LatLon}       Latitude/longitude of supplied grid reference.\n     *\n     * @example\n     *   const gridref = new OsGridRef(651409.903, 313177.270);\n     *   const pWgs84 = gridref.toLatLon();                    // 52°39′28.723″N, 001°42′57.787″E\n     *   // to obtain (historical) OSGB36 lat/lon point:\n     *   const pOsgb = gridref.toLatLon(LatLon.datums.OSGB36); // 52°39′27.253″N, 001°43′04.518″E\n     */\n    toLatLon(datum=LatLonEllipsoidal.datums.WGS84) {\n        const { easting: E, northing: N } = this;\n\n        const { a, b } = nationalGrid.ellipsoid;            // a = 6377563.396, b = 6356256.909\n        const φ0 = nationalGrid.trueOrigin.lat.toRadians(); // latitude of true origin, 49°N\n        const λ0 = nationalGrid.trueOrigin.lon.toRadians(); // longitude of true origin, 2°W\n        const E0 = -nationalGrid.falseOrigin.easting;       // easting of true origin, 400km\n        const N0 = -nationalGrid.falseOrigin.northing;      // northing of true origin, -100km\n        const F0 = nationalGrid.scaleFactor;                // 0.9996012717\n\n        const e2 = 1 - (b*b)/(a*a);                         // eccentricity squared\n        const n = (a-b)/(a+b), n2 = n*n, n3 = n*n*n;        // n, n², n³\n\n        let φ=φ0, M=0;\n        do {\n            φ = (N-N0-M)/(a*F0) + φ;\n\n            const Ma = (1 + n + (5/4)*n2 + (5/4)*n3) * (φ-φ0);\n            const Mb = (3*n + 3*n*n + (21/8)*n3) * Math.sin(φ-φ0) * Math.cos(φ+φ0);\n            const Mc = ((15/8)*n2 + (15/8)*n3) * Math.sin(2*(φ-φ0)) * Math.cos(2*(φ+φ0));\n            const Md = (35/24)*n3 * Math.sin(3*(φ-φ0)) * Math.cos(3*(φ+φ0));\n            M = b * F0 * (Ma - Mb + Mc - Md);                // meridional arc\n\n        } while (Math.abs(N-N0-M) >= 0.00001);  // ie until < 0.01mm\n\n        const cosφ = Math.cos(φ), sinφ = Math.sin(φ);\n        const ν = a*F0/Math.sqrt(1-e2*sinφ*sinφ);            // nu = transverse radius of curvature\n        const ρ = a*F0*(1-e2)/Math.pow(1-e2*sinφ*sinφ, 1.5); // rho = meridional radius of curvature\n        const η2 = ν/ρ-1;                                    // eta = ?\n\n        const tanφ = Math.tan(φ);\n        const tan2φ = tanφ*tanφ, tan4φ = tan2φ*tan2φ, tan6φ = tan4φ*tan2φ;\n        const secφ = 1/cosφ;\n        const ν3 = ν*ν*ν, ν5 = ν3*ν*ν, ν7 = ν5*ν*ν;\n        const VII = tanφ/(2*ρ*ν);\n        const VIII = tanφ/(24*ρ*ν3)*(5+3*tan2φ+η2-9*tan2φ*η2);\n        const IX = tanφ/(720*ρ*ν5)*(61+90*tan2φ+45*tan4φ);\n        const X = secφ/ν;\n        const XI = secφ/(6*ν3)*(ν/ρ+2*tan2φ);\n        const XII = secφ/(120*ν5)*(5+28*tan2φ+24*tan4φ);\n        const XIIA = secφ/(5040*ν7)*(61+662*tan2φ+1320*tan4φ+720*tan6φ);\n\n        const dE = (E-E0), dE2 = dE*dE, dE3 = dE2*dE, dE4 = dE2*dE2, dE5 = dE3*dE2, dE6 = dE4*dE2, dE7 = dE5*dE2;\n        φ = φ - VII*dE2 + VIII*dE4 - IX*dE6;\n        const λ = λ0 + X*dE - XI*dE3 + XII*dE5 - XIIA*dE7;\n\n        let point = new LatLon_OsGridRef(φ.toDegrees(), λ.toDegrees(), 0, LatLonEllipsoidal.datums.OSGB36);\n\n        if (datum != LatLonEllipsoidal.datums.OSGB36) {\n            // if point is required in datum other than OSGB36, convert it\n            point = point.convertDatum(datum);\n            // convertDatum() gives us a LatLon: convert to LatLon_OsGridRef which includes toOsGrid()\n            point = new LatLon_OsGridRef(point.lat, point.lon, point.height, point.datum);\n        }\n\n        return point;\n    }\n\n\n    /**\n     * Parses grid reference to OsGridRef object.\n     *\n     * Accepts standard grid references (eg 'SU 387 148'), with or without whitespace separators, from\n     * two-digit references up to 10-digit references (1m × 1m square), or fully numeric comma-separated\n     * references in metres (eg '438700,114800').\n     *\n     * @param   {string}    gridref - Standard format OS Grid Reference.\n     * @returns {OsGridRef} Numeric version of grid reference in metres from false origin (SW corner of\n     *   supplied grid square).\n     * @throws  {Error}     Invalid grid reference.\n     *\n     * @example\n     *   const grid = OsGridRef.parse('TG 51409 13177'); // grid: { easting: 651409, northing: 313177 }\n     */\n    static parse(gridref) {\n        gridref = String(gridref).trim();\n\n        // check for fully numeric comma-separated gridref format\n        let match = gridref.match(/^(\\d+),\\s*(\\d+)$/);\n        if (match) return new OsGridRef(match[1], match[2]);\n\n        // validate format\n        match = gridref.match(/^[HNST][ABCDEFGHJKLMNOPQRSTUVWXYZ]\\s*[0-9]+\\s*[0-9]+$/i);\n        if (!match) throw new Error(`invalid grid reference ‘${gridref}’`);\n\n        // get numeric values of letter references, mapping A->0, B->1, C->2, etc:\n        let l1 = gridref.toUpperCase().charCodeAt(0) - 'A'.charCodeAt(0); // 500km square\n        let l2 = gridref.toUpperCase().charCodeAt(1) - 'A'.charCodeAt(0); // 100km square\n        // shuffle down letters after 'I' since 'I' is not used in grid:\n        if (l1 > 7) l1--;\n        if (l2 > 7) l2--;\n\n        // convert grid letters into 100km-square indexes from false origin (grid square SV):\n        const e100km = ((l1 - 2) % 5) * 5 + (l2 % 5);\n        const n100km = (19 - Math.floor(l1 / 5) * 5) - Math.floor(l2 / 5);\n\n        // skip grid letters to get numeric (easting/northing) part of ref\n        let en = gridref.slice(2).trim().split(/\\s+/);\n        // if e/n not whitespace separated, split half way\n        if (en.length == 1) en = [ en[0].slice(0, en[0].length / 2), en[0].slice(en[0].length / 2) ];\n\n        // validation\n        if (en[0].length != en[1].length) throw new Error(`invalid grid reference ‘${gridref}’`);\n\n        // standardise to 10-digit refs (metres)\n        en[0] = en[0].padEnd(5, '0');\n        en[1] = en[1].padEnd(5, '0');\n\n        const e = e100km + en[0];\n        const n = n100km + en[1];\n\n        return new OsGridRef(e, n);\n    }\n\n\n    /**\n     * Converts ‘this’ numeric grid reference to standard OS Grid Reference.\n     *\n     * @param   {number} [digits=10] - Precision of returned grid reference (10 digits = metres);\n     *   digits=0 will return grid reference in numeric format.\n     * @returns {string} This grid reference in standard format.\n     *\n     * @example\n     *   const gridref = new OsGridRef(651409, 313177).toString(8); // 'TG 5140 1317'\n     *   const gridref = new OsGridRef(651409, 313177).toString(0); // '651409,313177'\n     */\n    toString(digits=10) {\n        if (![ 0,2,4,6,8,10,12,14,16 ].includes(Number(digits))) throw new RangeError(`invalid precision ‘${digits}’`); // eslint-disable-line comma-spacing\n\n        let { easting: e, northing: n } = this;\n\n        // use digits = 0 to return numeric format (in metres) - note northing may be >= 1e7\n        if (digits == 0) {\n            const format = { useGrouping: false,  minimumIntegerDigits: 6, maximumFractionDigits: 3 };\n            const ePad = e.toLocaleString('en', format);\n            const nPad = n.toLocaleString('en', format);\n            return `${ePad},${nPad}`;\n        }\n\n        // get the 100km-grid indices\n        const e100km = Math.floor(e / 100000), n100km = Math.floor(n / 100000);\n\n        // translate those into numeric equivalents of the grid letters\n        let l1 = (19 - n100km) - (19 - n100km) % 5 + Math.floor((e100km + 10) / 5);\n        let l2 = (19 - n100km) * 5 % 25 + e100km % 5;\n\n        // compensate for skipped 'I' and build grid letter-pairs\n        if (l1 > 7) l1++;\n        if (l2 > 7) l2++;\n        const letterPair = String.fromCharCode(l1 + 'A'.charCodeAt(0), l2 + 'A'.charCodeAt(0));\n\n        // strip 100km-grid indices from easting & northing, and reduce precision\n        e = Math.floor((e % 100000) / Math.pow(10, 5 - digits / 2));\n        n = Math.floor((n % 100000) / Math.pow(10, 5 - digits / 2));\n\n        // pad eastings & northings with leading zeros\n        e = e.toString().padStart(digits/2, '0');\n        n = n.toString().padStart(digits/2, '0');\n\n        return `${letterPair} ${e} ${n}`;\n    }\n\n}\n\n\n/* LatLon_OsGridRef - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\n/**\n * Extends LatLon class with method to convert LatLon point to OS Grid Reference.\n *\n * @extends LatLonEllipsoidal\n */\nclass LatLon_OsGridRef extends LatLonEllipsoidal {\n\n    /**\n     * Converts latitude/longitude to Ordnance Survey grid reference easting/northing coordinate.\n     *\n     * @returns {OsGridRef} OS Grid Reference easting/northing.\n     *\n     * @example\n     *   const grid = new LatLon(52.65798, 1.71605).toOsGrid(); // TG 51409 13177\n     *   // for conversion of (historical) OSGB36 latitude/longitude point:\n     *   const grid = new LatLon(52.65798, 1.71605).toOsGrid(LatLon.datums.OSGB36);\n     */\n    toOsGrid() {\n        // if necessary convert to OSGB36 first\n        const point = this.datum == LatLonEllipsoidal.datums.OSGB36\n            ? this\n            : this.convertDatum(LatLonEllipsoidal.datums.OSGB36);\n\n        const φ = point.lat.toRadians();\n        const λ = point.lon.toRadians();\n\n        const { a, b } = nationalGrid.ellipsoid;            // a = 6377563.396, b = 6356256.909\n        const φ0 = nationalGrid.trueOrigin.lat.toRadians(); // latitude of true origin, 49°N\n        const λ0 = nationalGrid.trueOrigin.lon.toRadians(); // longitude of true origin, 2°W\n        const E0 = -nationalGrid.falseOrigin.easting;       // easting of true origin, 400km\n        const N0 = -nationalGrid.falseOrigin.northing;      // northing of true origin, -100km\n        const F0 = nationalGrid.scaleFactor;                // 0.9996012717\n\n        const e2 = 1 - (b*b)/(a*a);                          // eccentricity squared\n        const n = (a-b)/(a+b), n2 = n*n, n3 = n*n*n;         // n, n², n³\n\n        const cosφ = Math.cos(φ), sinφ = Math.sin(φ);\n        const ν = a*F0/Math.sqrt(1-e2*sinφ*sinφ);            // nu = transverse radius of curvature\n        const ρ = a*F0*(1-e2)/Math.pow(1-e2*sinφ*sinφ, 1.5); // rho = meridional radius of curvature\n        const η2 = ν/ρ-1;                                    // eta = ?\n\n        const Ma = (1 + n + (5/4)*n2 + (5/4)*n3) * (φ-φ0);\n        const Mb = (3*n + 3*n*n + (21/8)*n3) * Math.sin(φ-φ0) * Math.cos(φ+φ0);\n        const Mc = ((15/8)*n2 + (15/8)*n3) * Math.sin(2*(φ-φ0)) * Math.cos(2*(φ+φ0));\n        const Md = (35/24)*n3 * Math.sin(3*(φ-φ0)) * Math.cos(3*(φ+φ0));\n        const M = b * F0 * (Ma - Mb + Mc - Md);              // meridional arc\n\n        const cos3φ = cosφ*cosφ*cosφ;\n        const cos5φ = cos3φ*cosφ*cosφ;\n        const tan2φ = Math.tan(φ)*Math.tan(φ);\n        const tan4φ = tan2φ*tan2φ;\n\n        const I = M + N0;\n        const II = (ν/2)*sinφ*cosφ;\n        const III = (ν/24)*sinφ*cos3φ*(5-tan2φ+9*η2);\n        const IIIA = (ν/720)*sinφ*cos5φ*(61-58*tan2φ+tan4φ);\n        const IV = ν*cosφ;\n        const V = (ν/6)*cos3φ*(ν/ρ-tan2φ);\n        const VI = (ν/120) * cos5φ * (5 - 18*tan2φ + tan4φ + 14*η2 - 58*tan2φ*η2);\n\n        const Δλ = λ-λ0;\n        const Δλ2 = Δλ*Δλ, Δλ3 = Δλ2*Δλ, Δλ4 = Δλ3*Δλ, Δλ5 = Δλ4*Δλ, Δλ6 = Δλ5*Δλ;\n\n        let N = I + II*Δλ2 + III*Δλ4 + IIIA*Δλ6;\n        let E = E0 + IV*Δλ + V*Δλ3 + VI*Δλ5;\n\n        N = Number(N.toFixed(3)); // round to mm precision\n        E = Number(E.toFixed(3));\n\n        try {\n            return new OsGridRef(E, N); // note: gets truncated to SW corner of 1m grid square\n        } catch (e) {\n            throw new Error(`${e.message} from (${point.lat.toFixed(6)},${point.lon.toFixed(6)}).toOsGrid()`);\n        }\n    }\n\n\n    /**\n     * Override LatLonEllipsoidal.convertDatum() with version which returns LatLon_OsGridRef.\n     */\n    convertDatum(toDatum) {\n        const osgbED = super.convertDatum(toDatum); // returns LatLonEllipsoidal_Datum\n        const osgbOSGR = new LatLon_OsGridRef(osgbED.lat, osgbED.lon, osgbED.height, osgbED.datum);\n        return osgbOSGR;\n    }\n\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport { OsGridRef as default, LatLon_OsGridRef as LatLon, Dms };\n","import OsGridRef from 'geodesy/osgridref.js'\nimport config from './config.json'\n\nconst isPostcode = (value) => {\n  value = value.replace(/\\s/g, '')\n  const regex = /^(([A-Z]{1,2}\\d[A-Z\\d]?|ASCN|STHL|TDCU|BBND|[BFS]IQQ|PCRN|TKCA) ?\\d[A-Z]{2}|BFPO ?\\d{1,4}|(KY\\d|MSR|VG|AI)[ -]?\\d{4}|[A-Z]{2} ?\\d{2}|GE ?CX|GIR ?0A{2}|SAN ?TA1)$/i\n  return regex.test(value)\n}\n\n// Exclude Scotalnd, Wales and Northern Ireland results\nconst removeNonEngland = (results) => {\n  return results.filter(r => r.GAZETTEER_ENTRY.COUNTRY.toLowerCase() === 'england')\n}\n\n// Remove duplicates (OS API bug?) eg: 'Newcastle upon Tyne'\nconst removeDuplicates = (results) => {\n  return Array.from(new Map(results.map(result => [result.GAZETTEER_ENTRY.ID, result])).values())\n}\n\n// Remove any item that doesnt contain a part of the query in name1\nconst removeTenuousResults = (results, query) => {\n  const words = query.toLowerCase().replace(/,/g, '').split(' ')\n  return results.filter(l => words.some(w => l.GAZETTEER_ENTRY.NAME1.toLowerCase().includes(w)))\n}\n\n// Mark search charcaters in result\nconst markString = (string, find) => {\n  find = find.replace(/,/g, '')\n  const patterns = [...new Set([find, ...find.trim().split(/[stn]+/)])].join('|')\n  const reg = new RegExp(`(${patterns})`, 'i', 'g', 'gi')\n  return { __html: string.replace(reg, '<mark>$1</mark>') }\n}\n\nconst place = ({ ID, NAME1, MBR_XMIN, MBR_YMIN, MBR_XMAX, MBR_YMAX, GEOMETRY_X, GEOMETRY_Y }) => {\n  const bounds = MBR_XMIN\n    ? [\n        (new OsGridRef(MBR_XMIN, MBR_YMIN)).toLatLon().lon,\n        (new OsGridRef(MBR_XMIN, MBR_YMIN)).toLatLon().lat,\n        (new OsGridRef(MBR_XMAX, MBR_YMAX)).toLatLon().lon,\n        (new OsGridRef(MBR_XMAX, MBR_YMAX)).toLatLon().lat]\n        .map(n => Math.round(n * 1000000) / 1000000)\n    : [\n        (new OsGridRef(GEOMETRY_X - config.POINT_BUFFER, GEOMETRY_Y - config.POINT_BUFFER)).toLatLon().lon,\n        (new OsGridRef(GEOMETRY_X - config.POINT_BUFFER, GEOMETRY_Y - config.POINT_BUFFER)).toLatLon().lat,\n        (new OsGridRef(GEOMETRY_X + config.POINT_BUFFER, GEOMETRY_Y + config.POINT_BUFFER)).toLatLon().lon,\n        (new OsGridRef(GEOMETRY_X + config.POINT_BUFFER, GEOMETRY_Y + config.POINT_BUFFER)).toLatLon().lat]\n        .map(n => Math.round(n * 1000000) / 1000000)\n  const center = GEOMETRY_X\n    ? [(new OsGridRef(GEOMETRY_X, GEOMETRY_Y)).toLatLon().lon,\n        (new OsGridRef(GEOMETRY_X, GEOMETRY_Y)).toLatLon().lat]\n        .map(n => Math.round(n * 1000000) / 1000000)\n    : null\n\n  return {\n    id: ID,\n    text: NAME1,\n    bounds,\n    center\n  }\n}\n\nconst suggestion = (query, { ID, NAME1, COUNTY_UNITARY, DISTRICT_BOROUGH, POSTCODE_DISTRICT, LOCAL_TYPE }) => {\n  const qualifier = `${!['City', 'Postcode'].includes(LOCAL_TYPE) ? POSTCODE_DISTRICT + ', ' : ''}${LOCAL_TYPE !== 'City' ? (COUNTY_UNITARY || DISTRICT_BOROUGH) : ''}`\n  const text = `${NAME1}${qualifier ? ', ' + qualifier : ''}`\n\n  return {\n    id: ID,\n    text: `${NAME1}${qualifier ? ', ' + qualifier : ''}`,\n    marked: markString(text, query)\n  }\n}\n\nconst parseResults = async (query, transformGeocodeRequest) => {\n  if (!query) {\n    return []\n  }\n  let url = config.URL\n  url = url.replace('{query}', encodeURI(query)).replace('{maxresults}', isPostcode(query) ? 1 : 100)\n  let results = []\n  try {\n    const response = await fetch(await transformGeocodeRequest(url))\n    const json = await response.json()\n    if (json.error || json.header.totalresults === 0) {\n      return []\n    }\n    results = removeTenuousResults(json.results, query)\n    results = removeDuplicates(results)\n    results = removeNonEngland(results)\n    results = results.slice(0, 8)\n  } catch (err) {\n    console.log(err)\n  }\n  return results\n}\n\nclass Geocode {\n  constructor (transformGeocodeRequest = (u) => u) {\n    this.transformGeocodeRequest = transformGeocodeRequest\n  }\n\n  async suggest (query) {\n    if (!query) {\n      return []\n    }\n    const results = await parseResults(query, this.transformGeocodeRequest)\n    return results.map(l => suggestion(query, l.GAZETTEER_ENTRY))\n  }\n\n  async find (query) {\n    if (!query) {\n      return null\n    }\n    const results = await parseResults(query, this.transformGeocodeRequest)\n    return results.length ? place(results[0].GAZETTEER_ENTRY) : null\n  }\n}\n\nexport default Geocode\n"],"names":["dmsSeparator","Dms","separator","char","parse","dms","isNaN","parseFloat","isFinite","Number","dmsParts","String","trim","replace","split","length","splice","NaN","deg","test","toDms","format","dp","undefined","Infinity","Math","abs","d","m","s","toFixed","floor","slice","toLat","lat","wrap90","toLon","lon","wrap180","toBrng","brng","wrap360","fromLocale","str","locale","toLocaleString","thousands","decimal","toLocale","compassPoint","bearing","precision","includes","RangeError","n","round","degrees","x","p","prototype","toRadians","this","PI","toDegrees","Vector3d","constructor","y","z","TypeError","sqrt","plus","v","minus","times","dividedBy","dot","cross","negate","unit","norm","angleTo","sign","atan2","rotateAround","axis","angle","a","sin","c","cos","t","r","rp","toString","ellipsoids","WGS84","b","f","datums","ellipsoid","Object","freeze","LatLonEllipsoidal","height","_lat","_lon","_height","latitude","lng","longitude","datum","_datum","args","ll","type","Array","isArray","coordinates","JSON","stringify","toCartesian","referenceFrame","h","eSq","Cartesian","equals","point","EPSILON","epoch","dpHeight","super","toLatLon","e2","Airy1830","AiryModified","Bessel1841","Clarke1866","Clarke1880IGN","GRS80","Intl1924","WGS72","ED50","transform","ETRS89","Irl1975","NAD27","NAD83","NTF","OSGB36","Potsdam","TokyoJapan","keys","forEach","e","LatLonEllipsoidal_Datum","pop","convertDatum","toDatum","cartesian","Cartesian_Datum","deprecatedDatum","console","info","latLon","oldCartesian","map","newCartesian","applyTransform","x1","y1","z1","tx","ty","tz","rx","ry","rz","nationalGrid","trueOrigin","falseOrigin","easting","northing","scaleFactor","OsGridRef","E","N","E0","N0","F0","n2","n3","M","pow","tan","dE","dE2","dE3","dE4","dE5","LatLon_OsGridRef","gridref","match","Error","l1","toUpperCase","charCodeAt","l2","e100km","n100km","en","padEnd","digits","useGrouping","minimumIntegerDigits","maximumFractionDigits","letterPair","fromCharCode","padStart","toOsGrid","message","osgbED","_regeneratorRuntime","hasOwnProperty","o","defineProperty","value","i","Symbol","iterator","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","l","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","values","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","displayName","isGeneratorFunction","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","prev","charAt","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_toConsumableArray","_arrayLikeToArray","_arrayWithoutHoles","from","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","removeNonEngland","results","filter","GAZETTEER_ENTRY","COUNTRY","toLowerCase","removeDuplicates","Map","result","ID","removeTenuousResults","query","words","some","w","NAME1","markString","string","find","patterns","Set","concat","join","reg","RegExp","__html","suggestion","_ref2","COUNTY_UNITARY","DISTRICT_BOROUGH","POSTCODE_DISTRICT","LOCAL_TYPE","qualifier","text","id","marked","parseResults","_ref3","_callee","transformGeocodeRequest","url","response","json","_context","config","encodeURI","t0","fetch","t1","error","header","totalresults","t2","log","_x","_x2","Geocode","_classCallCheck","key","_suggest","_callee2","_context2","_x3","_find","_callee3","_context3","MBR_XMIN","MBR_YMIN","MBR_XMAX","MBR_YMAX","GEOMETRY_X","GEOMETRY_Y","_ref","bounds","center","_x4"],"sourceRoot":""}