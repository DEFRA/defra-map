{"version":3,"file":"2641.660f5605.iframe.bundle.js","mappings":";;;;;;;AAWA;;;;ACHA;;;;;;AAMA;;;;;;AAMA;;AAEA;AACA;AACA;;;;AAIA;;;AAGA;AACA;;AAEA;AACA;;AAEA;;;;AAIA;;;AAGA;;;;;AAKA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;AAgBA;;;;;;;AAOA;;;;;;AAMA;;;;;;;;;;;;;;;;AAgBA;AACA;;;;;;;;;AASA;;;;;;AAMA;;;;;;;;;AASA;;;;;AAKA;;;;;;;AAOA;AACA;AACA;;AC5JA;;;AAGA;;AAEA;;AAEA;;;;AAIA;;AAEA;;;;;;;ACRA;;;AAGA;;;;;;;;;;AAUA;;;;AAIA;;;;;AAKA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AC3CA;AACA;AACA;;;AAGA;;;;AAIA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;AAoBA;;AAEA;AACA;;AAEA;;;;;;;;;;;AAWA;;;AAGA;;;;;;AAMA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;AAIA;;AAEA;AChHA;;;;;;;AAOA;AACA;;;;;;;;;;;;;;AAcA;;;;;;;;;;AAUA;;;;;;AAMA;AACA;;;;;;;;;AASA;;;AAGA;AACA;;;;;;;AAOA;AACA;AACA;;;;;;;;AAQA;AACA;;ACrEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;;;;;;;;;;;;AAcA;;AAEA;;AAEA;;;;;;;;;;;;;;AAcA;;AAEA;;;;;;;;;AASA;;AAEA;;;;;;;;;;;;;AAaA;;;;;;;;;;AAUA;;AC9EA;;AAEA;;;;AAIA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACqCA","sources":["webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/FocusAreaColor.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/LineMarker.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/NativeLine.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/Path.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/Pattern.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/WaterSurface.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/PathVertexPosition.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/NormalUtils.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/WaterDistortion.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{ScreenSpacePass as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";import{glsl as r}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{IntegerPassUniform as o}from\"../views/3d/webgl-engine/core/shaderModules/IntegerPassUniform.js\";import{Texture2DPassUniform as s}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{NoParameters as a}from\"../views/webgl/NoParameters.js\";import{ShaderBuilder as l}from\"../views/webgl/ShaderBuilder.js\";class t extends a{}function c(){const a=new l;return a.include(e),a.outputs.add(\"fragColor\",\"vec4\",0),a.fragment.uniforms.add(new s(\"colorTexture\",(e=>e.color)),new s(\"focusArea\",(e=>e.focusArea)),new o(\"focusAreaEffectMode\",(e=>e.effect??1))).main.add(r`float mask = texture( focusArea, uv, 0.0 ).r;\nvec4 color = texture( colorTexture, uv, 0.0 );\nvec4 colorDeSaturate = vec4(color.r * 0.25 + color.g * 0.5 + color.b * 0.25);\nif (focusAreaEffectMode == 1) {\nfragColor = mask > 0.0 ? color : 0.55 * colorDeSaturate + 0.45;\n} else {\nfragColor = mask > 0.0 ? color : 0.33 * mix(color, colorDeSaturate, 0.);\n}`),a}const u=Object.freeze(Object.defineProperty({__proto__:null,FocusAreaColorPassParameters:t,build:c},Symbol.toStringTag,{value:\"Module\"}));export{t as F,u as a,c as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{markerTextureSize as e,markerSymbolSize as r,markerTipThicknessFactor as i}from\"../views/3d/support/engineContent/marker.js\";import{SliceDraw as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{RibbonVertexPosition as t}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/RibbonVertexPosition.glsl.js\";import{OutputHighlight as a}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";import{MarkerSizing as n}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MarkerSizing.glsl.js\";import{terrainDepthTest as s}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/TerrainDepthTest.glsl.js\";import{ColorConversion as c}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{RgbaFloatEncoding as l}from\"../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";import{addProjViewLocalOrigin as p,addViewNormal as d,addPixelRatio as v}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float2BindUniform as m}from\"../views/3d/webgl-engine/core/shaderModules/Float2BindUniform.js\";import{Float4BindUniform as h}from\"../views/3d/webgl-engine/core/shaderModules/Float4BindUniform.js\";import{Float4PassUniform as f}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatBindUniform as g}from\"../views/3d/webgl-engine/core/shaderModules/FloatBindUniform.js\";import{glsl as u,If as w}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{Matrix4BindUniform as y}from\"../views/3d/webgl-engine/core/shaderModules/Matrix4BindUniform.js\";import{Texture2DPassUniform as S}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{VertexAttribute as b}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{LineMarkerSpace as x,LineMarkerAnchor as P}from\"../views/3d/webgl-engine/shaders/LineMarkerTechniqueConfiguration.js\";import{outputColorHighlightOID as z}from\"../views/3d/webgl-engine/shaders/OutputColorHighlightOID.glsl.js\";import{ShaderBuilder as j}from\"../views/webgl/ShaderBuilder.js\";function L(L){const k=new j,{space:M,anchor:C,hasTip:D}=L,O=M===x.World;k.include(t,L),k.include(n,L),k.include(s,L);const{vertex:$,fragment:T}=k;T.include(l),p($,L),k.attributes.add(b.POSITION,\"vec3\"),k.attributes.add(b.PREVPOSITION,\"vec3\"),k.attributes.add(b.UV0,\"vec2\"),k.varyings.add(\"vColor\",\"vec4\"),k.varyings.add(\"vpos\",\"vec3\"),k.varyings.add(\"vUV\",\"vec2\"),k.varyings.add(\"vSize\",\"float\"),D&&k.varyings.add(\"vLineWidth\",\"float\"),$.uniforms.add(new m(\"nearFar\",(({camera:e})=>e.nearFar)),new h(\"viewport\",(({camera:e})=>e.fullViewport))),$.code.add(u`vec4 projectAndScale(vec4 pos) {\nvec4 posNdc = proj * pos;\nposNdc.xy *= viewport.zw / posNdc.w;\nreturn posNdc;\n}`),$.code.add(u`void clip(vec4 pos, inout vec4 prev) {\nfloat vnp = nearFar[0] * 0.99;\nif (prev.z > -nearFar[0]) {\nfloat interpolation = (-vnp - pos.z) / (prev.z - pos.z);\nprev = mix(pos, prev, interpolation);\n}\n}`),O?(k.attributes.add(b.NORMAL,\"vec3\"),d($),$.constants.add(\"tiltThreshold\",\"float\",.7),$.code.add(u`vec3 perpendicular(vec3 v) {\nvec3 n = (viewNormal * vec4(normal.xyz, 1.0)).xyz;\nvec3 n2 = cross(v, n);\nvec3 forward = vec3(0.0, 0.0, 1.0);\nfloat tiltDot = dot(forward, n);\nreturn abs(tiltDot) < tiltThreshold ? n : n2;\n}`)):$.code.add(u`vec2 perpendicular(vec2 v) {\nreturn vec2(v.y, -v.x);\n}`);const W=O?\"vec3\":\"vec2\";return $.code.add(u`\n      ${W} normalizedSegment(${W} pos, ${W} prev) {\n        ${W} segment = pos - prev;\n        float segmentLen = length(segment);\n\n        // normalize or zero if too short\n        return (segmentLen > 0.001) ? segment / segmentLen : ${O?\"vec3(0.0, 0.0, 0.0)\":\"vec2(0.0, 0.0)\"};\n      }\n\n      ${W} displace(${W} pos, ${W} prev, float displacementLen) {\n        ${W} segment = normalizedSegment(pos, prev);\n\n        ${W} displacementDirU = perpendicular(segment);\n        ${W} displacementDirV = segment;\n\n        ${C===P.Tip?\"pos -= 0.5 * displacementLen * displacementDirV;\":\"\"}\n\n        return pos + displacementLen * (uv0.x * displacementDirU + uv0.y * displacementDirV);\n      }\n    `),M===x.Screen&&($.uniforms.add(new y(\"inverseProjectionMatrix\",(({camera:e})=>e.inverseProjectionMatrix))),$.code.add(u`vec3 inverseProject(vec4 posScreen) {\nposScreen.xy = (posScreen.xy / viewport.zw) * posScreen.w;\nreturn (inverseProjectionMatrix * posScreen).xyz;\n}`),$.code.add(u`bool rayIntersectPlane(vec3 rayDir, vec3 planeOrigin, vec3 planeNormal, out vec3 intersection) {\nfloat cos = dot(rayDir, planeNormal);\nfloat t = dot(planeOrigin, planeNormal) / cos;\nintersection = t * rayDir;\nreturn abs(cos) > 0.001 && t > 0.0;\n}`),$.uniforms.add(new g(\"perScreenPixelRatio\",(({camera:e})=>e.perScreenPixelRatio))),$.code.add(u`\n      vec4 toFront(vec4 displacedPosScreen, vec3 posLeft, vec3 posRight, vec3 prev, float lineWidth) {\n        // Project displaced position back to camera space\n        vec3 displacedPos = inverseProject(displacedPosScreen);\n\n        // Calculate the plane that we want the marker to lie in. Note that this will always be an approximation since ribbon lines are generally\n        // not planar and we do not know the actual position of the displaced prev vertices (they are offset in screen space, too).\n        vec3 planeNormal = normalize(cross(posLeft - posRight, posLeft - prev));\n        vec3 planeOrigin = posLeft;\n\n        ${w(L.hasCap,\"if(prev.z > posLeft.z) {\\n                vec2 diff = posLeft.xy - posRight.xy;\\n                planeOrigin.xy += perpendicular(diff) / 2.0;\\n             }\")};\n\n        // Move the plane towards the camera by a margin dependent on the line width (approximated in world space). This tolerance corrects for the\n        // non-planarity in most cases, but sharp joins can place the prev vertices at arbitrary positions so markers can still clip.\n        float offset = lineWidth * perScreenPixelRatio;\n        planeOrigin *= (1.0 - offset);\n\n        // Intersect camera ray with the plane and make sure it is within clip space\n        vec3 rayDir = normalize(displacedPos);\n        vec3 intersection;\n        if (rayIntersectPlane(rayDir, planeOrigin, planeNormal, intersection) && intersection.z < -nearFar[0] && intersection.z > -nearFar[1]) {\n          return vec4(intersection.xyz, 1.0);\n        }\n\n        // Fallback: use depth of pos or prev, whichever is closer to the camera\n        float minDepth = planeOrigin.z > prev.z ? length(planeOrigin) : length(prev);\n        displacedPos *= minDepth / length(displacedPos);\n        return vec4(displacedPos.xyz, 1.0);\n      }\n  `)),v($),$.main.add(u`\n    // Check for special value of uv0.y which is used by the Renderer when graphics\n    // are removed before the VBO is recompacted. If this is the case, then we just\n    // project outside of clip space.\n    if (uv0.y == 0.0) {\n      // Project out of clip space\n      gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\n    }\n    else {\n      float lineWidth = getLineWidth();\n      float screenMarkerSize = getScreenMarkerSize();\n\n      vec4 pos  = view * vec4(position, 1.0);\n      vec4 prev = view * vec4(prevPosition, 1.0);\n      clip(pos, prev);\n\n      ${O?u`${w(L.hideOnShortSegments,u`\n                if (areWorldMarkersHidden(pos, prev)) {\n                  // Project out of clip space\n                  gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\n                  return;\n                }`)}\n            pos.xyz = displace(pos.xyz, prev.xyz, getWorldMarkerSize(pos));\n            vec4 displacedPosScreen = projectAndScale(pos);`:u`\n            vec4 posScreen = projectAndScale(pos);\n            vec4 prevScreen = projectAndScale(prev);\n            vec4 displacedPosScreen = posScreen;\n\n            displacedPosScreen.xy = displace(posScreen.xy, prevScreen.xy, screenMarkerSize);\n            ${w(M===x.Screen,u`\n                vec2 displacementDirU = perpendicular(normalizedSegment(posScreen.xy, prevScreen.xy));\n\n                // We need three points of the ribbon line in camera space to calculate the plane it lies in\n                // Note that we approximate the third point, since we have no information about the join around prev\n                vec3 lineRight = inverseProject(posScreen + lineWidth * vec4(displacementDirU.xy, 0.0, 0.0));\n                vec3 lineLeft = pos.xyz + (pos.xyz - lineRight);\n\n                pos = toFront(displacedPosScreen, lineLeft, lineRight, prev.xyz, lineWidth);\n                displacedPosScreen = projectAndScale(pos);`)}`}\n      forwardViewPosDepth(pos.xyz);\n      // Convert back into NDC\n      displacedPosScreen.xy = (displacedPosScreen.xy / viewport.zw) * displacedPosScreen.w;\n\n      // Convert texture coordinate into [0,1]\n      vUV = (uv0 + 1.0) / 2.0;\n      ${w(!O,\"vUV *= displacedPosScreen.w;\")}\n      ${w(D,\"vLineWidth = lineWidth;\")}\n\n      vSize = screenMarkerSize;\n      vColor = getColor();\n\n      // Use camera space for slicing\n      vpos = pos.xyz;\n\n      gl_Position = displacedPosScreen;\n    }`),k.fragment.include(o,L),k.include(z,L),T.uniforms.add(new f(\"intrinsicColor\",(e=>e.color)),new S(\"tex\",(e=>e.markerTexture))),T.include(c),T.constants.add(\"texelSize\",\"float\",1/e),T.code.add(u`float markerAlpha(vec2 samplePos) {\nsamplePos += vec2(0.5, -0.5) * texelSize;\nfloat sdf = rgbaTofloat(texture(tex, samplePos)) - 0.5;\nfloat distance = sdf * vSize;\ndistance -= 0.5;\nreturn clamp(0.5 - distance, 0.0, 1.0);\n}`),D&&T.constants.add(\"relativeMarkerSize\",\"float\",r/e).constants.add(\"relativeTipLineWidth\",\"float\",i).code.add(u`\n    float tipAlpha(vec2 samplePos) {\n      // Convert coordinates s.t. they are in pixels and relative to the tip of an arrow marker\n      samplePos -= vec2(0.5, 0.5 + 0.5 * relativeMarkerSize);\n      samplePos *= vSize;\n\n      float halfMarkerSize = 0.5 * relativeMarkerSize * vSize;\n      float halfTipLineWidth = 0.5 * max(1.0, relativeTipLineWidth * vLineWidth);\n\n      ${w(O,\"halfTipLineWidth *= fwidth(samplePos.y);\")}\n\n      float distance = max(abs(samplePos.x) - halfMarkerSize, abs(samplePos.y) - halfTipLineWidth);\n      return clamp(0.5 - distance, 0.0, 1.0);\n    }\n  `),k.include(a,L),T.main.add(u`\n    discardBySlice(vpos);\n    discardByTerrainDepth();\n\n    vec4 finalColor = intrinsicColor * vColor;\n\n    // Cancel out perspective correct interpolation if in screen space or draped\n    vec2 samplePos = vUV ${w(!O,\"* gl_FragCoord.w\")};\n    finalColor.a *= ${D?\"max(markerAlpha(samplePos), tipAlpha(samplePos))\":\"markerAlpha(samplePos)\"};\n    outputColorHighlightOID(finalColor, vpos);`),k}const k=Object.freeze(Object.defineProperty({__proto__:null,build:L},Symbol.toStringTag,{value:\"Module\"}));export{k as L,L as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{ShaderOutput as e,isColorOrColorEmission as r}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{VertexColor as s}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{OutputHighlight as t}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";import{addProjViewLocalOrigin as l}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float4PassUniform as a}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as n}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as d}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{VertexAttribute as c}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{ShaderBuilder as g}from\"../views/webgl/ShaderBuilder.js\";import{alphaCutoff as m}from\"../webscene/support/AlphaCutoff.js\";function u(u){const p=new g,{vertex:w,fragment:f}=p;return p.include(i,u),p.include(s,u),l(w,u),p.attributes.add(c.POSITION,\"vec3\"),p.varyings.add(\"vpos\",\"vec3\"),w.main.add(d`vpos = position;\nforwardNormalizedVertexColor();\ngl_Position = transformPosition(proj, view, vpos);`),p.include(t,u),p.fragment.include(o,u),f.uniforms.add(new n(\"alphaCoverage\",((e,r)=>Math.min(1,e.width*r.camera.pixelRatio)))),u.hasVertexColors||f.uniforms.add(new a(\"constantColor\",(e=>e.color))),f.main.add(d`\n    discardBySlice(vpos);\n\n    vec4 color = ${u.hasVertexColors?\"vColor\":\"constantColor\"};\n\n    ${u.output===e.ObjectAndLayerIdColor?\"color.a = 1.0;\":\"\"}\n\n    if (color.a < ${d.float(m)}) {\n      discard;\n    }\n\n    ${r(u.output)?d`fragColor = applySlice(color, vpos);`:\"\"}\n    calculateOcclusionAndOutputHighlight();\n  `),p}const p=Object.freeze(Object.defineProperty({__proto__:null,build:u},Symbol.toStringTag,{value:\"Module\"}));export{p as N,u as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{ForwardLinearDepth as e,addNearFar as i}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{isColorOrColorEmission as a,ShaderOutput as o}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as r}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as n}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{ObjectAndLayerIdColor as l}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js\";import{PathVertexPosition as s}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/PathVertexPosition.glsl.js\";import{OutputDepth as d}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputDepth.glsl.js\";import{OutputHighlight as t}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";import{EvaluateAmbientOcclusion as c}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";import{EvaluateSceneLighting as g,addAmbientBoostFactor as m,addLightingGlobalFactor as v}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";import{addMainLightIntensity as h}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js\";import{Normals as p}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js\";import{NormalUtils as u}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/NormalUtils.glsl.js\";import{PhysicallyBasedRenderingParameters as b,PBRMode as w}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMapDraw as f}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{terrainDepthTest as y}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/TerrainDepthTest.glsl.js\";import{ColorConversion as j}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{addProjViewLocalOrigin as L,addViewNormal as P,addCameraPosition as S}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float3PassUniform as O}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{FloatPassUniform as C}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as A,If as D}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{outputColorHighlightOID as I}from\"../views/3d/webgl-engine/shaders/OutputColorHighlightOID.glsl.js\";import{ShaderBuilder as B}from\"../views/webgl/ShaderBuilder.js\";function F(F){const V=new B,{vertex:_,fragment:x}=V;L(_,F),V.varyings.add(\"vpos\",\"vec3\"),V.include(s,F);const{output:z,spherical:M,pbrMode:H,receiveShadows:N}=F,k=a(z);switch((k||z===o.ObjectAndLayerIdColor)&&(V.include(n,F),V.include(f,F),V.include(e,F),V.include(l,F),V.include(y,F),V.varyings.add(\"vnormal\",\"vec3\"),V.varyings.add(\"vcolor\",\"vec4\"),_.main.add(A`\n      vpos = calculateVPos();\n      vnormal = normalize(localNormal());\n      forwardViewPosDepth((view * vec4(vpos, 1.0)).xyz);\n\n      gl_Position = transformPosition(proj, view, vpos);\n\n      ${k?\"forwardLinearDepth();\":\"\"}\n      forwardObjectAndLayerIdColor();\n\n      vcolor = getColor();`)),z){case o.ColorEmission:case o.Color:V.include(b,F),V.include(g,F),V.include(c,F),V.include(f,F),V.include(p,F),V.fragment.include(r,F),V.include(I,F),S(x,F),m(x),v(x),x.uniforms.add(_.uniforms.get(\"localOrigin\"),new O(\"ambient\",(e=>e.ambient)),new O(\"diffuse\",(e=>e.diffuse)),new O(\"specular\",(e=>e.specular)),new C(\"opacity\",(e=>e.opacity))),x.include(j),h(x),x.main.add(A`\n        discardBySlice(vpos);\n        discardByTerrainDepth();\n\n        shadingParams.viewDirection = normalize(vpos - cameraPosition);\n        shadingParams.normalView = vnormal;\n        vec3 normal = shadingNormal(shadingParams);\n        float ssao = evaluateAmbientOcclusionInverse();\n\n        vec3 posWorld = vpos + localOrigin;\n        vec3 normalGround = ${M?\"normalize(posWorld);\":\"vec3(0.0, 0.0, 1.0);\"}\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(posWorld);\n        vec3 additionalLight = ssao * mainLightIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n        float shadow = ${N?\"max(lightingGlobalFactor * (1.0 - additionalAmbientScale), readShadowMap(vpos, linearDepth));\":M?\"lightingGlobalFactor * (1.0 - additionalAmbientScale);\":\"0.0;\"}\n        vec3 albedo = vcolor.rgb * max(ambient, diffuse); // combine the old material parameters into a single one\n        float combinedOpacity = vcolor.a * opacity;\n        albedo += 0.25 * specular; // don't completely ignore specular for now\n\n        ${D(H===w.Schematic,\"float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * mainLightIntensity[2];\\n           vec4 emission = getEmissions();\")}\n\n        vec3 shadedColor = ${H===w.Schematic?\"evaluateSceneLightingPBR(normal, albedo, shadow, 1.0 - ssao, additionalLight, shadingParams.viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);\":\"evaluateSceneLighting(normal, albedo, shadow, 1.0 - ssao, additionalLight);\"}\n        vec4 finalColor = vec4(shadedColor, combinedOpacity);\n        outputColorHighlightOID(finalColor, vpos);`);break;case o.Depth:V.include(n,F),_.main.add(A`vpos = calculateVPos();\ngl_Position = transformPosition(proj, view, vpos);`),V.fragment.include(r,F),x.main.add(A`discardBySlice(vpos);`);break;case o.Shadow:case o.ShadowHighlight:case o.ShadowExcludeHighlight:case o.ViewshedShadow:V.include(n,F),i(V),V.varyings.add(\"depth\",\"float\"),_.main.add(A`vpos = calculateVPos();\ngl_Position = transformPositionWithDepth(proj, view, vpos, nearFar, depth);`),V.fragment.include(r,F),V.include(d,F),x.main.add(A`discardBySlice(vpos);\noutputDepth(depth);`);break;case o.ObjectAndLayerIdColor:V.fragment.include(r,F),x.main.add(A`discardBySlice(vpos);\noutputObjectAndLayerIdColor();`);break;case o.Normal:V.include(n,F),V.include(u,F),P(_),V.varyings.add(\"vnormal\",\"vec3\"),_.main.add(A`vpos = calculateVPos();\nvnormal = normalize((viewNormal * vec4(localNormal(), 1.0)).xyz);\ngl_Position = transformPosition(proj, view, vpos);`),V.fragment.include(r,F),x.main.add(A`discardBySlice(vpos);\nvec3 normal = normalize(vnormal);\nif (gl_FrontFacing == false) normal = -normal;\nfragColor = vec4(vec3(0.5) + 0.5 * normal, 1.0);`);break;case o.Highlight:V.include(n,F),V.include(u,F),V.varyings.add(\"vnormal\",\"vec3\"),_.main.add(A`vpos = calculateVPos();\ngl_Position = transformPosition(proj, view, vpos);`),V.fragment.include(r,F),V.include(t,F),x.main.add(A`discardBySlice(vpos);\ncalculateOcclusionAndOutputHighlight();`)}return V}const V=Object.freeze(Object.defineProperty({__proto__:null,build:F},Symbol.toStringTag,{value:\"Module\"}));export{V as P,F as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{ShaderOutput as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as r}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{ObjectAndLayerIdColor as t}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js\";import{VertexColor as a}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{terrainDepthTest as i}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/TerrainDepthTest.glsl.js\";import{VisualVariables as l}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{ColorConversion as n}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{addProjViewLocalOrigin as c,addCameraPosition as d}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float4PassUniform as s}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatBindUniform as v}from\"../views/3d/webgl-engine/core/shaderModules/FloatBindUniform.js\";import{glsl as g}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{VertexAttribute as p}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{Style as m}from\"../views/3d/webgl-engine/materials/PatternStyle.js\";import{outputColorHighlightOID as f}from\"../views/3d/webgl-engine/shaders/OutputColorHighlightOID.glsl.js\";import{ShaderBuilder as u}from\"../views/webgl/ShaderBuilder.js\";const w=.70710678118,b=w,h=.08715574274,y=10,S=1;function j(j){const C=new u,{vertex:T,fragment:P,attributes:R,varyings:V}=C,D=j.output===e.Highlight;c(T,j),C.include(r,j),C.include(a,j),C.include(l,j),C.include(t,j),C.fragment.include(o,j),C.include(f,j),C.include(i,j),j.draped?T.uniforms.add(new v(\"worldToScreenRatio\",(e=>1/e.screenToPCSRatio))):R.add(p.BOUNDINGRECT,\"mat3\"),R.add(p.POSITION,\"vec3\"),R.add(p.UVMAPSPACE,\"vec4\"),j.vvColor&&R.add(p.COLORFEATUREATTRIBUTE,\"float\"),j.hasVertexColors||V.add(\"vColor\",\"vec4\"),V.add(\"vpos\",\"vec3\"),V.add(\"vuv\",\"vec2\"),T.uniforms.add(new s(\"uColor\",(e=>e.color)));const O=j.style===m.ForwardDiagonal||j.style===m.BackwardDiagonal||j.style===m.DiagonalCross;return O&&T.code.add(g`\n      const mat2 rotate45 = mat2(${g.float(w)}, ${g.float(-.70710678118)},\n                                 ${g.float(b)}, ${g.float(w)});\n    `),j.draped||(d(T,j),T.uniforms.add(new v(\"worldToScreenPerDistanceRatio\",(e=>1/e.camera.perScreenPixelRatio))),T.code.add(g`vec3 projectPointToLineSegment(vec3 center, vec3 halfVector, vec3 point) {\nfloat projectedLength = dot(halfVector, point - center) / dot(halfVector, halfVector);\nreturn center + halfVector * clamp(projectedLength, -1.0, 1.0);\n}`),T.code.add(g`vec3 intersectRayPlane(vec3 rayDir, vec3 rayOrigin, vec3 planeNormal, vec3 planePoint) {\nfloat d = dot(planeNormal, planePoint);\nfloat t = (d - dot(planeNormal, rayOrigin)) / dot(planeNormal, rayDir);\nreturn rayOrigin + t * rayDir;\n}`),T.code.add(g`\n      float boundingRectDistanceToCamera() {\n        vec3 center = vec3(boundingRect[0][0], boundingRect[0][1], boundingRect[0][2]);\n        vec3 halfU = vec3(boundingRect[1][0], boundingRect[1][1], boundingRect[1][2]);\n        vec3 halfV = vec3(boundingRect[2][0], boundingRect[2][1], boundingRect[2][2]);\n        vec3 n = normalize(cross(halfU, halfV));\n\n        vec3 viewDir = - vec3(view[0][2], view[1][2], view[2][2]);\n\n        float viewAngle = dot(viewDir, n);\n        float minViewAngle = ${g.float(h)};\n\n        if (abs(viewAngle) < minViewAngle) {\n          // view direction is (almost) parallel to plane -> clamp it to min angle\n          float normalComponent = sign(viewAngle) * minViewAngle - viewAngle;\n          viewDir = normalize(viewDir + normalComponent * n);\n        }\n\n        // intersect view direction with infinite plane that contains bounding rect\n        vec3 planeProjected = intersectRayPlane(viewDir, cameraPosition, n, center);\n\n        // clip to bounds by projecting to u and v line segments individually\n        vec3 uProjected = projectPointToLineSegment(center, halfU, planeProjected);\n        vec3 vProjected = projectPointToLineSegment(center, halfV, planeProjected);\n\n        // use to calculate the closest point to camera on bounding rect\n        vec3 closestPoint = uProjected + vProjected - center;\n\n        return length(closestPoint - cameraPosition);\n      }\n    `)),T.code.add(g`\n    vec2 scaledUV() {\n      vec2 uv = uvMapSpace.xy ${O?\" * rotate45\":\"\"};\n      vec2 uvCellOrigin = uvMapSpace.zw ${O?\" * rotate45\":\"\"};\n\n      ${j.draped?\"\":g`\n            float distanceToCamera = boundingRectDistanceToCamera();\n            float worldToScreenRatio = worldToScreenPerDistanceRatio / distanceToCamera;\n          `}\n\n      // Logarithmically discretize ratio to avoid jittering\n      float step = 0.1;\n      float discreteWorldToScreenRatio = log(worldToScreenRatio);\n      discreteWorldToScreenRatio = ceil(discreteWorldToScreenRatio / step) * step;\n      discreteWorldToScreenRatio = exp(discreteWorldToScreenRatio);\n\n      vec2 uvOffset = mod(uvCellOrigin * discreteWorldToScreenRatio, ${g.float(y)});\n      return uvOffset + (uv * discreteWorldToScreenRatio);\n    }\n  `),T.main.add(g`\n    vuv = scaledUV();\n    vpos = position;\n    forwardViewPosDepth((view * vec4(vpos, 1.0)).xyz);\n    forwardNormalizedVertexColor();\n    forwardObjectAndLayerIdColor();\n    ${j.hasVertexColors?\"vColor *= uColor;\":j.vvColor?\"vColor = uColor * interpolateVVColor(colorFeatureAttribute);\":\"vColor = uColor;\"}\n    gl_Position = transformPosition(proj, view, vpos);\n  `),P.include(n),j.draped&&P.uniforms.add(new v(\"texelSize\",(e=>1/e.camera.pixelRatio))),D||(P.code.add(g`\n      const float lineWidth = ${g.float(S)};\n      const float spacing = ${g.float(y)};\n      const float spacingINV = ${g.float(1/y)};\n\n      float coverage(float p, float txlSize) {\n        p = mod(p, spacing);\n\n        float halfTxlSize = txlSize / 2.0;\n\n        float start = p - halfTxlSize;\n        float end = p + halfTxlSize;\n\n        float coverage = (ceil(end * spacingINV) - floor(start * spacingINV)) * lineWidth;\n        coverage -= min(lineWidth, mod(start, spacing));\n        coverage -= max(lineWidth - mod(end, spacing), 0.0);\n\n        return coverage / txlSize;\n      }\n    `),j.draped||P.code.add(g`const int maxSamples = 5;\nfloat sampleAA(float p) {\nvec2 dxdy = abs(vec2(dFdx(p), dFdy(p)));\nfloat fwidth = dxdy.x + dxdy.y;\nivec2 samples = 1 + ivec2(clamp(dxdy, 0.0, float(maxSamples - 1)));\nvec2 invSamples = 1.0 / vec2(samples);\nfloat accumulator = 0.0;\nfor (int j = 0; j < maxSamples; j++) {\nif(j >= samples.y) {\nbreak;\n}\nfor (int i = 0; i < maxSamples; i++) {\nif(i >= samples.x) {\nbreak;\n}\nvec2 step = vec2(i,j) * invSamples - 0.5;\naccumulator += coverage(p + step.x * dxdy.x + step.y * dxdy.y, fwidth);\n}\n}\naccumulator /= float(samples.x * samples.y);\nreturn accumulator;\n}`)),P.main.add(g`\n    discardBySlice(vpos);\n    discardByTerrainDepth();\n    vec4 color = vColor;\n    ${D?\"\":g`color.a *= ${x(j)};`}\n    outputColorHighlightOID(color, vpos);\n  `),C}function x(e){function o(o){return e.draped?g`coverage(vuv.${o}, texelSize)`:g`sampleAA(vuv.${o})`}switch(e.style){case m.ForwardDiagonal:case m.Horizontal:return o(\"y\");case m.BackwardDiagonal:case m.Vertical:return o(\"x\");case m.DiagonalCross:case m.Cross:return g`1.0 - (1.0 - ${o(\"x\")}) * (1.0 - ${o(\"y\")})`;default:return\"0.0\"}}const C=Object.freeze(Object.defineProperty({__proto__:null,build:j},Symbol.toStringTag,{value:\"Module\"}));export{C as P,j as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{ForwardLinearDepth as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{isColorOrColorEmission as r,ShaderOutput as i}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{ObjectAndLayerIdColor as s}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js\";import{OutputHighlight as n}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";import{EvaluateAmbientLighting as t}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientLighting.glsl.js\";import{addMainLightDirection as l,addMainLightIntensity as d}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js\";import{NormalUtils as g}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/NormalUtils.glsl.js\";import{PBRMode as m}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMapDraw as v}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{terrainDepthTest as c}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/TerrainDepthTest.glsl.js\";import{Water as p}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/Water.glsl.js\";import{WaterDistortion as w}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/WaterDistortion.glsl.js\";import{ColorConversion as u}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{addProjViewLocalOrigin as f,addCameraPosition as h}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float4PassUniform as b}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as y}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as j}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{VertexAttribute as L}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{outputColorHighlightOID as C}from\"../views/3d/webgl-engine/shaders/OutputColorHighlightOID.glsl.js\";import{ShaderBuilder as P}from\"../views/webgl/ShaderBuilder.js\";import{alphaCutoff as x}from\"../webscene/support/AlphaCutoff.js\";function O(O){const S=new P,{vertex:D,fragment:N}=S,{output:_,draped:F,receiveShadows:M}=O;f(D,O),S.include(a,O),S.attributes.add(L.POSITION,\"vec3\"),S.attributes.add(L.UV0,\"vec2\");const z=new b(\"waterColor\",(e=>e.color));if(r(_)&&F)return S.varyings.add(\"vpos\",\"vec3\"),D.uniforms.add(z),D.main.add(j`\n      if (waterColor.a < ${j.float(x)}) {\n        // Discard this vertex\n        gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n        return;\n      }\n\n      vpos = position;\n      gl_Position = transformPosition(proj, view, vpos);`),N.uniforms.add(z),N.main.add(j`fragColor = waterColor;`),S;switch(r(_)&&(S.include(g,O),S.include(e,O),S.varyings.add(\"vuv\",\"vec2\"),S.varyings.add(\"vpos\",\"vec3\"),S.varyings.add(\"vnormal\",\"vec3\"),S.varyings.add(\"vtbnMatrix\",\"mat3\"),D.uniforms.add(z),D.main.add(j`\n      if (waterColor.a < ${j.float(x)}) {\n        // Discard this vertex\n        gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n        return;\n      }\n\n      vuv = uv0;\n      vpos = position;\n\n      vnormal = getLocalUp(vpos, localOrigin);\n      vtbnMatrix = getTBNMatrix(vnormal);\n      forwardViewPosDepth((view * vec4(vpos, 1.0)).xyz);\n\n      gl_Position = transformPosition(proj, view, vpos);\n      forwardLinearDepth();`)),S.include(c,O),O.output){case i.Color:case i.ColorEmission:S.include(t,{pbrMode:m.Disabled,lightingSphericalHarmonicsOrder:2}),S.include(w),S.include(v,O),S.include(p,O),S.fragment.include(o,O),S.include(C,O),N.include(u),h(N,O),l(N),d(N),N.uniforms.add(z,new y(\"timeElapsed\",(({timeElapsed:e})=>e)),D.uniforms.get(\"view\"),D.uniforms.get(\"localOrigin\")).main.add(j`\n        discardBySlice(vpos);\n        discardByTerrainDepth();\n        vec3 localUp = vnormal;\n        // the created normal is in tangent space\n        vec4 tangentNormalFoam = getSurfaceNormalAndFoam(vuv, timeElapsed);\n\n        // we rotate the normal according to the tangent-bitangent-normal-Matrix\n        vec3 n = normalize(vtbnMatrix * tangentNormalFoam.xyz);\n        vec3 v = -normalize(vpos - cameraPosition);\n        float shadow = ${M?j`1.0 - readShadowMap(vpos, linearDepth)`:\"1.0\"};\n        vec4 vPosView = view * vec4(vpos, 1.0);\n        vec4 final = vec4(getSeaColor(n, v, mainLightDirection, waterColor.rgb, mainLightIntensity, localUp, shadow, tangentNormalFoam.w, vPosView.xyz, vpos + localOrigin), waterColor.w);\n\n        // gamma correction\n        fragColor = delinearizeGamma(final);\n        outputColorHighlightOID(fragColor, vpos);`);break;case i.Normal:S.include(g,O),S.include(w,O),S.fragment.include(o,O),S.varyings.add(\"vpos\",\"vec3\"),S.varyings.add(\"vuv\",\"vec2\"),D.uniforms.add(z),D.main.add(j`\n        if (waterColor.a < ${j.float(x)}) {\n          // Discard this vertex\n          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n          return;\n        }\n\n        vuv = uv0;\n        vpos = position;\n\n        gl_Position = transformPosition(proj, view, vpos);`),N.uniforms.add(new y(\"timeElapsed\",(({timeElapsed:e})=>e))).main.add(j`discardBySlice(vpos);\nvec4 tangentNormalFoam = getSurfaceNormalAndFoam(vuv, timeElapsed);\ntangentNormalFoam.xyz = normalize(tangentNormalFoam.xyz);\nfragColor = vec4((tangentNormalFoam.xyz + vec3(1.0)) * 0.5, tangentNormalFoam.w);`);break;case i.Highlight:S.include(n,O),S.varyings.add(\"vpos\",\"vec3\"),D.uniforms.add(z),D.main.add(j`\n        if (waterColor.a < ${j.float(x)}) {\n          // Discard this vertex\n          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n          return;\n        }\n\n        vpos = position;\n        gl_Position = transformPosition(proj, view, vpos);`),S.fragment.include(o,O),N.main.add(j`discardBySlice(vpos);\ncalculateOcclusionAndOutputHighlight();`);break;case i.ObjectAndLayerIdColor:S.include(s,O),S.varyings.add(\"vpos\",\"vec3\"),D.uniforms.add(z),D.main.add(j`\n        if (waterColor.a < ${j.float(x)}) {\n          // Discard this vertex\n          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n          return;\n        }\n\n        vpos = position;\n        gl_Position = transformPosition(proj, view, vpos);\n        forwardObjectAndLayerIdColor();`),S.fragment.include(o,O),N.main.add(j`discardBySlice(vpos);\noutputObjectAndLayerIdColor();`)}return S}const S=Object.freeze(Object.defineProperty({__proto__:null,build:O},Symbol.toStringTag,{value:\"Module\"}));export{S as W,O as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{fromValues as e}from\"../../../../../../core/libs/gl-matrix-2/factories/vec2f64.js\";import{PositionAttribute as o}from\"./PositionAttribute.glsl.js\";import{Float2PassUniform as i}from\"../../shaderModules/Float2PassUniform.js\";import{Float3PassUniform as r}from\"../../shaderModules/Float3PassUniform.js\";import{Float4sPassUniform as t}from\"../../shaderModules/Float4sPassUniform.js\";import{FloatsPassUniform as a}from\"../../shaderModules/FloatsPassUniform.js\";import{glsl as l}from\"../../shaderModules/glsl.js\";import{VertexAttribute as v}from\"../../../lib/VertexAttribute.js\";import{vvColorNumber as s,VisualVariablePassParameters as c}from\"../../../materials/VisualVariablePassParameters.js\";const p=8;function f(e,c){const f=v.FEATUREVALUE;e.attributes.add(f,\"vec4\");const n=e.vertex;n.code.add(l`\n  bool isCapVertex() {\n    return ${f}.w == 1.0;\n  }\n  `),n.uniforms.add(new i(\"size\",(e=>e.size))),c.vvSize?(n.uniforms.add(new r(\"vvSizeMinSize\",(e=>e.vvSize.minSize)),new r(\"vvSizeMaxSize\",(e=>e.vvSize.maxSize)),new r(\"vvSizeOffset\",(e=>e.vvSize.offset)),new r(\"vvSizeFactor\",(e=>e.vvSize.factor))),n.code.add(l`\n    vec2 getSize() {\n      return size * clamp(vvSizeOffset + ${f}.x * vvSizeFactor, vvSizeMinSize, vvSizeMaxSize).xz;\n    }\n    `)):n.code.add(l`vec2 getSize(){\nreturn size;\n}`),c.vvOpacity?(n.constants.add(\"vvOpacityNumber\",\"int\",p),n.uniforms.add(new a(\"vvOpacityValues\",(e=>e.vvOpacity.values),p),new a(\"vvOpacityOpacities\",(e=>e.vvOpacity.opacityValues),p)),n.code.add(l`\n    vec4 applyOpacity(vec4 color) {\n      float value = ${f}.z;\n      if (value <= vvOpacityValues[0]) {\n        return vec4( color.xyz, vvOpacityOpacities[0]);\n      }\n\n      for (int i = 1; i < vvOpacityNumber; ++i) {\n        if (vvOpacityValues[i] >= value) {\n          float f = (value - vvOpacityValues[i-1]) / (vvOpacityValues[i] - vvOpacityValues[i-1]);\n          return vec4( color.xyz, mix(vvOpacityOpacities[i-1], vvOpacityOpacities[i], f));\n        }\n      }\n\n      return vec4( color.xyz, vvOpacityOpacities[vvOpacityNumber - 1]);\n    }\n    `)):n.code.add(l`vec4 applyOpacity(vec4 color){\nreturn color;\n}`),c.vvColor?(n.constants.add(\"vvColorNumber\",\"int\",s),n.uniforms.add(new a(\"vvColorValues\",(e=>e.vvColor.values),s),new t(\"vvColorColors\",(e=>e.vvColor.colors),s)),n.code.add(l`\n    vec4 getColor() {\n      float value = ${f}.y;\n      if (value <= vvColorValues[0]) {\n        return applyOpacity(vvColorColors[0]);\n      }\n\n      for (int i = 1; i < vvColorNumber; ++i) {\n        if (vvColorValues[i] >= value) {\n          float f = (value - vvColorValues[i-1]) / (vvColorValues[i] - vvColorValues[i-1]);\n          return applyOpacity(mix(vvColorColors[i-1], vvColorColors[i], f));\n        }\n      }\n\n      return applyOpacity(vvColorColors[vvColorNumber - 1]);\n    }\n    `)):n.code.add(l`vec4 getColor(){\nreturn applyOpacity(vec4(1, 1, 1, 1));\n}`),e.include(o),e.attributes.add(v.PROFILERIGHT,\"vec4\"),e.attributes.add(v.PROFILEUP,\"vec4\"),e.attributes.add(v.PROFILEVERTEXANDNORMAL,\"vec4\"),n.code.add(l`vec3 calculateVPos() {\nvec2 size = getSize();\nvec3 origin = position;\nvec3 right = profileRight.xyz;\nvec3 up = profileUp.xyz;\nvec3 forward = cross(up, right);\nvec2 profileVertex = profileVertexAndNormal.xy * size;\nvec2 profileNormal = profileVertexAndNormal.zw;\nfloat positionOffsetAlongProfilePlaneNormal = 0.0;\nfloat normalOffsetAlongProfilePlaneNormal = 0.0;`),n.code.add(l`if(!isCapVertex()) {\nvec2 rotationRight = vec2(profileRight.w, profileUp.w);\nfloat maxDistance = length(rotationRight);`),n.code.add(l`rotationRight = maxDistance > 0.0 ? normalize(rotationRight) : vec2(0, 0);\nfloat rx = dot(profileVertex, rotationRight);\nif (abs(rx) > maxDistance) {\nvec2 rotationUp = vec2(-rotationRight.y, rotationRight.x);\nfloat ry = dot(profileVertex, rotationUp);\nprofileVertex = rotationRight * maxDistance * sign(rx) + rotationUp * ry;\n}\n}else{\npositionOffsetAlongProfilePlaneNormal = profileRight.w * size[0];\nnormalOffsetAlongProfilePlaneNormal = profileUp.w;\n}\nvec3 offset = right * profileVertex.x + up * profileVertex.y + forward * positionOffsetAlongProfilePlaneNormal;\nreturn origin + offset;\n}`),n.code.add(l`vec3 localNormal() {\nvec3 right = profileRight.xyz;\nvec3 up = profileUp.xyz;\nvec3 forward = cross(up, right);\nvec2 profileNormal = profileVertexAndNormal.zw;\nvec3 normal = right * profileNormal.x + up * profileNormal.y;\nif(isCapVertex()) {\nnormal += forward * profileUp.w;\n}\nreturn normal;\n}`)}class n extends c{constructor(){super(...arguments),this.size=e(1,1)}}export{f as PathVertexPosition,n as PathVertexPositionPassParameters};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{glsl as e}from\"../../shaderModules/glsl.js\";function r(r,c){c.spherical?r.vertex.code.add(e`vec3 getLocalUp(in vec3 pos, in vec3 origin) {\nreturn normalize(pos + origin);\n}`):r.vertex.code.add(e`vec3 getLocalUp(in vec3 pos, in vec3 origin) {\nreturn vec3(0.0, 0.0, 1.0);\n}`),c.spherical?r.vertex.code.add(e`mat3 getTBNMatrix(in vec3 n) {\nvec3 t = normalize(cross(vec3(0.0, 0.0, 1.0), n));\nvec3 b = normalize(cross(n, t));\nreturn mat3(t, b, n);\n}`):r.vertex.code.add(e`mat3 getTBNMatrix(in vec3 n) {\nvec3 t = vec3(1.0, 0.0, 0.0);\nvec3 b = normalize(cross(n, t));\nreturn mat3(t, b, n);\n}`)}export{r as NormalUtils};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{set as e}from\"../../../../../../core/libs/gl-matrix-2/math/vec2.js\";import{create as t}from\"../../../../../../core/libs/gl-matrix-2/factories/vec2f64.js\";import{s as r}from\"../../../../../../chunks/vec42.js\";import{create as a}from\"../../../../../../core/libs/gl-matrix-2/factories/vec4f64.js\";import{FoamIntensity as o}from\"./FoamRendering.glsl.js\";import{ReadShadowMapPassParameters as m}from\"./ReadShadowMap.glsl.js\";import{Float2PassUniform as s}from\"../../shaderModules/Float2PassUniform.js\";import{Float4PassUniform as v}from\"../../shaderModules/Float4PassUniform.js\";import{glsl as l}from\"../../shaderModules/glsl.js\";import{Texture2DPassUniform as i}from\"../../shaderModules/Texture2DPassUniform.js\";function u(t){t.fragment.uniforms.add(new i(\"texWaveNormal\",(e=>e.waveNormal)),new i(\"texWavePerturbation\",(e=>e.wavePerturbation)),new v(\"waveParams\",(e=>r(c,e.waveStrength,e.waveTextureRepeat,e.flowStrength,e.flowOffset))),new s(\"waveDirection\",(t=>e(n,t.waveDirection[0]*t.waveVelocity,t.waveDirection[1]*t.waveVelocity)))),t.include(o),t.fragment.code.add(l`const vec2  FLOW_JUMP = vec2(6.0/25.0, 5.0/24.0);\nvec2 textureDenormalized2D(sampler2D _tex, vec2 _uv) {\nreturn 2.0 * texture(_tex, _uv).rg - 1.0;\n}\nfloat sampleNoiseTexture(vec2 _uv) {\nreturn texture(texWavePerturbation, _uv).b;\n}\nvec3 textureDenormalized3D(sampler2D _tex, vec2 _uv) {\nreturn 2.0 * texture(_tex, _uv).rgb - 1.0;\n}\nfloat computeProgress(vec2 uv, float time) {\nreturn fract(time);\n}\nfloat computeWeight(vec2 uv, float time) {\nfloat progress = computeProgress(uv, time);\nreturn 1.0 - abs(1.0 - 2.0 * progress);\n}\nvec3 computeUVPerturbedWeigth(sampler2D texFlow, vec2 uv, float time, float phaseOffset) {\nfloat flowStrength = waveParams[2];\nfloat flowOffset = waveParams[3];\nvec2 flowVector = textureDenormalized2D(texFlow, uv) * flowStrength;\nfloat progress = computeProgress(uv, time + phaseOffset);\nfloat weight = computeWeight(uv, time + phaseOffset);\nvec2 result = uv;\nresult -= flowVector * (progress + flowOffset);\nresult += phaseOffset;\nresult += (time - progress) * FLOW_JUMP;\nreturn vec3(result, weight);\n}\nconst float TIME_NOISE_TEXTURE_REPEAT = 0.3737;\nconst float TIME_NOISE_STRENGTH = 7.77;\nvec3 getWaveLayer(sampler2D _texNormal, sampler2D _dudv, vec2 _uv, vec2 _waveDir, float time) {\nfloat waveStrength = waveParams[0];\nvec2 waveMovement = time * -_waveDir;\nfloat timeNoise = sampleNoiseTexture(_uv * TIME_NOISE_TEXTURE_REPEAT) * TIME_NOISE_STRENGTH;\nvec3 uv_A = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.0);\nvec3 uv_B = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.5);\nvec3 normal_A = textureDenormalized3D(_texNormal, uv_A.xy) * uv_A.z;\nvec3 normal_B = textureDenormalized3D(_texNormal, uv_B.xy) * uv_B.z;\nvec3 mixNormal = normalize(normal_A + normal_B);\nmixNormal.xy *= waveStrength;\nmixNormal.z = sqrt(1.0 - dot(mixNormal.xy, mixNormal.xy));\nreturn mixNormal;\n}\nvec4 getSurfaceNormalAndFoam(vec2 _uv, float _time) {\nfloat waveTextureRepeat = waveParams[1];\nvec3 normal = getWaveLayer(texWaveNormal, texWavePerturbation, _uv * waveTextureRepeat, waveDirection, _time);\nfloat foam  = normals2FoamIntensity(normal, waveParams[0]);\nreturn vec4(normal, foam);\n}`)}class f extends m{}const c=a(),n=t();export{u as WaterDistortion,f as WaterDistortionPassParameters};\n"],"names":[],"sourceRoot":""}