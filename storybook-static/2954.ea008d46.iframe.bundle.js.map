{"version":3,"file":"2954.ea008d46.iframe.bundle.js","mappings":";;;AAOA;;;;;;;;AAQA;;AAEA;;AAEA;;;;;;;;;;;AAWA;;;AAGA;;;AAGA;AACA;AACA;AACA;;AAEA;;;;;;;;AAQA;;;AAGA;AACA;AACA;AACA;;AAEA;;;;;;;;AAQA;;AAEA;AACA;AACA;;;AAGA;;;ACjEA;;;;;AAKA;;;;;;;;;;;;;AAaA;AACA;;;AAGA;AACA;;;;;;;;AAQA;;AAEA;AACA;;AAEA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;ACjCA;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;AAKA;;;;;;;ACzEA;;;;AAIA;;;;;;;AAOA;;;;;AAKA;;;;;;;;;ACdA;;;AAGA;;;AAGA;;;AAGA;;;;;;AAMA;;;;;;;ACjBA;;ACLA;;;;AAIA;;;;;AAKA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;;;;;AClBA;;AAEA;;AAEA;;;;;;ACJA;AACA;;;ACJA;;;;ACCA;;AAEA;AACA;;;;;AAKA;;AAEA;;AAEA;;AAEA;;;;AAIA;;AAEA;;;AAGA;;;;AAIA;;;;AAIA;;AAEA;;AAEA;;;;;;;;AC/BA;;;;;ACHA;;;;;AAKA;;;;;;;;;;;AAWA;AACA;;;AAGA;AACA;;;ACvBA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;AAKA;;;;;;ACxCA;AACA;ACNA;;AAEA;AACA;;AAEA;;;AAGA;;;AAGA;;;;;;;;AAQA;;;;;;;;;;;;;;;AAeA;;AAEA;;;;;;;;AAQA;;;;;;;;;;AAUA;;;;;AAKA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;ACtFA;;AAEA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC8BA;;ACrCA;;AAEA;;AAEA;;AAEA;;AAEA;;ACRA;;AAEA;;;;;;;ACGA;;;AAGA;;;AAGA;;;;;;;;;;;;;;;;;AAiBA;;;AAGA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;ACpBA","sources":["webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/DefaultMaterial.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/RealisticTree.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/SSAO.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/SSAOBlur.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/collections/Component/Material/shader/DecodeSymbolColor.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/VertexNormal.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/output/OutputDepth.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientLighting.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/TextureTransformUV.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/DiscardOrAdjustAlpha.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloat16Encoding.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{ForwardLinearDepth as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{Offset as r}from\"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";import{isColorOrColorEmission as o}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{InstancedDoublePrecision as l}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";import{NormalAttribute as s,NormalType as n}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";import{PositionAttribute as t}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";import{SymbolColor as d}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";import{TextureCoordinateAttribute as c}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";import{VertexColor as m}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{VertexNormal as g}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexNormal.glsl.js\";import{VerticalOffset as v}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";import{DefaultMaterialAuxiliaryPasses as u}from\"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";import{ComputeNormalTexture as b}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js\";import{EvaluateAmbientOcclusion as w}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";import{EvaluateSceneLighting as h,addAmbientBoostFactor as p,addLightingGlobalFactor as f}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";import{addMainLightIntensity as x}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js\";import{Normals as y}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js\";import{PhysicallyBasedRendering as L}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";import{PhysicallyBasedRenderingParameters as C,PBRMode as j}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMapPass as P,ReadShadowMapDraw as O}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{terrainDepthTest as N}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/TerrainDepthTest.glsl.js\";import{colorTextureUV as S,normalTextureUV as T,emissiveTextureUV as A,occlusionTextureUV as V,metallicRoughnessTextureUV as M}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/TextureTransformUV.glsl.js\";import{VisualVariables as $}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{DiscardOrAdjustAlphaPass as D}from\"../views/3d/webgl-engine/core/shaderLibrary/util/DiscardOrAdjustAlpha.glsl.js\";import{MixExternalColor as E}from\"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";import{addProjViewLocalOrigin as U,addCameraPosition as B}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float3PassUniform as I}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{Float4PassUniform as F}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as _}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as R,If as z}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{Texture2DPassUniform as G}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{VertexAttribute as W}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{outputColorHighlightOID as k}from\"../views/3d/webgl-engine/shaders/OutputColorHighlightOID.glsl.js\";import{ShaderBuilder as H}from\"../views/webgl/ShaderBuilder.js\";import{alphaCutoff as q}from\"../webscene/support/AlphaCutoff.js\";function J(J){const K=new H,{vertex:Q,fragment:X,varyings:Y}=K,{output:Z,normalType:ee,offsetBackfaces:re,instancedColor:oe,spherical:ie,receiveShadows:ae,snowCover:le,pbrMode:se,textureAlphaPremultiplied:ne,instancedDoublePrecision:te,hasVertexColors:de,hasVertexTangents:ce,hasColorTexture:me,hasNormalTexture:ge,hasNormalTextureTransform:ve,hasColorTextureTransform:ue}=J;if(U(Q,J),K.include(t),Y.add(\"vpos\",\"vec3\"),K.include($,J),K.include(l,J),K.include(v,J),K.include(S,J),!o(Z))return K.include(u,J),K;K.include(T,J),K.include(A,J),K.include(V,J),K.include(M,J),B(Q,J),K.include(s,J),K.include(a,J);const be=ee===n.Attribute||ee===n.Compressed;return be&&re&&K.include(r),K.include(b,J),K.include(g,J),oe&&K.attributes.add(W.INSTANCECOLOR,\"vec4\"),Y.add(\"vPositionLocal\",\"vec3\"),K.include(c,J),K.include(e,J),K.include(d,J),K.include(m,J),Q.uniforms.add(new F(\"externalColor\",(e=>e.externalColor))),Y.add(\"vcolorExt\",\"vec4\"),K.include(N,J),Q.main.add(R`\n    forwardNormalizedVertexColor();\n    vcolorExt = externalColor;\n    ${z(oe,\"vcolorExt *= instanceColor * 0.003921568627451;\")}\n    vcolorExt *= vvColor();\n    vcolorExt *= getSymbolColor();\n    forwardColorMixMode();\n\n    vpos = getVertexInLocalOriginSpace();\n    vPositionLocal = vpos - view[3].xyz;\n    vpos = subtractOrigin(vpos);\n    ${z(be,\"vNormalWorld = dpNormal(vvLocalNormal(normalModel()));\")}\n    vpos = addVerticalOffset(vpos, localOrigin);\n    ${z(ce,\"vTangent = dpTransformVertexTangent(tangent);\")}\n    gl_Position = transformPosition(proj, view, vpos);\n    ${z(be&&re,\"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);\")}\n\n    forwardViewPosDepth((view * vec4(vpos, 1.0)).xyz);\n    forwardLinearDepth();\n    forwardTextureCoordinates();\n    forwardColorUV();\n    forwardNormalUV();\n    forwardEmissiveUV();\n    forwardOcclusionUV();\n    forwardMetallicRoughnessUV();\n\n    if (vcolorExt.a < ${R.float(q)}) {\n      gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n    }\n  `),K.include(h,J),K.include(w,J),K.include(D,J),K.include(te?P:O,J),K.fragment.include(i,J),K.include(k,J),B(X,J),X.uniforms.add(Q.uniforms.get(\"localOrigin\"),new I(\"ambient\",(e=>e.ambient)),new I(\"diffuse\",(e=>e.diffuse)),new _(\"opacity\",(e=>e.opacity)),new _(\"layerOpacity\",(e=>e.layerOpacity))),me&&X.uniforms.add(new G(\"tex\",(e=>e.texture))),K.include(C,J),K.include(L,J),X.include(E),K.include(y,J),p(X),f(X),x(X),X.main.add(R`\n    discardBySlice(vpos);\n    discardByTerrainDepth();\n    ${me?R`\n            vec4 texColor = texture(tex, ${ue?\"colorUV\":\"vuv0\"});\n            ${z(ne,\"texColor.rgb /= texColor.a;\")}\n            discardOrAdjustAlpha(texColor);`:R`vec4 texColor = vec4(1.0);`}\n    shadingParams.viewDirection = normalize(vpos - cameraPosition);\n    ${ee===n.ScreenDerivative?R`vec3 normal = screenDerivativeNormal(vPositionLocal);`:R`shadingParams.normalView = vNormalWorld;\n                vec3 normal = shadingNormal(shadingParams);`}\n    applyPBRFactors();\n    float ssao = evaluateAmbientOcclusionInverse() * getBakedOcclusion();\n\n    vec3 posWorld = vpos + localOrigin;\n\n      float additionalAmbientScale = additionalDirectedAmbientLight(posWorld);\n      float shadow = ${ae?\"max(lightingGlobalFactor * (1.0 - additionalAmbientScale), readShadowMap(vpos, linearDepth))\":z(ie,\"lightingGlobalFactor * (1.0 - additionalAmbientScale)\",\"0.0\")};\n\n    vec3 matColor = max(ambient, diffuse);\n    vec3 albedo = mixExternalColor(${z(de,\"vColor.rgb *\")} matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n    float opacity_ = layerOpacity * mixExternalOpacity(${z(de,\"vColor.a * \")} opacity, texColor.a, vcolorExt.a, int(colorMixMode));\n    ${ge?`mat3 tangentSpace = computeTangentSpace(${ce?\"normal\":\"normal, vpos, vuv0\"});\\n            vec3 shadingNormal = computeTextureNormal(tangentSpace, ${ve?\"normalUV\":\"vuv0\"});`:\"vec3 shadingNormal = normal;\"}\n    vec3 normalGround = ${ie?\"normalize(posWorld);\":\"vec3(0.0, 0.0, 1.0);\"}\n\n    ${z(le,R`\n          float snow = smoothstep(0.5, 0.55, dot(normal, normalGround));\n          albedo = mix(albedo, vec3(1), snow);\n          shadingNormal = mix(shadingNormal, normal, snow);\n          ssao = mix(ssao, 1.0, snow);`)}\n\n    vec3 additionalLight = ssao * mainLightIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n\n    ${se===j.Normal||se===j.Schematic?R`\n            float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * mainLightIntensity[2];\n            ${z(le,R`mrr = mix(mrr, vec3(0.0, 1.0, 0.04), snow);`)}\n            vec4 emission = ${le?\"mix(getEmissions(), vec4(0.0), snow)\":\"getEmissions()\"};\n            vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, shadingParams.viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);`:R`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}\n    vec4 finalColor = vec4(shadedColor, opacity_);\n    outputColorHighlightOID(finalColor, vpos);\n  `),K}const K=Object.freeze(Object.defineProperty({__proto__:null,build:J},Symbol.toStringTag,{value:\"Module\"}));export{K as D,J as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{ForwardLinearDepth as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{Offset as r}from\"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";import{isColorOrColorEmission as o}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{InstancedDoublePrecision as l}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";import{NormalAttribute as t}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";import{PositionAttribute as s}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";import{SymbolColor as n}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";import{TextureCoordinateAttribute as d}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";import{VertexColor as c}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{VerticalOffset as g}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";import{DefaultMaterialAuxiliaryPasses as m}from\"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";import{EvaluateAmbientOcclusion as v}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";import{EvaluateSceneLighting as b,addAmbientBoostFactor as w,addLightingGlobalFactor as p}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";import{addMainLightDirection as u,addMainLightIntensity as h}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js\";import{PhysicallyBasedRendering as f}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";import{PBRMode as x,PhysicallyBasedRenderingParameters as y}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMapPass as C,ReadShadowMapDraw as L}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{terrainDepthTest as j}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/TerrainDepthTest.glsl.js\";import{VisualVariables as O}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{DiscardOrAdjustAlphaPass as P}from\"../views/3d/webgl-engine/core/shaderLibrary/util/DiscardOrAdjustAlpha.glsl.js\";import{MixExternalColor as M}from\"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";import{addProjViewLocalOrigin as A,addCameraPosition as S}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float3PassUniform as E}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{Float4PassUniform as D}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as F}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as $,If as N}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{Texture2DPassUniform as V}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{VertexAttribute as I}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{outputColorHighlightOID as T}from\"../views/3d/webgl-engine/shaders/OutputColorHighlightOID.glsl.js\";import{ShaderBuilder as B}from\"../views/webgl/ShaderBuilder.js\";import{alphaCutoff as R}from\"../webscene/support/AlphaCutoff.js\";function _(_){const z=new B,{vertex:k,fragment:G,varyings:U}=z,{output:W,offsetBackfaces:H,instancedColor:q,pbrMode:J,snowCover:K,spherical:Q}=_,X=J===x.Normal||J===x.Schematic;if(A(k,_),z.include(s),U.add(\"vpos\",\"vec3\"),z.include(O,_),z.include(l,_),z.include(g,_),z.include(j,_),o(W)&&(S(z.vertex,_),z.include(t,_),z.include(a,_),H&&z.include(r),q&&z.attributes.add(I.INSTANCECOLOR,\"vec4\"),U.add(\"vNormalWorld\",\"vec3\"),U.add(\"localvpos\",\"vec3\"),z.include(d,_),z.include(e,_),z.include(n,_),z.include(c,_),k.uniforms.add(new D(\"externalColor\",(e=>e.externalColor))),U.add(\"vcolorExt\",\"vec4\"),k.main.add($`\n      forwardNormalizedVertexColor();\n      vcolorExt = externalColor;\n      ${N(q,\"vcolorExt *= instanceColor * 0.003921568627451;\")}\n      vcolorExt *= vvColor();\n      vcolorExt *= getSymbolColor();\n      forwardColorMixMode();\n\n      bool alphaCut = vcolorExt.a < ${$.float(R)};\n      vpos = getVertexInLocalOriginSpace();\n      localvpos = vpos - view[3].xyz;\n      vpos = subtractOrigin(vpos);\n      vNormalWorld = dpNormal(vvLocalNormal(normalModel()));\n      vpos = addVerticalOffset(vpos, localOrigin);\n      vec4 basePosition = transformPosition(proj, view, vpos);\n\n      forwardViewPosDepth((view * vec4(vpos, 1.0)).xyz);\n      forwardLinearDepth();\n      forwardTextureCoordinates();\n\n      gl_Position = alphaCut ? vec4(1e38, 1e38, 1e38, 1.0) :\n      ${N(H,\"offsetBackfacingClipPosition(basePosition, vpos, vNormalWorld, cameraPosition);\",\"basePosition;\")}\n    `)),o(W)){const{hasColorTexture:e,hasColorTextureTransform:r,receiveShadows:o}=_;z.include(b,_),z.include(v,_),z.include(P,_),z.include(_.instancedDoublePrecision?C:L,_),z.fragment.include(i,_),z.include(T,_),S(z.fragment,_),u(G),w(G),p(G),G.uniforms.add(k.uniforms.get(\"localOrigin\"),k.uniforms.get(\"view\"),new E(\"ambient\",(e=>e.ambient)),new E(\"diffuse\",(e=>e.diffuse)),new F(\"opacity\",(e=>e.opacity)),new F(\"layerOpacity\",(e=>e.layerOpacity))),e&&G.uniforms.add(new V(\"tex\",(e=>e.texture))),z.include(y,_),z.include(f,_),G.include(M),h(G),G.main.add($`\n      discardBySlice(vpos);\n      discardByTerrainDepth();\n      vec4 texColor = ${e?`texture(tex, ${r?\"colorUV\":\"vuv0\"})`:\" vec4(1.0)\"};\n      ${N(e,`${N(_.textureAlphaPremultiplied,\"texColor.rgb /= texColor.a;\")}\\n        discardOrAdjustAlpha(texColor);`)}\n      vec3 viewDirection = normalize(vpos - cameraPosition);\n      applyPBRFactors();\n      float ssao = evaluateAmbientOcclusionInverse();\n      ssao *= getBakedOcclusion();\n\n      float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);\n      vec3 additionalLight = ssao * mainLightIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n      float shadow = ${o?\"max(lightingGlobalFactor * (1.0 - additionalAmbientScale), readShadowMap(vpos, linearDepth))\":Q?\"lightingGlobalFactor * (1.0 - additionalAmbientScale)\":\"0.0\"};\n      vec3 matColor = max(ambient, diffuse);\n      ${_.hasVertexColors?$`vec3 albedo = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n             float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:$`vec3 albedo = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n             float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n      ${N(K,\"albedo = mix(albedo, vec3(1), 0.9);\")}\n      ${$`vec3 shadingNormal = normalize(vNormalWorld);\n             albedo *= 1.2;\n             vec3 viewForward = vec3(view[0][2], view[1][2], view[2][2]);\n             float alignmentLightView = clamp(dot(viewForward, -mainLightDirection), 0.0, 1.0);\n             float transmittance = 1.0 - clamp(dot(viewForward, shadingNormal), 0.0, 1.0);\n             float treeRadialFalloff = vColor.r;\n             float backLightFactor = 0.5 * treeRadialFalloff * alignmentLightView * transmittance * (1.0 - shadow);\n             additionalLight += backLightFactor * mainLightIntensity;`}\n      ${N(X,`vec3 normalGround = ${Q?\"normalize(vpos + localOrigin)\":\"vec3(0.0, 0.0, 1.0)\"};`)}\n      ${X?$`float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * mainLightIntensity[2];\n                 ${N(K,$`mrr = vec3(0.0, 1.0, 0.04);`)}\n            vec4 emission = ${K?\"vec4(0.0)\":\"getEmissions()\"};\n            vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);`:$`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}\n      vec4 finalColor = vec4(shadedColor, opacity_);\n      outputColorHighlightOID(finalColor, vpos);`)}return z.include(m,_),z}const z=Object.freeze(Object.defineProperty({__proto__:null,build:_},Symbol.toStringTag,{value:\"Module\"}));export{z as R,_ as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{set as e}from\"../core/libs/gl-matrix-2/math/vec2.js\";import{create as r}from\"../core/libs/gl-matrix-2/factories/vec2f64.js\";import{ScreenSpacePass as t}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";import{ReadDepth as o}from\"../views/3d/webgl-engine/core/shaderLibrary/output/ReadDepth.glsl.js\";import{CameraSpace as a}from\"../views/3d/webgl-engine/core/shaderLibrary/util/CameraSpace.glsl.js\";import{Float2BindUniform as n}from\"../views/3d/webgl-engine/core/shaderModules/Float2BindUniform.js\";import{Float2PassUniform as i}from\"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";import{FloatBindUniform as s}from\"../views/3d/webgl-engine/core/shaderModules/FloatBindUniform.js\";import{FloatPassUniform as c}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as l}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{Texture2DPassUniform as u}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{ShaderBuilder as f}from\"../views/webgl/ShaderBuilder.js\";const d=16;function m(){const r=new f,m=r.fragment;return r.include(t),r.include(a),m.include(o),m.uniforms.add(new s(\"radius\",(e=>v(e.camera)))).code.add(l`vec3 sphere[16] = vec3[16](\nvec3(0.186937, 0.0, 0.0),\nvec3(0.700542, 0.0, 0.0),\nvec3(-0.864858, -0.481795, -0.111713),\nvec3(-0.624773, 0.102853, -0.730153),\nvec3(-0.387172, 0.260319, 0.007229),\nvec3(-0.222367, -0.642631, -0.707697),\nvec3(-0.01336, -0.014956, 0.169662),\nvec3(0.122575, 0.1544, -0.456944),\nvec3(-0.177141, 0.85997, -0.42346),\nvec3(-0.131631, 0.814545, 0.524355),\nvec3(-0.779469, 0.007991, 0.624833),\nvec3(0.308092, 0.209288,0.35969),\nvec3(0.359331, -0.184533, -0.377458),\nvec3(0.192633, -0.482999, -0.065284),\nvec3(0.233538, 0.293706, -0.055139),\nvec3(0.417709, -0.386701, 0.442449)\n);\nfloat fallOffFunction(float vv, float vn, float bias) {\nfloat f = max(radius * radius - vv, 0.0);\nreturn f * f * f * max(vn - bias, 0.0);\n}`),m.code.add(l`float aoValueFromPositionsAndNormal(vec3 C, vec3 n_C, vec3 Q) {\nvec3 v = Q - C;\nfloat vv = dot(v, v);\nfloat vn = dot(normalize(v), n_C);\nreturn fallOffFunction(vv, vn, 0.1);\n}`),m.uniforms.add(new u(\"normalMap\",(e=>e.normalTexture)),new u(\"depthMap\",(e=>e.depthTexture)),new c(\"projScale\",(e=>e.projScale)),new u(\"rnm\",(e=>e.noiseTexture)),new i(\"rnmScale\",((r,t)=>e(p,t.camera.fullWidth/r.noiseTexture.descriptor.width,t.camera.fullHeight/r.noiseTexture.descriptor.height))),new c(\"intensity\",(e=>e.intensity)),new n(\"screenSize\",(r=>e(p,r.camera.fullWidth,r.camera.fullHeight)))),r.outputs.add(\"fragOcclusion\",\"float\"),m.main.add(l`\n      float depth = depthFromTexture(depthMap, uv);\n\n      // Early out if depth is out of range, such as in the sky\n      if (depth >= 1.0 || depth <= 0.0) {\n        fragOcclusion = 1.0;\n        return;\n      }\n\n      // get the normal of current fragment\n      vec4 norm4 = texture(normalMap, uv);\n      if(norm4.a != 1.0) {\n        fragOcclusion = 1.0;\n        return;\n      }\n      vec3 norm = vec3(-1.0) + 2.0 * norm4.xyz;\n\n      float currentPixelDepth = linearizeDepth(depth);\n      vec3 currentPixelPos = reconstructPosition(gl_FragCoord.xy, currentPixelDepth);\n\n      float sum = 0.0;\n      vec3 tapPixelPos;\n\n      vec3 fres = normalize(2.0 * texture(rnm, uv * rnmScale).xyz - 1.0);\n\n      // note: the factor 2.0 should not be necessary, but makes ssao much nicer.\n      // bug or deviation from CE somewhere else?\n      float ps = projScale / (2.0 * currentPixelPos.z * zScale.x + zScale.y);\n\n      for(int i = 0; i < ${l.int(d)}; ++i) {\n        vec2 unitOffset = reflect(sphere[i], fres).xy;\n        vec2 offset = vec2(-unitOffset * radius * ps);\n\n        // don't use current or very nearby samples\n        if( abs(offset.x) < 2.0 || abs(offset.y) < 2.0){\n          continue;\n        }\n\n        vec2 tc = vec2(gl_FragCoord.xy + offset);\n        if (tc.x < 0.0 || tc.y < 0.0 || tc.x > screenSize.x || tc.y > screenSize.y) continue;\n        vec2 tcTap = tc / screenSize;\n        float occluderFragmentDepth = linearDepthFromTexture(depthMap, tcTap);\n\n        tapPixelPos = reconstructPosition(tc, occluderFragmentDepth);\n\n        sum += aoValueFromPositionsAndNormal(currentPixelPos, norm, tapPixelPos);\n      }\n\n      // output the result\n      float A = max(1.0 - sum * intensity / float(${l.int(d)}), 0.0);\n\n      // Anti-tone map to reduce contrast and drag dark region farther: (x^0.2 + 1.2 * x^4) / 2.2\n      A = (pow(A, 0.2) + 1.2 * A * A * A * A) / 2.2;\n\n      fragOcclusion = A;`),r}function v(e){return Math.max(10,20*e.computeScreenPixelSizeAtDist(Math.abs(4*e.relativeElevation)))}const p=r(),g=Object.freeze(Object.defineProperty({__proto__:null,build:m,getRadius:v},Symbol.toStringTag,{value:\"Module\"}));export{g as S,m as b,v as g};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{ScreenSpacePass as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";import{ReadDepth as r}from\"../views/3d/webgl-engine/core/shaderLibrary/output/ReadDepth.glsl.js\";import{Float2DrawUniform as t}from\"../views/3d/webgl-engine/core/shaderModules/Float2DrawUniform.js\";import{FloatPassUniform as o}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as a}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{Texture2DDrawUniform as l}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DDrawUniform.js\";import{Texture2DPassUniform as n}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{ShaderBuilder as s}from\"../views/webgl/ShaderBuilder.js\";const d=4;function i(){const i=new s,f=i.fragment;i.include(e);const u=(d+1)/2,c=1/(2*u*u);return f.include(r),f.uniforms.add(new n(\"depthMap\",(e=>e.depthTexture)),new l(\"tex\",(e=>e.colorTexture)),new t(\"blurSize\",(e=>e.blurSize)),new o(\"projScale\",((e,r)=>{const t=r.camera.distance;return t>5e4?Math.max(0,e.projScale-(t-5e4)):e.projScale}))),f.code.add(a`\n    void blurFunction(vec2 uv, float r, float center_d, float sharpness, inout float wTotal, inout float bTotal) {\n      float c = texture(tex, uv).r;\n      float d = linearDepthFromTexture(depthMap, uv);\n\n      float ddiff = d - center_d;\n\n      float w = exp(-r * r * ${a.float(c)} - ddiff * ddiff * sharpness);\n      wTotal += w;\n      bTotal += w * c;\n    }\n  `),i.outputs.add(\"fragBlur\",\"float\"),f.main.add(a`\n    float b = 0.0;\n    float w_total = 0.0;\n\n    float center_d = linearDepthFromTexture(depthMap, uv);\n\n    float sharpness = -0.05 * projScale / center_d;\n    for (int r = -${a.int(d)}; r <= ${a.int(d)}; ++r) {\n      float rf = float(r);\n      vec2 uvOffset = uv + rf * blurSize;\n      blurFunction(uvOffset, rf, center_d, sharpness, w_total, b);\n    }\n    fragBlur = b / w_total;`),i}const f=Object.freeze(Object.defineProperty({__proto__:null,build:i},Symbol.toStringTag,{value:\"Module\"}));export{f as S,i as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{ColorMixModeEnum as o}from\"../../../../../layers/support/symbolColorUtils.js\";import{glsl as l}from\"../../../../core/shaderModules/glsl.js\";function a(a){a.vertex.code.add(l`\n    vec4 decodeSymbolColor(vec4 symbolColor, out int colorMixMode) {\n      float symbolAlpha = 0.0;\n\n      const float maxTint = 85.0;\n      const float maxReplace = 170.0;\n      const float scaleAlpha = 3.0;\n\n      if (symbolColor.a > maxReplace) {\n        colorMixMode = ${l.int(o.Multiply)};\n        symbolAlpha = scaleAlpha * (symbolColor.a - maxReplace);\n      } else if (symbolColor.a > maxTint) {\n        colorMixMode = ${l.int(o.Replace)};\n        symbolAlpha = scaleAlpha * (symbolColor.a - maxTint);\n      } else if (symbolColor.a > 0.0) {\n        colorMixMode = ${l.int(o.Tint)};\n        symbolAlpha = scaleAlpha * symbolColor.a;\n      } else {\n        colorMixMode = ${l.int(o.Multiply)};\n        symbolAlpha = 0.0;\n      }\n\n      return vec4(symbolColor.r, symbolColor.g, symbolColor.b, symbolAlpha);\n    }\n  `)}export{a as DecodeSymbolColor};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{glsl as o}from\"../shaderModules/glsl.js\";function c(c){c.vertex.code.add(o`vec4 offsetBackfacingClipPosition(vec4 posClip, vec3 posWorld, vec3 normalWorld, vec3 camPosWorld) {\nvec3 camToVert = posWorld - camPosWorld;\nbool isBackface = dot(camToVert, normalWorld) > 0.0;\nif (isBackface) {\nposClip.z += 0.0000003 * posClip.w;\n}\nreturn posClip;\n}`)}export{c as Offset};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{normalFromMat4 as e}from\"../../../../../../core/libs/gl-matrix-2/math/mat3.js\";import{create as r}from\"../../../../../../core/libs/gl-matrix-2/factories/mat3f64.js\";import{IDENTITY as o}from\"../../../../../../core/libs/gl-matrix-2/factories/mat4f64.js\";import{i as a}from\"../../../../../../chunks/vec32.js\";import{create as n}from\"../../../../../../core/libs/gl-matrix-2/factories/vec3f64.js\";import{ShaderOutput as i}from\"../ShaderOutput.js\";import{DoublePrecision as t}from\"../util/DoublePrecision.glsl.js\";import{addViewNormal as s}from\"../util/View.glsl.js\";import{Float3BindUniform as l}from\"../../shaderModules/Float3BindUniform.js\";import{glsl as m}from\"../../shaderModules/glsl.js\";import{Matrix3PassUniform as c}from\"../../shaderModules/Matrix3PassUniform.js\";import{Matrix4PassUniform as d}from\"../../shaderModules/Matrix4PassUniform.js\";import{VertexAttribute as u}from\"../../../lib/VertexAttribute.js\";import{encodeDoubleHi as v,encodeDoubleLo as g}from\"../../../../../webgl/doublePrecisionUtils.js\";import{NoParameters as p}from\"../../../../../webgl/NoParameters.js\";class x extends p{constructor(){super(...arguments),this.modelTransformation=null}}const f=r();function M(r,n){const p=n.hasModelTransformation,x=n.instancedDoublePrecision;p&&(r.vertex.uniforms.add(new d(\"model\",(e=>e.modelTransformation??o))),r.vertex.uniforms.add(new c(\"normalLocalOriginFromModel\",(r=>(e(f,r.modelTransformation??o),f))))),n.instanced&&x&&(r.attributes.add(u.INSTANCEMODELORIGINHI,\"vec3\"),r.attributes.add(u.INSTANCEMODELORIGINLO,\"vec3\"),r.attributes.add(u.INSTANCEMODEL,\"mat3\"),r.attributes.add(u.INSTANCEMODELNORMAL,\"mat3\"));const M=r.vertex;x&&(M.include(t,n),M.uniforms.add(new l(\"viewOriginHi\",(e=>v(a(O,e.camera.viewInverseTransposeMatrix[3],e.camera.viewInverseTransposeMatrix[7],e.camera.viewInverseTransposeMatrix[11]),O))),new l(\"viewOriginLo\",(e=>g(a(O,e.camera.viewInverseTransposeMatrix[3],e.camera.viewInverseTransposeMatrix[7],e.camera.viewInverseTransposeMatrix[11]),O))))),M.code.add(m`\n    vec3 getVertexInLocalOriginSpace() {\n      return ${p?x?\"(model * vec4(instanceModel * localPosition().xyz, 1.0)).xyz\":\"(model * localPosition()).xyz\":x?\"instanceModel * localPosition().xyz\":\"localPosition().xyz\"};\n    }\n\n    vec3 subtractOrigin(vec3 _pos) {\n      ${x?m`\n          // Negated inputs are intentionally the first two arguments. The other way around the obfuscation in dpAdd() stopped\n          // working for macOS 14+ and iOS 17+.\n          // Issue: https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/56280\n          vec3 originDelta = dpAdd(-instanceModelOriginHi, -instanceModelOriginLo, viewOriginHi, viewOriginLo);\n          return _pos - originDelta;`:\"return vpos;\"}\n    }\n    `),M.code.add(m`\n    vec3 dpNormal(vec4 _normal) {\n      return normalize(${p?x?\"normalLocalOriginFromModel * (instanceModelNormal * _normal.xyz)\":\"normalLocalOriginFromModel * _normal.xyz\":x?\"instanceModelNormal * _normal.xyz\":\"_normal.xyz\"});\n    }\n    `),n.output===i.Normal&&(s(M),M.code.add(m`\n    vec3 dpNormalView(vec4 _normal) {\n      return normalize((viewNormal * ${p?x?\"vec4(normalLocalOriginFromModel * (instanceModelNormal * _normal.xyz), 1.0)\":\"vec4(normalLocalOriginFromModel * _normal.xyz, 1.0)\":x?\"vec4(instanceModelNormal * _normal.xyz, 1.0)\":\"_normal\"}).xyz);\n    }\n    `)),n.hasVertexTangents&&M.code.add(m`\n    vec4 dpTransformVertexTangent(vec4 _tangent) {\n      ${p?x?\"return vec4(normalLocalOriginFromModel * (instanceModelNormal * _tangent.xyz), _tangent.w);\":\"return vec4(normalLocalOriginFromModel * _tangent.xyz, _tangent.w);\":x?\"return vec4(instanceModelNormal * _tangent.xyz, _tangent.w);\":\"return _tangent;\"}\n    }`)}const O=n();export{x as InstancedDoublePassParameters,M as InstancedDoublePrecision};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{neverReached as e}from\"../../../../../../core/compilerUtils.js\";import{glsl as r}from\"../../shaderModules/glsl.js\";import{VertexAttribute as o}from\"../../../lib/VertexAttribute.js\";function t(t,i){switch(i.normalType){case a.Compressed:t.attributes.add(o.NORMALCOMPRESSED,\"vec2\"),t.vertex.code.add(r`vec3 decompressNormal(vec2 normal) {\nfloat z = 1.0 - abs(normal.x) - abs(normal.y);\nreturn vec3(normal + sign(normal) * min(z, 0.0), z);\n}\nvec3 normalModel() {\nreturn decompressNormal(normalCompressed);\n}`);break;case a.Attribute:t.attributes.add(o.NORMAL,\"vec3\"),t.vertex.code.add(r`vec3 normalModel() {\nreturn normal;\n}`);break;case a.ScreenDerivative:t.fragment.code.add(r`vec3 screenDerivativeNormal(vec3 positionView) {\nreturn normalize(cross(dFdx(positionView), dFdy(positionView)));\n}`);break;default:e(i.normalType);case a.COUNT:}}var a;!function(e){e[e.Attribute=0]=\"Attribute\",e[e.Compressed=1]=\"Compressed\",e[e.ScreenDerivative=2]=\"ScreenDerivative\",e[e.COUNT=3]=\"COUNT\"}(a||(a={}));export{t as NormalAttribute,a as NormalType};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{DecodeSymbolColor as o}from\"../../../collections/Component/Material/shader/DecodeSymbolColor.glsl.js\";import{glsl as r}from\"../../shaderModules/glsl.js\";import{IntegerPassUniform as e}from\"../../shaderModules/IntegerPassUniform.js\";import{VertexAttribute as l}from\"../../../lib/VertexAttribute.js\";import{colorMixModes as d}from\"../../../materials/internal/MaterialUtil.js\";function i(i,t){t.hasSymbolColors?(i.include(o),i.attributes.add(l.SYMBOLCOLOR,\"vec4\"),i.varyings.add(\"colorMixMode\",\"mediump float\"),i.vertex.code.add(r`int symbolColorMixMode;\nvec4 getSymbolColor() {\nreturn decodeSymbolColor(symbolColor, symbolColorMixMode) * 0.003921568627451;\n}\nvoid forwardColorMixMode() {\ncolorMixMode = float(symbolColorMixMode) + 0.5;\n}`)):(i.fragment.uniforms.add(new e(\"colorMixMode\",(o=>d[o.colorMixMode]))),i.vertex.code.add(r`vec4 getSymbolColor() { return vec4(1.0); }\nvoid forwardColorMixMode() {}`))}export{i as SymbolColor};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{neverReached as r}from\"../../../../../../core/compilerUtils.js\";import{create as o}from\"../../../../../../core/libs/gl-matrix-2/factories/mat3f64.js\";import{create as a}from\"../../../../../../core/libs/gl-matrix-2/factories/vec4f64.js\";import{NormalType as e,NormalAttribute as l}from\"./NormalAttribute.glsl.js\";import{VertexPositionPassParameters as m,VertexPositionDrawParameters as s}from\"./VertexPosition.glsl.js\";import{glsl as t}from\"../../shaderModules/glsl.js\";import{Matrix3DrawUniform as i}from\"../../shaderModules/Matrix3DrawUniform.js\";import{Matrix3PassUniform as d}from\"../../shaderModules/Matrix3PassUniform.js\";function c(o,a){switch(a.normalType){case e.Attribute:case e.Compressed:o.include(l,a),o.varyings.add(\"vNormalWorld\",\"vec3\"),o.varyings.add(\"vNormalView\",\"vec3\"),o.vertex.uniforms.add(new i(\"transformNormalGlobalFromModel\",(r=>r.transformNormalGlobalFromModel)),new d(\"transformNormalViewFromGlobal\",(r=>r.transformNormalViewFromGlobal))),o.vertex.code.add(t`void forwardNormal() {\nvNormalWorld = transformNormalGlobalFromModel * normalModel();\nvNormalView = transformNormalViewFromGlobal * vNormalWorld;\n}`);break;case e.ScreenDerivative:o.vertex.code.add(t`void forwardNormal() {}`);break;default:r(a.normalType);case e.COUNT:}}class f extends m{constructor(){super(...arguments),this.transformNormalViewFromGlobal=o()}}class n extends s{constructor(){super(...arguments),this.transformNormalGlobalFromModel=o(),this.toMapSpace=a()}}export{c as VertexNormal,n as VertexNormalDrawParameters,f as VertexNormalPassParameters};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{addNearFar as e}from\"../ForwardLinearDepth.glsl.js\";import{ShaderOutput as r}from\"../ShaderOutput.js\";import{SliceDraw as o}from\"../Slice.glsl.js\";import{Transform as t}from\"../Transform.glsl.js\";import{NormalAttribute as i,NormalType as a}from\"../attributes/NormalAttribute.glsl.js\";import{ObjectAndLayerIdColor as s}from\"../attributes/ObjectAndLayerIdColor.glsl.js\";import{TextureCoordinateAttribute as l}from\"../attributes/TextureCoordinateAttribute.glsl.js\";import{VertexNormal as d}from\"../attributes/VertexNormal.glsl.js\";import{OutputDepth as n}from\"../output/OutputDepth.glsl.js\";import{OutputHighlight as c}from\"../output/OutputHighlight.glsl.js\";import{VisualVariables as u}from\"../shading/VisualVariables.glsl.js\";import{DiscardOrAdjustAlphaPass as p}from\"../util/DiscardOrAdjustAlpha.glsl.js\";import{addProjViewLocalOrigin as m}from\"../util/View.glsl.js\";import{glsl as v,If as g}from\"../../shaderModules/glsl.js\";import{Texture2DPassUniform as f}from\"../../shaderModules/Texture2DPassUniform.js\";import{AlphaDiscardMode as x}from\"../../../lib/basicInterfaces.js\";function h(h,O){const{vertex:j,fragment:w}=h,b=O.hasColorTexture&&O.alphaDiscardMode!==x.Opaque,{output:C,normalType:V,hasColorTextureTransform:A}=O;switch(C){case r.Depth:m(j,O),h.include(t,O),h.fragment.include(o,O),h.include(l,O),b&&w.uniforms.add(new f(\"tex\",(e=>e.texture))),j.main.add(v`vpos = getVertexInLocalOriginSpace();\nvpos = subtractOrigin(vpos);\nvpos = addVerticalOffset(vpos, localOrigin);\ngl_Position = transformPosition(proj, view, vpos);\nforwardTextureCoordinates();`),h.include(p,O),w.main.add(v`\n        discardBySlice(vpos);\n        ${g(b,v`vec4 texColor = texture(tex, ${A?\"colorUV\":\"vuv0\"});\n                discardOrAdjustAlpha(texColor);`)}`);break;case r.Shadow:case r.ShadowHighlight:case r.ShadowExcludeHighlight:case r.ViewshedShadow:case r.ObjectAndLayerIdColor:m(j,O),h.include(t,O),h.include(l,O),h.include(u,O),h.include(n,O),h.fragment.include(o,O),h.include(s,O),e(h),h.varyings.add(\"depth\",\"float\"),b&&w.uniforms.add(new f(\"tex\",(e=>e.texture))),j.main.add(v`vpos = getVertexInLocalOriginSpace();\nvpos = subtractOrigin(vpos);\nvpos = addVerticalOffset(vpos, localOrigin);\ngl_Position = transformPositionWithDepth(proj, view, vpos, nearFar, depth);\nforwardTextureCoordinates();\nforwardObjectAndLayerIdColor();`),h.include(p,O),w.main.add(v`\n        discardBySlice(vpos);\n        ${g(b,v`vec4 texColor = texture(tex, ${A?\"colorUV\":\"vuv0\"});\n                discardOrAdjustAlpha(texColor);`)}\n        ${C===r.ObjectAndLayerIdColor?v`outputObjectAndLayerIdColor();`:v`outputDepth(depth);`}`);break;case r.Normal:{m(j,O),h.include(t,O),h.include(i,O),h.include(d,O),h.include(l,O),h.include(u,O),b&&w.uniforms.add(new f(\"tex\",(e=>e.texture))),V===a.ScreenDerivative&&h.varyings.add(\"vPositionView\",\"vec3\");const e=V===a.Attribute||V===a.Compressed;j.main.add(v`\n        vpos = getVertexInLocalOriginSpace();\n        ${e?v`vNormalWorld = dpNormalView(vvLocalNormal(normalModel()));`:v`vPositionView = (view * vec4(vpos, 1.0)).xyz;`}\n        vpos = subtractOrigin(vpos);\n        vpos = addVerticalOffset(vpos, localOrigin);\n        gl_Position = transformPosition(proj, view, vpos);\n        forwardTextureCoordinates();`),h.fragment.include(o,O),h.include(p,O),w.main.add(v`\n        discardBySlice(vpos);\n        ${g(b,v`vec4 texColor = texture(tex, ${A?\"colorUV\":\"vuv0\"});\n                discardOrAdjustAlpha(texColor);`)}\n\n        ${V===a.ScreenDerivative?v`vec3 normal = screenDerivativeNormal(vPositionView);`:v`vec3 normal = normalize(vNormalWorld);\n                    if (gl_FrontFacing == false){\n                      normal = -normal;\n                    }`}\n        fragColor = vec4(0.5 + 0.5 * normal, 1.0);`);break}case r.Highlight:m(j,O),h.include(t,O),h.include(l,O),h.include(u,O),b&&w.uniforms.add(new f(\"tex\",(e=>e.texture))),j.main.add(v`vpos = getVertexInLocalOriginSpace();\nvpos = subtractOrigin(vpos);\nvpos = addVerticalOffset(vpos, localOrigin);\ngl_Position = transformPosition(proj, view, vpos);\nforwardTextureCoordinates();`),h.fragment.include(o,O),h.include(p,O),h.include(c,O),w.main.add(v`\n        discardBySlice(vpos);\n        ${g(b,v`vec4 texColor = texture(tex, ${A?\"colorUV\":\"vuv0\"});\n                discardOrAdjustAlpha(texColor);`)}\n        calculateOcclusionAndOutputHighlight();`)}}export{h as DefaultMaterialAuxiliaryPasses};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{ShaderOutput as t}from\"../ShaderOutput.js\";import{Rgba4FloatEncoding as a}from\"../util/RgbaFloat16Encoding.glsl.js\";import{glsl as o}from\"../../shaderModules/glsl.js\";function e(e,l){switch(l.output){case t.Shadow:case t.ShadowHighlight:case t.ShadowExcludeHighlight:case t.ViewshedShadow:e.fragment.include(a),e.fragment.code.add(o`float _calculateFragDepth(const in float depth) {\nconst float SLOPE_SCALE = 2.0;\nconst float BIAS = 20.0 * .000015259;\nfloat m = max(abs(dFdx(depth)), abs(dFdy(depth)));\nreturn depth + SLOPE_SCALE * m + BIAS;\n}\nvoid outputDepth(float _linearDepth) {\nfragColor = floatToRgba4(_calculateFragDepth(_linearDepth));\n}`)}}export{e as OutputDepth};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{IDENTITY as e}from\"../../../../../../core/libs/gl-matrix-2/factories/mat3f64.js\";import{ONES as t}from\"../../../../../../core/libs/gl-matrix-2/factories/vec2f64.js\";import{TextureCoordinateType as r}from\"../attributes/TextureCoordinateAttribute.glsl.js\";import{VertexTextureCoordinates as a}from\"../attributes/VertexTextureCoordinates.glsl.js\";import{NormalsDoubleSidedMode as n}from\"./Normals.glsl.js\";import{Float2PassUniform as o}from\"../../shaderModules/Float2PassUniform.js\";import{glsl as s}from\"../../shaderModules/glsl.js\";import{Matrix3PassUniform as m}from\"../../shaderModules/Matrix3PassUniform.js\";import{Texture2DDrawUniform as d}from\"../../shaderModules/Texture2DDrawUniform.js\";import{Texture2DPassUniform as l}from\"../../shaderModules/Texture2DPassUniform.js\";import{VertexAttribute as i}from\"../../../lib/VertexAttribute.js\";import{BindType as c}from\"../../../../../webgl/BindType.js\";function T(T,u){const x=T.fragment;u.hasVertexTangents?(T.attributes.add(i.TANGENT,\"vec4\"),T.varyings.add(\"vTangent\",\"vec4\"),u.doubleSidedMode===n.WindingOrder?x.code.add(s`mat3 computeTangentSpace(vec3 normal) {\nfloat tangentHeadedness = gl_FrontFacing ? vTangent.w : -vTangent.w;\nvec3 tangent = normalize(gl_FrontFacing ? vTangent.xyz : -vTangent.xyz);\nvec3 bitangent = cross(normal, tangent) * tangentHeadedness;\nreturn mat3(tangent, bitangent, normal);\n}`):x.code.add(s`mat3 computeTangentSpace(vec3 normal) {\nfloat tangentHeadedness = vTangent.w;\nvec3 tangent = normalize(vTangent.xyz);\nvec3 bitangent = cross(normal, tangent) * tangentHeadedness;\nreturn mat3(tangent, bitangent, normal);\n}`)):x.code.add(s`mat3 computeTangentSpace(vec3 normal, vec3 pos, vec2 st) {\nvec3 Q1 = dFdx(pos);\nvec3 Q2 = dFdy(pos);\nvec2 stx = dFdx(st);\nvec2 sty = dFdy(st);\nfloat det = stx.t * sty.s - sty.t * stx.s;\nvec3 T = stx.t * Q2 - sty.t * Q1;\nT = T - normal * dot(normal, T);\nT *= inversesqrt(max(dot(T,T), 1.e-10));\nvec3 B = sign(det) * cross(normal, T);\nreturn mat3(T, B, normal);\n}`),u.textureCoordinateType!==r.None&&(T.include(a,u),x.uniforms.add(u.bindType===c.Pass?new l(\"normalTexture\",(e=>e.textureNormal)):new d(\"normalTexture\",(e=>e.textureNormal))),u.hasNormalTextureTransform&&(x.uniforms.add(new o(\"scale\",(e=>e.scale??t))),x.uniforms.add(new m(\"normalTextureTransformMatrix\",(t=>t.normalTextureTransformMatrix??e)))),x.code.add(s`vec3 computeTextureNormal(mat3 tangentSpace, vec2 uv) {\nvec3 rawNormal = textureLookup(normalTexture, uv).rgb * 2.0 - 1.0;`),u.hasNormalTextureTransform&&x.code.add(s`mat3 normalTextureRotation = mat3(normalTextureTransformMatrix[0][0]/scale[0], normalTextureTransformMatrix[0][1]/scale[1], 0.0,\nnormalTextureTransformMatrix[1][0]/scale[0], normalTextureTransformMatrix[1][1]/scale[1], 0.0,\n0.0, 0.0, 0.0 );\nrawNormal.xy = (normalTextureRotation * vec3(rawNormal.x, rawNormal.y, 1.0)).xy;`),x.code.add(s`return tangentSpace * rawNormal;\n}`))}export{T as ComputeNormalTexture};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{i}from\"../../../../../../chunks/vec32.js\";import{create as n}from\"../../../../../../core/libs/gl-matrix-2/factories/vec3f64.js\";import{s as t}from\"../../../../../../chunks/vec42.js\";import{create as e}from\"../../../../../../core/libs/gl-matrix-2/factories/vec4f64.js\";import{PBRMode as h}from\"./PhysicallyBasedRenderingParameters.glsl.js\";import{Float3BindUniform as s}from\"../../shaderModules/Float3BindUniform.js\";import{Float4BindUniform as g}from\"../../shaderModules/Float4BindUniform.js\";import{glsl as r}from\"../../shaderModules/glsl.js\";function m(n,e){const m=n.fragment,o=void 0!==e.lightingSphericalHarmonicsOrder?e.lightingSphericalHarmonicsOrder:2;0===o?(m.uniforms.add(new s(\"lightingAmbientSH0\",(({lighting:n})=>i(l,n.sh.r[0],n.sh.g[0],n.sh.b[0])))),m.code.add(r`vec3 calculateAmbientIrradiance(vec3 normal, float ambientOcclusion) {\nvec3 ambientLight = 0.282095 * lightingAmbientSH0;\nreturn ambientLight * (1.0 - ambientOcclusion);\n}`)):1===o?(m.uniforms.add(new g(\"lightingAmbientSH_R\",(({lighting:i})=>t(a,i.sh.r[0],i.sh.r[1],i.sh.r[2],i.sh.r[3]))),new g(\"lightingAmbientSH_G\",(({lighting:i})=>t(a,i.sh.g[0],i.sh.g[1],i.sh.g[2],i.sh.g[3]))),new g(\"lightingAmbientSH_B\",(({lighting:i})=>t(a,i.sh.b[0],i.sh.b[1],i.sh.b[2],i.sh.b[3])))),m.code.add(r`vec3 calculateAmbientIrradiance(vec3 normal, float ambientOcclusion) {\nvec4 sh0 = vec4(\n0.282095,\n0.488603 * normal.x,\n0.488603 * normal.z,\n0.488603 * normal.y\n);\nvec3 ambientLight = vec3(\ndot(lightingAmbientSH_R, sh0),\ndot(lightingAmbientSH_G, sh0),\ndot(lightingAmbientSH_B, sh0)\n);\nreturn ambientLight * (1.0 - ambientOcclusion);\n}`)):2===o&&(m.uniforms.add(new s(\"lightingAmbientSH0\",(({lighting:n})=>i(l,n.sh.r[0],n.sh.g[0],n.sh.b[0]))),new g(\"lightingAmbientSH_R1\",(({lighting:i})=>t(a,i.sh.r[1],i.sh.r[2],i.sh.r[3],i.sh.r[4]))),new g(\"lightingAmbientSH_G1\",(({lighting:i})=>t(a,i.sh.g[1],i.sh.g[2],i.sh.g[3],i.sh.g[4]))),new g(\"lightingAmbientSH_B1\",(({lighting:i})=>t(a,i.sh.b[1],i.sh.b[2],i.sh.b[3],i.sh.b[4]))),new g(\"lightingAmbientSH_R2\",(({lighting:i})=>t(a,i.sh.r[5],i.sh.r[6],i.sh.r[7],i.sh.r[8]))),new g(\"lightingAmbientSH_G2\",(({lighting:i})=>t(a,i.sh.g[5],i.sh.g[6],i.sh.g[7],i.sh.g[8]))),new g(\"lightingAmbientSH_B2\",(({lighting:i})=>t(a,i.sh.b[5],i.sh.b[6],i.sh.b[7],i.sh.b[8])))),m.code.add(r`vec3 calculateAmbientIrradiance(vec3 normal, float ambientOcclusion) {\nvec3 ambientLight = 0.282095 * lightingAmbientSH0;\nvec4 sh1 = vec4(\n0.488603 * normal.x,\n0.488603 * normal.z,\n0.488603 * normal.y,\n1.092548 * normal.x * normal.y\n);\nvec4 sh2 = vec4(\n1.092548 * normal.y * normal.z,\n0.315392 * (3.0 * normal.z * normal.z - 1.0),\n1.092548 * normal.x * normal.z,\n0.546274 * (normal.x * normal.x - normal.y * normal.y)\n);\nambientLight += vec3(\ndot(lightingAmbientSH_R1, sh1),\ndot(lightingAmbientSH_G1, sh1),\ndot(lightingAmbientSH_B1, sh1)\n);\nambientLight += vec3(\ndot(lightingAmbientSH_R2, sh2),\ndot(lightingAmbientSH_G2, sh2),\ndot(lightingAmbientSH_B2, sh2)\n);\nreturn ambientLight * (1.0 - ambientOcclusion);\n}`),e.pbrMode!==h.Normal&&e.pbrMode!==h.Schematic||m.code.add(r`const vec3 skyTransmittance = vec3(0.9, 0.9, 1.0);\nvec3 calculateAmbientRadiance(float ambientOcclusion)\n{\nvec3 ambientLight = 1.2 * (0.282095 * lightingAmbientSH0) - 0.2;\nreturn ambientLight *= (1.0 - ambientOcclusion) * skyTransmittance;\n}`))}const l=n(),a=e();export{m as EvaluateAmbientLighting};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{glsl as e}from\"../../shaderModules/glsl.js\";import{Texture2DBindUniform as s}from\"../../shaderModules/Texture2DBindUniform.js\";import{blurSizePixels as r}from\"../../../effects/ssao/SSAO.js\";function t(t,o){const n=t.fragment;o.receiveAmbientOcclusion?(n.uniforms.add(new s(\"ssaoTex\",(e=>e.ssao?.getTexture()))),n.constants.add(\"blurSizePixelsInverse\",\"float\",1/r),n.code.add(e`float evaluateAmbientOcclusionInverse() {\nvec2 ssaoTextureSizeInverse = 1.0 / vec2(textureSize(ssaoTex, 0));\nreturn texture(ssaoTex, gl_FragCoord.xy * blurSizePixelsInverse * ssaoTextureSizeInverse).r;\n}\nfloat evaluateAmbientOcclusion() {\nreturn 1.0 - evaluateAmbientOcclusionInverse();\n}`)):n.code.add(e`float evaluateAmbientOcclusionInverse() { return 1.0; }\nfloat evaluateAmbientOcclusion() { return 0.0; }`)}export{t as EvaluateAmbientOcclusion};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{colorGamma as i}from\"../../../../../../colorUtils.js\";import{neverReached as n}from\"../../../../../../core/compilerUtils.js\";import{EvaluateAmbientLighting as e}from\"./EvaluateAmbientLighting.glsl.js\";import{EvaluateAmbientOcclusion as o}from\"./EvaluateAmbientOcclusion.glsl.js\";import{addMainLightDirection as t,addMainLightIntensity as a,applyShading as r}from\"./MainLighting.glsl.js\";import{PhysicallyBasedRendering as l}from\"./PhysicallyBasedRendering.glsl.js\";import{PBRMode as c}from\"./PhysicallyBasedRenderingParameters.glsl.js\";import{PiUtils as d}from\"./PiUtils.glsl.js\";import{BooleanBindUniform as s}from\"../../shaderModules/BooleanBindUniform.js\";import{FloatBindUniform as m}from\"../../shaderModules/FloatBindUniform.js\";import{glsl as g}from\"../../shaderModules/glsl.js\";import{ambientBoost as h}from\"../../../lighting/SceneLighting.js\";function u(i){i.constants.add(\"ambientBoostFactor\",\"float\",h)}function p(i){i.uniforms.add(new m(\"lightingGlobalFactor\",(i=>i.lighting.globalFactor)))}function v(h,v){const f=h.fragment;switch(h.include(o,v),v.pbrMode!==c.Disabled&&h.include(l,v),h.include(e,v),h.include(d),f.code.add(g`\n    const float GAMMA_SRGB = ${g.float(i)};\n    const float INV_GAMMA_SRGB = 0.4761904;\n    ${v.pbrMode===c.Disabled?\"\":\"const vec3 GROUND_REFLECTANCE = vec3(0.2);\"}\n  `),u(f),p(f),t(f),f.code.add(g`\n    float additionalDirectedAmbientLight(vec3 vPosWorld) {\n      float vndl = dot(${v.spherical?g`normalize(vPosWorld)`:g`vec3(0.0, 0.0, 1.0)`}, mainLightDirection);\n      return smoothstep(0.0, 1.0, clamp(vndl * 2.5, 0.0, 1.0));\n    }\n  `),a(f),f.code.add(g`vec3 evaluateAdditionalLighting(float ambientOcclusion, vec3 vPosWorld) {\nfloat additionalAmbientScale = additionalDirectedAmbientLight(vPosWorld);\nreturn (1.0 - ambientOcclusion) * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor * mainLightIntensity;\n}`),v.pbrMode){case c.Disabled:case c.WaterOnIntegratedMesh:case c.Water:h.include(r),f.code.add(g`vec3 evaluateSceneLighting(vec3 normalWorld, vec3 albedo, float shadow, float ssao, vec3 additionalLight) {\nvec3 mainLighting = applyShading(normalWorld, shadow);\nvec3 ambientLighting = calculateAmbientIrradiance(normalWorld, ssao);\nvec3 albedoLinear = pow(albedo, vec3(GAMMA_SRGB));\nvec3 totalLight = mainLighting + ambientLighting + additionalLight;\ntotalLight = min(totalLight, vec3(PI));\nvec3 outColor = vec3((albedoLinear / PI) * totalLight);\nreturn pow(outColor, vec3(INV_GAMMA_SRGB));\n}`);break;case c.Normal:case c.Schematic:f.code.add(g`const float fillLightIntensity = 0.25;\nconst float horizonLightDiffusion = 0.4;\nconst float additionalAmbientIrradianceFactor = 0.02;\nvec3 evaluateSceneLightingPBR(vec3 normal, vec3 albedo, float shadow, float ssao, vec3 additionalLight, vec3 viewDir, vec3 normalGround, vec3 mrr, vec4 _emission, float additionalAmbientIrradiance)\n{\nvec3 viewDirection = -viewDir;\nvec3 h = normalize(viewDirection + mainLightDirection);\nPBRShadingInfo inputs;\ninputs.NdotV = clamp(abs(dot(normal, viewDirection)), 0.001, 1.0);\ninputs.NdotNG = clamp(dot(normal, normalGround), -1.0, 1.0);\nvec3 reflectedView = normalize(reflect(viewDirection, normal));\ninputs.RdotNG = clamp(dot(reflectedView, normalGround), -1.0, 1.0);\ninputs.albedoLinear = pow(albedo, vec3(GAMMA_SRGB));\ninputs.ssao = ssao;\ninputs.metalness = mrr[0];\ninputs.roughness = clamp(mrr[1] * mrr[1], 0.001, 0.99);`),f.code.add(g`inputs.f0 = (0.16 * mrr[2] * mrr[2]) * (1.0 - inputs.metalness) + inputs.albedoLinear * inputs.metalness;\ninputs.f90 = vec3(clamp(dot(inputs.f0, vec3(50.0 * 0.33)), 0.0, 1.0));\ninputs.diffuseColor = inputs.albedoLinear * (vec3(1.0) - inputs.f0) * (1.0 - inputs.metalness);`),v.useFillLights?f.uniforms.add(new s(\"hasFillLights\",(i=>i.enableFillLights))):f.constants.add(\"hasFillLights\",\"bool\",!1),f.code.add(g`vec3 ambientDir = vec3(5.0 * normalGround[1] - normalGround[0] * normalGround[2], - 5.0 * normalGround[0] - normalGround[2] * normalGround[1], normalGround[1] * normalGround[1] + normalGround[0] * normalGround[0]);\nambientDir = ambientDir != vec3(0.0) ? normalize(ambientDir) : normalize(vec3(5.0, -1.0, 0.0));\ninputs.NdotAmbDir = hasFillLights ? abs(dot(normal, ambientDir)) : 1.0;\nfloat NdotL = clamp(dot(normal, mainLightDirection), 0.001, 1.0);\nvec3 mainLightIrradianceComponent = NdotL * (1.0 - shadow) * mainLightIntensity;\nvec3 fillLightsIrradianceComponent = inputs.NdotAmbDir * mainLightIntensity * fillLightIntensity;\nvec3 ambientLightIrradianceComponent = calculateAmbientIrradiance(normal, ssao) + additionalLight;\ninputs.skyIrradianceToSurface = ambientLightIrradianceComponent + mainLightIrradianceComponent + fillLightsIrradianceComponent ;\ninputs.groundIrradianceToSurface = GROUND_REFLECTANCE * ambientLightIrradianceComponent + mainLightIrradianceComponent + fillLightsIrradianceComponent ;`),f.uniforms.add(new m(\"lightingSpecularStrength\",(i=>i.lighting.mainLight.specularStrength)),new m(\"lightingEnvironmentStrength\",(i=>i.lighting.mainLight.environmentStrength))).code.add(g`vec3 horizonRingDir = inputs.RdotNG * normalGround - reflectedView;\nvec3 horizonRingH = normalize(viewDirection + horizonRingDir);\ninputs.NdotH_Horizon = dot(normal, horizonRingH);\nfloat NdotH = clamp(dot(normal, h), 0.0, 1.0);\nvec3 mainLightRadianceComponent = lightingSpecularStrength * normalDistribution(NdotH, inputs.roughness) * mainLightIntensity * (1.0 - shadow);\nvec3 horizonLightRadianceComponent = lightingEnvironmentStrength * normalDistribution(inputs.NdotH_Horizon, min(inputs.roughness + horizonLightDiffusion, 1.0)) * mainLightIntensity * fillLightIntensity;\nvec3 ambientLightRadianceComponent = lightingEnvironmentStrength * calculateAmbientRadiance(ssao) + additionalLight;\nfloat normalDirectionModifier = mix(1., min(mix(0.1, 2.0, (inputs.NdotNG + 1.) * 0.5), 1.0), clamp(inputs.roughness * 5.0, 0.0 , 1.0));\ninputs.skyRadianceToSurface = (ambientLightRadianceComponent + horizonLightRadianceComponent) * normalDirectionModifier + mainLightRadianceComponent;\ninputs.groundRadianceToSurface = 0.5 * GROUND_REFLECTANCE * (ambientLightRadianceComponent + horizonLightRadianceComponent) * normalDirectionModifier + mainLightRadianceComponent;\ninputs.averageAmbientRadiance = ambientLightIrradianceComponent[1] * (1.0 + GROUND_REFLECTANCE[1]);`),f.code.add(g`\n        vec3 reflectedColorComponent = evaluateEnvironmentIllumination(inputs);\n        vec3 additionalMaterialReflectanceComponent = inputs.albedoLinear * additionalAmbientIrradiance;\n        vec3 emissionComponent = _emission.rgb == vec3(0.0) ? _emission.rgb : pow(_emission.rgb, vec3(GAMMA_SRGB));\n        vec3 outColorLinear = reflectedColorComponent + additionalMaterialReflectanceComponent + emissionComponent;\n        ${v.pbrMode!==c.Schematic||v.hasColorTexture?g`vec3 outColor = pow(blackLevelSoftCompression(outColorLinear, inputs), vec3(INV_GAMMA_SRGB));`:g`vec3 outColor = pow(max(vec3(0.0), outColorLinear - 0.005 * inputs.averageAmbientRadiance), vec3(INV_GAMMA_SRGB));`}\n        return outColor;\n      }\n    `);break;case c.Simplified:case c.TerrainWithWater:t(f),a(f),f.code.add(g`const float roughnessTerrain = 0.5;\nconst float specularityTerrain = 0.5;\nconst vec3 fresnelReflectionTerrain = vec3(0.04);\nvec3 evaluatePBRSimplifiedLighting(vec3 n, vec3 c, float shadow, float ssao, vec3 al, vec3 vd, vec3 nup) {\nvec3 viewDirection = -vd;\nvec3 h = normalize(viewDirection + mainLightDirection);\nfloat NdotL = clamp(dot(n, mainLightDirection), 0.001, 1.0);\nfloat NdotV = clamp(abs(dot(n, viewDirection)), 0.001, 1.0);\nfloat NdotH = clamp(dot(n, h), 0.0, 1.0);\nfloat NdotNG = clamp(dot(n, nup), -1.0, 1.0);\nvec3 albedoLinear = pow(c, vec3(GAMMA_SRGB));\nfloat lightness = 0.3 * albedoLinear[0] + 0.5 * albedoLinear[1] + 0.2 * albedoLinear[2];\nvec3 f0 = (0.85 * lightness + 0.15) * fresnelReflectionTerrain;\nvec3 f90 =  vec3(clamp(dot(f0, vec3(50.0 * 0.33)), 0.0, 1.0));\nvec3 mainLightIrradianceComponent = (1. - shadow) * NdotL * mainLightIntensity;\nvec3 ambientLightIrradianceComponent = calculateAmbientIrradiance(n, ssao) + al;\nvec3 ambientSky = ambientLightIrradianceComponent + mainLightIrradianceComponent;\nvec3 indirectDiffuse = ((1.0 - NdotNG) * mainLightIrradianceComponent + (1.0 + NdotNG ) * ambientSky) * 0.5;\nvec3 outDiffColor = albedoLinear * (1.0 - f0) * indirectDiffuse / PI;\nvec3 mainLightRadianceComponent = normalDistribution(NdotH, roughnessTerrain) * mainLightIntensity;\nvec2 dfg = prefilteredDFGAnalytical(roughnessTerrain, NdotV);\nvec3 specularColor = f0 * dfg.x + f90 * dfg.y;\nvec3 specularComponent = specularityTerrain * specularColor * mainLightRadianceComponent;\nvec3 outColorLinear = outDiffColor + specularComponent;\nvec3 outColor = pow(outColorLinear, vec3(INV_GAMMA_SRGB));\nreturn outColor;\n}`);break;default:n(v.pbrMode);case c.COUNT:}}export{v as EvaluateSceneLighting,u as addAmbientBoostFactor,p as addLightingGlobalFactor};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{neverReached as a}from\"../../../../../../core/compilerUtils.js\";import{glsl as r}from\"../../shaderModules/glsl.js\";function e(e,o){const n=e.fragment;switch(n.code.add(r`struct ShadingNormalParameters {\nvec3 normalView;\nvec3 viewDirection;\n} shadingParams;`),o.doubleSidedMode){case i.None:n.code.add(r`vec3 shadingNormal(ShadingNormalParameters params) {\nreturn normalize(params.normalView);\n}`);break;case i.View:n.code.add(r`vec3 shadingNormal(ShadingNormalParameters params) {\nreturn dot(params.normalView, params.viewDirection) > 0.0 ? normalize(-params.normalView) : normalize(params.normalView);\n}`);break;case i.WindingOrder:n.code.add(r`vec3 shadingNormal(ShadingNormalParameters params) {\nreturn gl_FrontFacing ? normalize(params.normalView) : normalize(-params.normalView);\n}`);break;default:a(o.doubleSidedMode);case i.COUNT:}}var i;!function(a){a[a.None=0]=\"None\",a[a.View=1]=\"View\",a[a.WindingOrder=2]=\"WindingOrder\",a[a.COUNT=3]=\"COUNT\"}(i||(i={}));export{e as Normals,i as NormalsDoubleSidedMode};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{IDENTITY as e}from\"../../../../../../core/libs/gl-matrix-2/factories/mat4f64.js\";import{create as s}from\"../../../../../../core/libs/gl-matrix-2/factories/vec3f64.js\";import{Rgba4FloatEncoding as a}from\"../util/RgbaFloat16Encoding.glsl.js\";import{Float4BindUniform as t}from\"../../shaderModules/Float4BindUniform.js\";import{glsl as o}from\"../../shaderModules/glsl.js\";import{IntegerBindUniform as i}from\"../../shaderModules/IntegerBindUniform.js\";import{Matrix4sDrawUniform as r}from\"../../shaderModules/Matrix4sDrawUniform.js\";import{Matrix4sPassUniform as d}from\"../../shaderModules/Matrix4sPassUniform.js\";import{Texture2DBindUniform as c}from\"../../shaderModules/Texture2DBindUniform.js\";import{NoParameters as p}from\"../../../../../webgl/NoParameters.js\";class n extends p{constructor(){super(...arguments),this.origin=s()}}class l extends n{}class v extends p{constructor(){super(...arguments),this.modelTransformation=e}}class h extends v{constructor(){super(...arguments),this.origin=s()}}function m(e,s){s.receiveShadows&&(e.fragment.uniforms.add(new d(\"shadowMapMatrix\",((e,s)=>s.shadowMap.getShadowMapMatrices(e.origin)),4)),f(e))}function x(e,s){s.receiveShadows&&(e.fragment.uniforms.add(new r(\"shadowMapMatrix\",((e,s)=>s.shadowMap.getShadowMapMatrices(e.origin)),4)),f(e))}function f(e){const s=e.fragment;s.include(a),s.uniforms.add(new c(\"shadowMap\",(e=>e.shadowMap.depthTexture)),new i(\"numCascades\",(e=>e.shadowMap.numCascades)),new t(\"cascadeDistances\",(e=>e.shadowMap.cascadeDistances))).code.add(o`int chooseCascade(float depth, out mat4 mat) {\nvec4 distance = cascadeDistances;\nint i = depth < distance[1] ? 0 : depth < distance[2] ? 1 : depth < distance[3] ? 2 : 3;\nmat = i == 0 ? shadowMapMatrix[0] : i == 1 ? shadowMapMatrix[1] : i == 2 ? shadowMapMatrix[2] : shadowMapMatrix[3];\nreturn i;\n}\nvec3 lightSpacePosition(vec3 _vpos, mat4 mat) {\nvec4 lv = mat * vec4(_vpos, 1.0);\nlv.xy /= lv.w;\nreturn 0.5 * lv.xyz + vec3(0.5);\n}\nvec2 cascadeCoordinates(int i, ivec2 textureSize, vec3 lvpos) {\nfloat xScale = float(textureSize.y) / float(textureSize.x);\nreturn vec2((float(i) + lvpos.x) * xScale, lvpos.y);\n}\nfloat readShadowMapDepth(ivec2 uv, sampler2D _depthTex) {\nreturn rgba4ToFloat(texelFetch(_depthTex, uv, 0));\n}\nfloat posIsInShadow(ivec2 uv, vec3 lvpos, sampler2D _depthTex) {\nreturn readShadowMapDepth(uv, _depthTex) < lvpos.z ? 1.0 : 0.0;\n}\nfloat filterShadow(vec2 uv, vec3 lvpos, ivec2 texSize, sampler2D _depthTex) {\nvec2 st = fract(uv * vec2(texSize) + vec2(0.5));\nivec2 base = ivec2(uv * vec2(texSize) - vec2(0.5));\nfloat s00 = posIsInShadow(ivec2(base.x, base.y), lvpos, _depthTex);\nfloat s10 = posIsInShadow(ivec2(base.x + 1, base.y), lvpos, _depthTex);\nfloat s11 = posIsInShadow(ivec2(base.x + 1, base.y + 1), lvpos, _depthTex);\nfloat s01 = posIsInShadow(ivec2(base.x, base.y + 1), lvpos, _depthTex);\nreturn mix(mix(s00, s10, st.x), mix(s01, s11, st.x), st.y);\n}\nfloat readShadowMap(const in vec3 _vpos, float _linearDepth) {\nmat4 mat;\nint i = chooseCascade(_linearDepth, mat);\nif (i >= numCascades) { return 0.0; }\nvec3 lvpos = lightSpacePosition(_vpos, mat);\nif (lvpos.z >= 1.0 || lvpos.x < 0.0 || lvpos.x > 1.0 || lvpos.y < 0.0 || lvpos.y > 1.0) { return 0.0; }\nivec2 size = textureSize(shadowMap, 0);\nvec2 uv = cascadeCoordinates(i, size, lvpos);\nreturn filterShadow(uv, lvpos, size, shadowMap);\n}`)}export{x as ReadShadowMapDraw,l as ReadShadowMapDrawParameters,v as ReadShadowMapParameters,m as ReadShadowMapPass,h as ReadShadowMapPassParameters};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{IDENTITY as r}from\"../../../../../../core/libs/gl-matrix-2/factories/mat3f64.js\";import{TextureCoordinateType as e}from\"../attributes/TextureCoordinateAttribute.glsl.js\";import{glsl as o}from\"../../shaderModules/glsl.js\";import{Matrix3PassUniform as a}from\"../../shaderModules/Matrix3PassUniform.js\";function s(e,s){s.hasColorTextureTransform?(e.varyings.add(\"colorUV\",\"vec2\"),e.vertex.uniforms.add(new a(\"colorTextureTransformMatrix\",(e=>e.colorTextureTransformMatrix??r))).code.add(o`void forwardColorUV(){\ncolorUV = (colorTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)):e.vertex.code.add(o`void forwardColorUV(){}`)}function i(s,i){i.hasNormalTextureTransform&&i.textureCoordinateType!==e.None?(s.varyings.add(\"normalUV\",\"vec2\"),s.vertex.uniforms.add(new a(\"normalTextureTransformMatrix\",(e=>e.normalTextureTransformMatrix??r))).code.add(o`void forwardNormalUV(){\nnormalUV = (normalTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)):s.vertex.code.add(o`void forwardNormalUV(){}`)}function t(s,i){i.hasEmissionTextureTransform&&i.textureCoordinateType!==e.None?(s.varyings.add(\"emissiveUV\",\"vec2\"),s.vertex.uniforms.add(new a(\"emissiveTextureTransformMatrix\",(e=>e.emissiveTextureTransformMatrix??r))).code.add(o`void forwardEmissiveUV(){\nemissiveUV = (emissiveTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)):s.vertex.code.add(o`void forwardEmissiveUV(){}`)}function d(s,i){i.hasOcclusionTextureTransform&&i.textureCoordinateType!==e.None?(s.varyings.add(\"occlusionUV\",\"vec2\"),s.vertex.uniforms.add(new a(\"occlusionTextureTransformMatrix\",(e=>e.occlusionTextureTransformMatrix??r))).code.add(o`void forwardOcclusionUV(){\nocclusionUV = (occlusionTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)):s.vertex.code.add(o`void forwardOcclusionUV(){}`)}function n(s,i){i.hasMetallicRoughnessTextureTransform&&i.textureCoordinateType!==e.None?(s.varyings.add(\"metallicRoughnessUV\",\"vec2\"),s.vertex.uniforms.add(new a(\"metallicRoughnessTextureTransformMatrix\",(e=>e.metallicRoughnessTextureTransformMatrix??r))).code.add(o`void forwardMetallicRoughnessUV(){\nmetallicRoughnessUV = (metallicRoughnessTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)):s.vertex.code.add(o`void forwardMetallicRoughnessUV(){}`)}export{s as colorTextureUV,t as emissiveTextureUV,n as metallicRoughnessTextureUV,i as normalTextureUV,d as occlusionTextureUV};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{FloatDrawUniform as o}from\"../../shaderModules/FloatDrawUniform.js\";import{FloatPassUniform as r}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as t,If as e}from\"../../shaderModules/glsl.js\";import{AlphaDiscardMode as a}from\"../../../lib/basicInterfaces.js\";import{alphaCutoff as s}from\"../../../../../../webscene/support/AlphaCutoff.js\";function f(o,t){u(o,t,new r(\"textureAlphaCutoff\",(o=>o.textureAlphaCutoff)))}function l(r,t){u(r,t,new o(\"textureAlphaCutoff\",(o=>o.textureAlphaCutoff)))}function u(o,r,f){const l=o.fragment,u=r.alphaDiscardMode,d=u===a.Blend;u!==a.Mask&&u!==a.MaskBlend||l.uniforms.add(f),l.code.add(t`\n    void discardOrAdjustAlpha(inout vec4 color) {\n      ${u===a.Opaque?\"color.a = 1.0;\":`if (color.a < ${d?t.float(s):\"textureAlphaCutoff\"}) {\\n              discard;\\n             } ${e(u===a.Mask,\"else { color.a = 1.0; }\")}`}\n    }\n  `)}export{l as DiscardOrAdjustAlphaDraw,f as DiscardOrAdjustAlphaPass};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{ColorMixModeEnum as e}from\"../../../../layers/support/symbolColorUtils.js\";import{ColorConversion as t}from\"./ColorConversion.glsl.js\";import{glsl as r}from\"../../shaderModules/glsl.js\";function i(i){i.include(t),i.code.add(r`\n    vec3 mixExternalColor(vec3 internalColor, vec3 textureColor, vec3 externalColor, int mode) {\n      // workaround for artifacts in macOS using Intel Iris Pro\n      // see: https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/10475\n      vec3 internalMixed = internalColor * textureColor;\n      vec3 allMixed = internalMixed * externalColor;\n\n      if (mode == ${r.int(e.Multiply)}) {\n        return allMixed;\n      }\n      if (mode == ${r.int(e.Ignore)}) {\n        return internalMixed;\n      }\n      if (mode == ${r.int(e.Replace)}) {\n        return externalColor;\n      }\n\n      // tint (or something invalid)\n      float vIn = rgb2v(internalMixed);\n      vec3 hsvTint = rgb2hsv(externalColor);\n      vec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\n      return hsv2rgb(hsvOut);\n    }\n\n    float mixExternalOpacity(float internalOpacity, float textureOpacity, float externalOpacity, int mode) {\n      // workaround for artifacts in macOS using Intel Iris Pro\n      // see: https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/10475\n      float internalMixed = internalOpacity * textureOpacity;\n      float allMixed = internalMixed * externalOpacity;\n\n      if (mode == ${r.int(e.Ignore)}) {\n        return internalMixed;\n      }\n      if (mode == ${r.int(e.Replace)}) {\n        return externalOpacity;\n      }\n\n      // multiply or tint (or something invalid)\n      return allMixed;\n    }\n  `)}export{i as MixExternalColor};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{glsl as o}from\"../../shaderModules/glsl.js\";function a(a){a.code.add(o`const float MAX_RGBA4_FLOAT =\n15.0 / 16.0 +\n15.0 / 16.0 / 16.0 +\n15.0 / 16.0 / 16.0 / 16.0 +\n15.0 / 16.0 / 16.0 / 16.0 / 16.0;\nconst vec4 FIXED_POINT_FACTORS_RGBA4 = vec4(1.0, 16.0, 16.0 * 16.0, 16.0 * 16.0 * 16.0);\nvec4 floatToRgba4(const float value) {\nfloat valueInValidDomain = clamp(value, 0.0, MAX_RGBA4_FLOAT);\nvec4 fixedPointU4 = floor(fract(valueInValidDomain * FIXED_POINT_FACTORS_RGBA4) * 16.0);\nconst float toU4AsFloat = 1.0 / 15.0;\nreturn fixedPointU4 * toU4AsFloat;\n}\nconst vec4 RGBA4_2_FLOAT_FACTORS = vec4(\n15.0 / (16.0),\n15.0 / (16.0 * 16.0),\n15.0 / (16.0 * 16.0 * 16.0),\n15.0 / (16.0 * 16.0 * 16.0 * 16.0)\n);\nfloat rgba4ToFloat(vec4 rgba) {\nreturn dot(rgba, RGBA4_2_FLOAT_FACTORS);\n}`)}export{a as Rgba4FloatEncoding};\n"],"names":[],"sourceRoot":""}