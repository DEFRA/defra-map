{"version":3,"file":"4993.e3c86cf4.iframe.bundle.js","mappings":";AAKA;;AAEA;AACA;;;;;ACCA;;;AAGA;;AAEA;;;;;;;;ACFA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;AC5EA;;;;;;;;;;;;;;AAcA;;AAEA;;;;;AAKA;;;AAGA;;;;;AAKA;;;;;;;;AAQA;;;AAGA;;AAEA;;;AAGA;;;;;AAKA;;;;;AAKA;AC3DA;AACA;AACA;;;AAGA;;;AAGA;;AAEA;AACA;ACXA;;;;;;;;;;AAUA;;;;;;ACLA;;AAEA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;AAOA;;AAEA;;;;;;;ACzCA","sources":["webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/Compositing.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/ImageMaterial.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/LaserlinePath.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/Laserlines.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/ShadedColorMaterial.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/SlicePlaneMaterial.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/Laserline.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/ScreenSizeScaling.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{ScreenSpacePass as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";import{ReadDepth as r}from\"../views/3d/webgl-engine/core/shaderLibrary/output/ReadDepth.glsl.js\";import{RgbaFloatEncoding as o}from\"../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";import{Float2BindUniform as a}from\"../views/3d/webgl-engine/core/shaderModules/Float2BindUniform.js\";import{FloatPassUniform as i}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as t}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{Texture2DPassUniform as n}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{BlitMode as s}from\"../views/3d/webgl-engine/shaders/CompositingTechniqueConfiguration.js\";import{NoParameters as l}from\"../views/webgl/NoParameters.js\";import{ShaderBuilder as d}from\"../views/webgl/ShaderBuilder.js\";class m extends l{constructor(){super(...arguments),this.opacity=1}}function g(l){const m=new d;m.include(e),m.fragment.uniforms.add(new n(\"tex\",(e=>e.texture))),l.hasOpacityFactor&&m.fragment.uniforms.add(new i(\"opacity\",(e=>e.opacity)));const g=l.blitMode===s.Depth;return g&&(m.fragment.uniforms.add(new a(\"nearFar\",(e=>e.camera.nearFar))),m.fragment.include(r),m.fragment.include(o)),m.fragment.main.add(t`\n    ${g?t`\n          float normalizedLinearDepth = (-linearDepthFromTexture(tex, uv) - nearFar[0]) / (nearFar[1] - nearFar[0]);\n          fragColor = float2rgba(normalizedLinearDepth);`:t`\n          fragColor = texture(tex, uv) ${l.hasOpacityFactor?\"* opacity\":\"\"};`}`),m}const c=Object.freeze(Object.defineProperty({__proto__:null,CompositingPassParameters:m,build:g},Symbol.toStringTag,{value:\"Module\"}));export{m as C,c as a,g as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{ShaderOutput as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as r}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{ObjectAndLayerIdColor as o}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js\";import{terrainDepthTest as s}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/TerrainDepthTest.glsl.js\";import{ColorConversion as t}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{addProjViewLocalOrigin as a}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{FloatPassUniform as l}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as d,If as n}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{Texture2DPassUniform as g}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{VertexAttribute as m}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{outputColorHighlightOID as v}from\"../views/3d/webgl-engine/shaders/OutputColorHighlightOID.glsl.js\";import{NoParameters as c}from\"../views/webgl/NoParameters.js\";import{ShaderBuilder as p}from\"../views/webgl/ShaderBuilder.js\";class u extends c{}function w(c){const u=new p,{vertex:w,fragment:b}=u,{output:f,perspectiveInterpolation:h}=c;return a(w,c),u.include(i,c),u.include(s,c),u.fragment.include(r,c),u.include(o,c),u.include(v,c),u.attributes.add(m.POSITION,\"vec3\"),u.attributes.add(m.UV0,\"vec2\"),h&&u.attributes.add(m.PERSPECTIVEDIVIDE,\"float\"),w.main.add(d`\n    vpos = position;\n    forwardViewPosDepth((view * vec4(vpos, 1.0)).xyz);\n    vTexCoord = uv0;\n    gl_Position = transformPosition(proj, view, vpos);\n    ${n(h,\"gl_Position *= perspectiveDivide;\")}`),u.varyings.add(\"vpos\",\"vec3\"),u.varyings.add(\"vTexCoord\",\"vec2\"),b.include(t),b.uniforms.add(new l(\"opacity\",(e=>e.opacity)),new g(\"tex\",(e=>e.texture))).main.add(d`\n    discardBySlice(vpos);\n    discardByTerrainDepth();\n    ${n(f===e.ObjectAndLayerIdColor,\"fragColor = vec4(0, 0, 0, 1); return;\")}\n    vec4 finalColor = texture(tex, vTexCoord) * opacity;\n    outputColorHighlightOID(finalColor, vpos);`),u}const b=Object.freeze(Object.defineProperty({__proto__:null,ImageMaterialPassParameters:u,build:w},Symbol.toStringTag,{value:\"Module\"}));export{b as I,u as a,w as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{translate as e}from\"../core/libs/gl-matrix-2/math/mat4.js\";import{create as t}from\"../core/libs/gl-matrix-2/factories/mat4f64.js\";import{set as o}from\"../core/libs/gl-matrix-2/math/vec2.js\";import{create as r}from\"../core/libs/gl-matrix-2/factories/vec2f64.js\";import{Laserline as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Laserline.glsl.js\";import{Float2BindUniform as i}from\"../views/3d/webgl-engine/core/shaderModules/Float2BindUniform.js\";import{FloatBindUniform as n}from\"../views/3d/webgl-engine/core/shaderModules/FloatBindUniform.js\";import{FloatPassUniform as s}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as l,If as d}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{Matrix4BindUniform as c}from\"../views/3d/webgl-engine/core/shaderModules/Matrix4BindUniform.js\";import{Matrix4PassUniform as m}from\"../views/3d/webgl-engine/core/shaderModules/Matrix4PassUniform.js\";import{VertexAttribute as v}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{ShaderBuilder as p}from\"../views/webgl/ShaderBuilder.js\";function w(t){const r=new p;r.include(a,t);const{vertex:w,fragment:u}=r;w.uniforms.add(new m(\"modelView\",((t,{camera:o})=>e(f,o.viewMatrix,t.origin))),new c(\"proj\",(({camera:e})=>e.projectionMatrix)),new s(\"glowWidth\",((e,{camera:t})=>e.glowWidth*t.pixelRatio)),new i(\"pixelToNDC\",(({camera:e})=>o(g,2/e.fullViewport[2],2/e.fullViewport[3])))),r.attributes.add(v.START,\"vec3\"),r.attributes.add(v.END,\"vec3\"),t.spherical&&(r.attributes.add(v.START_UP,\"vec3\"),r.attributes.add(v.END_UP,\"vec3\")),r.attributes.add(v.EXTRUDE,\"vec2\"),r.varyings.add(\"uv\",\"vec2\"),r.varyings.add(\"vViewStart\",\"vec3\"),r.varyings.add(\"vViewEnd\",\"vec3\"),r.varyings.add(\"vViewSegmentNormal\",\"vec3\"),r.varyings.add(\"vViewStartNormal\",\"vec3\"),r.varyings.add(\"vViewEndNormal\",\"vec3\");const h=!t.spherical;return w.main.add(l`\n    vec3 pos = mix(start, end, extrude.x);\n\n    vec4 viewPos = modelView * vec4(pos, 1);\n    vec4 projPos = proj * viewPos;\n    vec2 ndcPos = projPos.xy / projPos.w;\n\n    // in planar we hardcode the up vectors to be Z-up */\n    ${d(h,l`vec3 startUp = vec3(0, 0, 1);`)}\n    ${d(h,l`vec3 endUp = vec3(0, 0, 1);`)}\n\n    // up vector corresponding to the location of the vertex, selecting either startUp or endUp */\n    vec3 up = extrude.y * mix(startUp, endUp, extrude.x);\n    vec3 viewUp = (modelView * vec4(up, 0)).xyz;\n\n    vec4 projPosUp = proj * vec4(viewPos.xyz + viewUp, 1);\n    vec2 projUp = normalize(projPosUp.xy / projPosUp.w - ndcPos);\n\n    // extrude ndcPos along projUp to the edge of the screen\n    vec2 lxy = abs(sign(projUp) - ndcPos);\n    ndcPos += length(lxy) * projUp;\n\n    vViewStart = (modelView * vec4(start, 1)).xyz;\n    vViewEnd = (modelView * vec4(end, 1)).xyz;\n\n    vec3 viewStartEndDir = vViewEnd - vViewStart;\n\n    vec3 viewStartUp = (modelView * vec4(startUp, 0)).xyz;\n\n    // the normal of the plane that aligns with the segment and the up vector\n    vViewSegmentNormal = normalize(cross(viewStartUp, viewStartEndDir));\n\n    // the normal orthogonal to the segment normal and the start up vector\n    vViewStartNormal = -normalize(cross(vViewSegmentNormal, viewStartUp));\n\n    // the normal orthogonal to the segment normal and the end up vector\n    vec3 viewEndUp = (modelView * vec4(endUp, 0)).xyz;\n    vViewEndNormal = normalize(cross(vViewSegmentNormal, viewEndUp));\n\n    // Add enough padding in the X screen space direction for \"glow\"\n    float xPaddingPixels = sign(dot(vViewSegmentNormal, viewPos.xyz)) * (extrude.x * 2.0 - 1.0) * glowWidth;\n    ndcPos.x += xPaddingPixels * pixelToNDC.x;\n\n    // uv is used to read back depth to reconstruct the position at the fragment\n    uv = ndcPos * 0.5 + 0.5;\n\n    gl_Position = vec4(ndcPos, 0, 1);\n  `),u.uniforms.add(new n(\"perScreenPixelRatio\",(e=>e.camera.perScreenPixelRatio))),u.code.add(l`float planeDistance(vec3 planeNormal, vec3 planeOrigin, vec3 pos) {\nreturn dot(planeNormal, pos - planeOrigin);\n}\nfloat segmentDistancePixels(vec3 segmentNormal, vec3 startNormal, vec3 endNormal, vec3 pos, vec3 start, vec3 end) {\nfloat distSegmentPlane = planeDistance(segmentNormal, start, pos);\nfloat distStartPlane = planeDistance(startNormal, start, pos);\nfloat distEndPlane = planeDistance(endNormal, end, pos);\nfloat dist = max(max(distStartPlane, distEndPlane), abs(distSegmentPlane));\nfloat width = fwidth(distSegmentPlane);\nfloat maxPixelDistance = length(pos) * perScreenPixelRatio * 2.0;\nfloat pixelDist = dist / min(width, maxPixelDistance);\nreturn abs(pixelDist);\n}`),u.main.add(l`fragColor = vec4(0.0);\nvec3 dEndStart = vViewEnd - vViewStart;\nif (dot(dEndStart, dEndStart) < 1e-5) {\nreturn;\n}\nvec3 pos;\nvec3 normal;\nfloat angleCutoffAdjust;\nfloat depthDiscontinuityAlpha;\nif (!laserlineReconstructFromDepth(pos, normal, angleCutoffAdjust, depthDiscontinuityAlpha)) {\nreturn;\n}\nfloat distance = segmentDistancePixels(\nvViewSegmentNormal,\nvViewStartNormal,\nvViewEndNormal,\npos,\nvViewStart,\nvViewEnd\n);\nvec4 color = laserlineProfile(distance);\nfloat alpha = (1.0 - smoothstep(0.995 - angleCutoffAdjust, 0.999 - angleCutoffAdjust, abs(dot(normal, vViewSegmentNormal))));\nfragColor = laserlineOutput(color * alpha * depthDiscontinuityAlpha);`),r}const g=r(),f=t(),u=Object.freeze(Object.defineProperty({__proto__:null,build:w},Symbol.toStringTag,{value:\"Module\"}));export{u as L,w as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{deg2rad as e}from\"../core/mathUtils.js\";import{set as i}from\"../core/libs/gl-matrix-2/math/vec2.js\";import{create as t}from\"../core/libs/gl-matrix-2/factories/vec2f64.js\";import{d as n,n as a,l as o,j as r,t as l,c as s,e as c,g as d}from\"./vec32.js\";import{create as f}from\"../core/libs/gl-matrix-2/factories/vec3f64.js\";import{t as p}from\"./vec42.js\";import{create as g}from\"../core/libs/gl-matrix-2/factories/vec4f64.js\";import{pointAt as h}from\"../geometry/support/lineSegment.js\";import{create as m,fromPositionAndNormal as u}from\"../geometry/support/plane.js\";import{a as w,c as x}from\"./sphere.js\";import{Laserline as v}from\"../views/3d/webgl-engine/core/shaderLibrary/Laserline.glsl.js\";import{ScreenSpacePass as P}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";import{Float2PassUniform as b}from\"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";import{Float3BindUniform as D}from\"../views/3d/webgl-engine/core/shaderModules/Float3BindUniform.js\";import{Float3PassUniform as M}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{Float4PassUniform as S}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatBindUniform as C}from\"../views/3d/webgl-engine/core/shaderModules/FloatBindUniform.js\";import{FloatPassUniform as L}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as j}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{ShaderBuilder as A}from\"../views/webgl/ShaderBuilder.js\";const V=e(6);function y(e){const i=new A;i.include(P),i.include(v,e);const t=i.fragment;if(e.lineVerticalPlaneEnabled||e.heightManifoldEnabled)if(t.uniforms.add(new L(\"maxPixelDistance\",((i,t)=>e.heightManifoldEnabled?2*t.camera.computeScreenPixelSizeAt(i.heightManifoldTarget):2*t.camera.computeScreenPixelSizeAt(i.lineVerticalPlaneSegment.origin)))),t.code.add(j`float planeDistancePixels(vec4 plane, vec3 pos) {\nfloat dist = dot(plane.xyz, pos) + plane.w;\nfloat width = fwidth(dist);\ndist /= min(width, maxPixelDistance);\nreturn abs(dist);\n}`),e.spherical){const e=(e,i,t)=>l(e,i.heightManifoldTarget,t.camera.viewMatrix),i=(e,i)=>l(e,[0,0,0],i.camera.viewMatrix);t.uniforms.add(new S(\"heightManifoldOrigin\",((t,r)=>(e(F,t,r),i(H,r),n(H,H,F),a(G,H),G[3]=o(H),G))),new D(\"globalOrigin\",(e=>i(F,e))),new L(\"cosSphericalAngleThreshold\",((e,i)=>1-Math.max(2,r(i.camera.eye,e.heightManifoldTarget)*i.camera.perRenderPixelRatio)/o(e.heightManifoldTarget)))),t.code.add(j`float globeDistancePixels(float posInGlobalOriginLength) {\nfloat dist = abs(posInGlobalOriginLength - heightManifoldOrigin.w);\nfloat width = fwidth(dist);\ndist /= min(width, maxPixelDistance);\nreturn abs(dist);\n}\nfloat heightManifoldDistancePixels(vec4 heightPlane, vec3 pos) {\nvec3 posInGlobalOriginNorm = normalize(globalOrigin - pos);\nfloat cosAngle = dot(posInGlobalOriginNorm, heightManifoldOrigin.xyz);\nvec3 posInGlobalOrigin = globalOrigin - pos;\nfloat posInGlobalOriginLength = length(posInGlobalOrigin);\nfloat sphericalDistance = globeDistancePixels(posInGlobalOriginLength);\nfloat planarDistance = planeDistancePixels(heightPlane, pos);\nreturn cosAngle < cosSphericalAngleThreshold ? sphericalDistance : planarDistance;\n}`)}else t.code.add(j`float heightManifoldDistancePixels(vec4 heightPlane, vec3 pos) {\nreturn planeDistancePixels(heightPlane, pos);\n}`);if(e.pointDistanceEnabled&&(t.uniforms.add(new L(\"maxPixelDistance\",((e,i)=>2*i.camera.computeScreenPixelSizeAt(e.pointDistanceTarget)))),t.code.add(j`float sphereDistancePixels(vec4 sphere, vec3 pos) {\nfloat dist = distance(sphere.xyz, pos) - sphere.w;\nfloat width = fwidth(dist);\ndist /= min(width, maxPixelDistance);\nreturn abs(dist);\n}`)),e.intersectsLineEnabled&&t.uniforms.add(new C(\"perScreenPixelRatio\",(e=>e.camera.perScreenPixelRatio))).code.add(j`float lineDistancePixels(vec3 start, vec3 dir, float radius, vec3 pos) {\nfloat dist = length(cross(dir, pos - start)) / (length(pos) * perScreenPixelRatio);\nreturn abs(dist) - radius;\n}`),(e.lineVerticalPlaneEnabled||e.intersectsLineEnabled)&&t.code.add(j`bool pointIsWithinLine(vec3 pos, vec3 start, vec3 end) {\nvec3 dir = end - start;\nfloat t2 = dot(dir, pos - start);\nfloat l2 = dot(dir, dir);\nreturn t2 >= 0.0 && t2 <= l2;\n}`),t.main.add(j`vec3 pos;\nvec3 normal;\nfloat angleCutoffAdjust;\nfloat depthDiscontinuityAlpha;\nif (!laserlineReconstructFromDepth(pos, normal, angleCutoffAdjust, depthDiscontinuityAlpha)) {\nfragColor = vec4(0.0);\nreturn;\n}\nvec4 color = vec4(0.0);`),e.heightManifoldEnabled){t.uniforms.add(new b(\"angleCutoff\",(e=>O(e))),new S(\"heightPlane\",((e,i)=>R(e.heightManifoldTarget,e.renderCoordsHelper.worldUpAtPosition(e.heightManifoldTarget,F),i.camera.viewMatrix))));const i=e.spherical?j`normalize(globalOrigin - pos)`:j`heightPlane.xyz`;t.main.add(j`\n      vec2 angleCutoffAdjusted = angleCutoff - angleCutoffAdjust;\n      // Fade out laserlines on flat surfaces\n      float heightManifoldAlpha = 1.0 - smoothstep(angleCutoffAdjusted.x, angleCutoffAdjusted.y, abs(dot(normal, ${i})));\n      vec4 heightManifoldColor = laserlineProfile(heightManifoldDistancePixels(heightPlane, pos));\n      color = max(color, heightManifoldColor * heightManifoldAlpha);`)}return e.pointDistanceEnabled&&(t.uniforms.add(new b(\"angleCutoff\",(e=>O(e))),new S(\"pointDistanceSphere\",((e,i)=>E(e,i)))),t.main.add(j`float pointDistanceSphereDistance = sphereDistancePixels(pointDistanceSphere, pos);\nvec4 pointDistanceSphereColor = laserlineProfile(pointDistanceSphereDistance);\nfloat pointDistanceSphereAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, normalize(pos - pointDistanceSphere.xyz))));\ncolor = max(color, pointDistanceSphereColor * pointDistanceSphereAlpha);`)),e.lineVerticalPlaneEnabled&&(t.uniforms.add(new b(\"angleCutoff\",(e=>O(e))),new S(\"lineVerticalPlane\",((e,i)=>z(e,i))),new M(\"lineVerticalStart\",((e,i)=>I(e,i))),new M(\"lineVerticalEnd\",((e,i)=>T(e,i)))),t.main.add(j`if (pointIsWithinLine(pos, lineVerticalStart, lineVerticalEnd)) {\nfloat lineVerticalDistance = planeDistancePixels(lineVerticalPlane, pos);\nvec4 lineVerticalColor = laserlineProfile(lineVerticalDistance);\nfloat lineVerticalAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, lineVerticalPlane.xyz)));\ncolor = max(color, lineVerticalColor * lineVerticalAlpha);\n}`)),e.intersectsLineEnabled&&(t.uniforms.add(new b(\"angleCutoff\",(e=>O(e))),new M(\"intersectsLineStart\",((e,i)=>l(F,e.lineStartWorld,i.camera.viewMatrix))),new M(\"intersectsLineEnd\",((e,i)=>l(F,e.lineEndWorld,i.camera.viewMatrix))),new M(\"intersectsLineDirection\",((e,i)=>(s(G,e.intersectsLineSegment.vector),G[3]=0,a(F,p(G,G,i.camera.viewMatrix))))),new L(\"intersectsLineRadius\",(e=>e.intersectsLineRadius))),t.main.add(j`if (pointIsWithinLine(pos, intersectsLineStart, intersectsLineEnd)) {\nfloat intersectsLineDistance = lineDistancePixels(intersectsLineStart, intersectsLineDirection, intersectsLineRadius, pos);\nvec4 intersectsLineColor = laserlineProfile(intersectsLineDistance);\nfloat intersectsLineAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, 1.0 - abs(dot(normal, intersectsLineDirection)));\ncolor = max(color, intersectsLineColor * intersectsLineAlpha);\n}`)),t.main.add(j`fragColor = laserlineOutput(color * depthDiscontinuityAlpha);`),i}function O(t){return i(U,Math.cos(t.angleCutoff),Math.cos(Math.max(0,t.angleCutoff-e(2))))}function E(e,i){return l(w(N),e.pointDistanceOrigin,i.camera.viewMatrix),N[3]=r(e.pointDistanceOrigin,e.pointDistanceTarget),N}function z(e,i){const t=h(e.lineVerticalPlaneSegment,.5,F),n=e.renderCoordsHelper.worldUpAtPosition(t,W),o=a(H,e.lineVerticalPlaneSegment.vector),r=c(F,n,o);return a(r,r),R(e.lineVerticalPlaneSegment.origin,r,i.camera.viewMatrix)}function I(e,i){const t=s(F,e.lineVerticalPlaneSegment.origin);return e.renderCoordsHelper.setAltitude(t,0),l(t,t,i.camera.viewMatrix)}function T(e,i){const t=d(F,e.lineVerticalPlaneSegment.origin,e.lineVerticalPlaneSegment.vector);return e.renderCoordsHelper.setAltitude(t,0),l(t,t,i.camera.viewMatrix)}function R(e,i,t){return l(_,e,t),s(G,i),G[3]=0,p(G,G,t),u(_,G,B)}const U=t(),F=f(),G=g(),W=f(),H=f(),_=f(),B=m(),N=x(),$=Object.freeze(Object.defineProperty({__proto__:null,build:y,defaultAngleCutoff:V},Symbol.toStringTag,{value:\"Module\"}));export{$ as L,y as b,V as d};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{create as e}from\"../core/libs/gl-matrix-2/factories/vec4f64.js\";import{ScreenSizeScaling as r}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSizeScaling.glsl.js\";import{SliceDraw as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{terrainDepthTest as n}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/TerrainDepthTest.glsl.js\";import{ColorConversion as s}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{addProjViewLocalOrigin as l,addViewNormal as a}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float3PassUniform as d}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{Float4PassUniform as t}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{glsl as c}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{VertexAttribute as g}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{outputColorHighlightOID as m}from\"../views/3d/webgl-engine/shaders/OutputColorHighlightOID.glsl.js\";import{ShaderBuilder as v}from\"../views/webgl/ShaderBuilder.js\";function w(e){const w=new v;w.include(o,e),w.include(r,e),w.fragment.include(i,e),w.include(m,e),w.include(n,e);const{vertex:b,fragment:u}=w;return u.include(s),l(b,e),u.uniforms.add(new t(\"uColor\",(e=>e.color))),w.attributes.add(g.POSITION,\"vec3\"),w.varyings.add(\"vWorldPosition\",\"vec3\"),e.screenSizeEnabled&&w.attributes.add(g.OFFSET,\"vec3\"),e.shadingEnabled&&(a(b),w.attributes.add(g.NORMAL,\"vec3\"),w.varyings.add(\"vViewNormal\",\"vec3\"),u.uniforms.add(new d(\"shadingDirection\",(e=>e.shadingDirection))),u.uniforms.add(new t(\"shadedColor\",(e=>f(e.shadingTint,e.color))))),b.main.add(c`\n      vWorldPosition = ${e.screenSizeEnabled?c`screenSizeScaling(offset, position)`:c`position`};\n      ${e.shadingEnabled?c`vec3 worldNormal = normal;\n                 vViewNormal = (viewNormal * vec4(worldNormal, 1)).xyz;`:\"\"}\n      forwardViewPosDepth((view * vec4(vWorldPosition, 1.0)).xyz);\n      gl_Position = transformPosition(proj, view, vWorldPosition);\n  `),u.main.add(c`\n      discardBySlice(vWorldPosition);\n      discardByTerrainDepth();\n      ${e.shadingEnabled?c`vec3 viewNormalNorm = normalize(vViewNormal);\n             float shadingFactor = 1.0 - clamp(-dot(viewNormalNorm, shadingDirection), 0.0, 1.0);\n             vec4 finalColor = mix(uColor, shadedColor, shadingFactor);`:c`vec4 finalColor = uColor;`}\n      outputColorHighlightOID(finalColor, vWorldPosition);`),w}function f(e,r){const i=1-e[3],o=e[3]+r[3]*i;return 0===o?(b[3]=o,b):(b[0]=(e[0]*e[3]+r[0]*r[3]*i)/o,b[1]=(e[1]*e[3]+r[1]*r[3]*i)/o,b[2]=(e[2]*e[3]+r[2]*r[3]*i)/o,b[3]=r[3],b)}const b=e(),u=Object.freeze(Object.defineProperty({__proto__:null,build:w},Symbol.toStringTag,{value:\"Module\"}));export{u as S,w as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{addProjViewLocalOrigin as e}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float4PassUniform as r}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as d}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as o}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{VertexAttribute as i}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{ShaderBuilder as a}from\"../views/webgl/ShaderBuilder.js\";function g(g){const l=new a,{vertex:t,fragment:s,attributes:n,varyings:c}=l;return e(t,g),n.add(i.POSITION,\"vec3\"),n.add(i.UV0,\"vec2\"),c.add(\"vUV\",\"vec2\"),t.main.add(o`vUV = uv0;\ngl_Position = proj * view * vec4(position, 1.0);`),s.uniforms.add(new r(\"backgroundColor\",(e=>e.backgroundColor)),new r(\"gridColor\",(e=>e.gridColor)),new d(\"gridWidth\",(e=>e.gridWidth))).main.add(o`const float LINE_WIDTH = 1.0;\nvec2 uvScaled = vUV * gridWidth;\nvec2 gridUV = (fract(uvScaled + 0.5) - 0.5) / (LINE_WIDTH * fwidth(uvScaled));\nvec2 grid = (1.0 - step(0.5, gridUV)) * step(-0.5, gridUV);\ngrid.x *= step(0.5, uvScaled.x) * step(uvScaled.x, gridWidth - 0.5);\ngrid.y *= step(0.5, uvScaled.y) * step(uvScaled.y, gridWidth - 0.5);\nfloat gridFade = max(grid.x, grid.y);\nfloat gridAlpha = gridColor.a * gridFade;\nfragColor =\nvec4(backgroundColor.rgb * backgroundColor.a, backgroundColor.a) * (1.0 - gridAlpha) +\nvec4(gridColor.rgb, 1.0) * gridAlpha;`),l}const l=Object.freeze(Object.defineProperty({__proto__:null,build:g},Symbol.toStringTag,{value:\"Module\"}));export{l as S,g as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{ReadDepth as e}from\"./output/ReadDepth.glsl.js\";import{CameraSpace as o}from\"./util/CameraSpace.glsl.js\";import{Float3PassUniform as l}from\"../shaderModules/Float3PassUniform.js\";import{FloatPassUniform as t}from\"../shaderModules/FloatPassUniform.js\";import{glsl as r}from\"../shaderModules/glsl.js\";import{Texture2DBindUniform as a}from\"../shaderModules/Texture2DBindUniform.js\";import{Texture2DPassUniform as n}from\"../shaderModules/Texture2DPassUniform.js\";function i(i,p){const d=i.fragment;d.include(e),i.include(o),d.uniforms.add(new t(\"globalAlpha\",(e=>e.globalAlpha)),new l(\"glowColor\",(e=>e.glowColor)),new t(\"glowWidth\",((e,o)=>e.glowWidth*o.camera.pixelRatio)),new t(\"glowFalloff\",(e=>e.glowFalloff)),new l(\"innerColor\",(e=>e.innerColor)),new t(\"innerWidth\",((e,o)=>e.innerWidth*o.camera.pixelRatio)),new a(\"depthMap\",(e=>e.depth?.attachment)),new n(\"normalMap\",(e=>e.normals))),d.code.add(r`vec4 blendPremultiplied(vec4 source, vec4 dest) {\nfloat oneMinusSourceAlpha = 1.0 - source.a;\nreturn vec4(\nsource.rgb + dest.rgb * oneMinusSourceAlpha,\nsource.a + dest.a * oneMinusSourceAlpha\n);\n}`),d.code.add(r`vec4 premultipliedColor(vec3 rgb, float alpha) {\nreturn vec4(rgb * alpha, alpha);\n}`),d.code.add(r`vec4 laserlineProfile(float dist) {\nif (dist > glowWidth) {\nreturn vec4(0.0);\n}\nfloat innerAlpha = (1.0 - smoothstep(0.0, innerWidth, dist));\nfloat glowAlpha = pow(max(0.0, 1.0 - dist / glowWidth), glowFalloff);\nreturn blendPremultiplied(\npremultipliedColor(innerColor, innerAlpha),\npremultipliedColor(glowColor, glowAlpha)\n);\n}`),d.code.add(r`bool laserlineReconstructFromDepth(out vec3 pos, out vec3 normal, out float angleCutoffAdjust, out float depthDiscontinuityAlpha) {\nfloat depth = depthFromTexture(depthMap, uv);\nif (depth == 1.0) {\nreturn false;\n}\nfloat linearDepth = linearizeDepth(depth);\npos = reconstructPosition(gl_FragCoord.xy, linearDepth);\nfloat minStep = 6e-8;\nfloat depthStep = clamp(depth + minStep, 0.0, 1.0);\nfloat linearDepthStep = linearizeDepth(depthStep);\nfloat depthError = abs(linearDepthStep - linearDepth);\nif (depthError > 0.2) {\nnormal = texture(normalMap, uv).xyz * 2.0 - 1.0;\nangleCutoffAdjust = 0.004;\n} else {\nnormal = normalize(cross(dFdx(pos), dFdy(pos)));\nangleCutoffAdjust = 0.0;\n}\nfloat ddepth = fwidth(linearDepth);\ndepthDiscontinuityAlpha = 1.0 - smoothstep(0.0, 0.01, -ddepth / linearDepth);\nreturn true;\n}`),p.contrastControlEnabled?d.uniforms.add(new n(\"frameColor\",((e,o)=>e.colors)),new t(\"globalAlphaContrastBoost\",(e=>e.globalAlphaContrastBoost))).code.add(r`float rgbToLuminance(vec3 color) {\nreturn dot(vec3(0.2126, 0.7152, 0.0722), color);\n}\nvec4 laserlineOutput(vec4 color) {\nfloat backgroundLuminance = rgbToLuminance(texture(frameColor, uv).rgb);\nfloat alpha = clamp(globalAlpha * max(backgroundLuminance * globalAlphaContrastBoost, 1.0), 0.0, 1.0);\nreturn color * alpha;\n}`):d.code.add(r`vec4 laserlineOutput(vec4 color) {\nreturn color * globalAlpha;\n}`)}export{i as Laserline};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{addCameraPosition as e}from\"./util/View.glsl.js\";import{FloatBindUniform as r}from\"../shaderModules/FloatBindUniform.js\";import{FloatPassUniform as i}from\"../shaderModules/FloatPassUniform.js\";import{glsl as o}from\"../shaderModules/glsl.js\";function n(n,c){if(!c.screenSizeEnabled)return;const t=n.vertex;e(t,c),t.uniforms.add(new r(\"perScreenPixelRatio\",(e=>e.camera.perScreenPixelRatio)),new i(\"screenSizeScale\",(e=>e.screenSizeScale))).code.add(o`float computeRenderPixelSizeAt( vec3 pWorld ){\nvec3 viewForward = - vec3(view[0][2], view[1][2], view[2][2]);\nfloat viewDirectionDistance = abs(dot(viewForward, pWorld - cameraPosition));\nreturn viewDirectionDistance * perScreenPixelRatio;\n}\nvec3 screenSizeScaling(vec3 position, vec3 anchor){\nreturn position * screenSizeScale * computeRenderPixelSizeAt(anchor) + anchor;\n}`)}export{n as ScreenSizeScaling};\n"],"names":[],"sourceRoot":""}