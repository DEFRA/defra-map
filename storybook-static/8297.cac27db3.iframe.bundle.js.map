{"version":3,"file":"8297.cac27db3.iframe.bundle.js","mappings":";;;;;;;;;;;AAeA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;AAKA;;;;AAIA;;;;AAIA;;;;AAIA;AACA;;;;;;;;;;;;;;;;AAgBA;;;;;;;AAOA;;;;AAIA;;;;;;;;;AASA;;;;;;;;AAQA;;AAEA;;;;;;AAMA;;;AAGA;;AAEA;AACA;;;;AAIA;AACA;AACA;;;;;;;;;;;;;;AAcA;;;;;;;AAOA;;;;;;AAMA;AACA;;;;;;;;;;;AAWA;;;AAGA;;;;;;;;AAQA;AACA;;;AAGA;;;AAGA;;AC/MA;;AAEA;;;;;;;;;;;;;;AAcA;;AAEA;;AAEA;;AAEA;;ACtBA;;;AAGA;;AAEA;;;;;;;AAOA;AACA;AACA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;AAmBA;;AAEA;;;;AAIA;;AAEA;;;;;AC9CA;;;;;;;;;;;;AAYA","sources":["webpack://@defra/flood-map/./node_modules/@arcgis/core/chunks/RibbonLine.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/RibbonVertexPosition.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/LineStipple.glsl.js","webpack://@defra/flood-map/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/MarkerSizing.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{ShaderOutput as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{ObjectAndLayerIdColor as t}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js\";import{RibbonVertexPosition as n}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/RibbonVertexPosition.glsl.js\";import{LineStipple as r,computePixelSize as o}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/LineStipple.glsl.js\";import{MarkerSizing as a}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MarkerSizing.glsl.js\";import{PiUtils as s}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PiUtils.glsl.js\";import{terrainDepthTest as l}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/TerrainDepthTest.glsl.js\";import{ColorConversion as d}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{addProjViewLocalOrigin as p,addPixelRatio as c}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float2BindUniform as m}from\"../views/3d/webgl-engine/core/shaderModules/Float2BindUniform.js\";import{Float4BindUniform as v}from\"../views/3d/webgl-engine/core/shaderModules/Float4BindUniform.js\";import{Float4PassUniform as f}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatBindUniform as g}from\"../views/3d/webgl-engine/core/shaderModules/FloatBindUniform.js\";import{FloatPassUniform as h}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as S}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{Matrix4BindUniform as u}from\"../views/3d/webgl-engine/core/shaderModules/Matrix4BindUniform.js\";import{VertexAttribute as D}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{LineMarkerSpace as x}from\"../views/3d/webgl-engine/shaders/LineMarkerTechniqueConfiguration.js\";import{outputColorHighlightOID as L}from\"../views/3d/webgl-engine/shaders/OutputColorHighlightOID.glsl.js\";import{CapType as w}from\"../views/3d/webgl-engine/shaders/RibbonLineTechniqueConfiguration.js\";import{ShaderBuilder as b}from\"../views/webgl/ShaderBuilder.js\";import{alphaCutoff as y}from\"../webscene/support/AlphaCutoff.js\";const j=1;function C(C){const F=new b,{attributes:P,varyings:R,vertex:z,fragment:A}=F,{applyMarkerOffset:T,draped:V,output:O,capType:W,stippleEnabled:E,falloffEnabled:I,roundJoins:N,wireframe:M,innerColorEnabled:_}=C;F.include(s),F.include(n,C),F.include(r,C),F.include(t,C),F.include(l,C);const k=T&&!V;k&&(z.uniforms.add(new h(\"markerScale\",(e=>e.markerScale))),F.include(a,{space:x.World})),p(z,C),z.uniforms.add(new u(\"inverseProjectionMatrix\",(e=>e.camera.inverseProjectionMatrix)),new m(\"nearFar\",(e=>e.camera.nearFar)),new h(\"miterLimit\",(e=>\"miter\"!==e.join?0:e.miterLimit)),new v(\"viewport\",(e=>e.camera.fullViewport))),z.constants.add(\"LARGE_HALF_FLOAT\",\"float\",65500),P.add(D.POSITION,\"vec3\"),P.add(D.PREVPOSITION,\"vec3\"),P.add(D.NEXTPOSITION,\"vec3\"),P.add(D.SUBDIVISIONFACTOR,\"float\"),P.add(D.UV0,\"vec2\"),R.add(\"vColor\",\"vec4\"),R.add(\"vpos\",\"vec3\"),R.add(\"vLineDistance\",\"float\"),R.add(\"vLineWidth\",\"float\");const B=E;B&&R.add(\"vLineSizeInv\",\"float\");const U=W===w.ROUND,$=E&&U,H=I||$;H&&R.add(\"vLineDistanceNorm\",\"float\"),U&&(R.add(\"vSegmentSDF\",\"float\"),R.add(\"vReverseSegmentSDF\",\"float\")),z.code.add(S`vec2 perpendicular(vec2 v) {\nreturn vec2(v.y, -v.x);\n}\nfloat interp(float ncp, vec4 a, vec4 b) {\nreturn (-ncp - a.z) / (b.z - a.z);\n}\nvec2 rotate(vec2 v, float a) {\nfloat s = sin(a);\nfloat c = cos(a);\nmat2 m = mat2(c, -s, s, c);\nreturn m * v;\n}`),z.code.add(S`vec4 projectAndScale(vec4 pos) {\nvec4 posNdc = proj * pos;\nposNdc.xy *= viewport.zw / posNdc.w;\nreturn posNdc;\n}`),z.code.add(S`void clipAndTransform(inout vec4 pos, inout vec4 prev, inout vec4 next, in bool isStartVertex) {\nfloat vnp = nearFar[0] * 0.99;\nif(pos.z > -nearFar[0]) {\nif (!isStartVertex) {\nif(prev.z < -nearFar[0]) {\npos = mix(prev, pos, interp(vnp, prev, pos));\nnext = pos;\n} else {\npos = vec4(0.0, 0.0, 0.0, 1.0);\n}\n} else {\nif(next.z < -nearFar[0]) {\npos = mix(pos, next, interp(vnp, pos, next));\nprev = pos;\n} else {\npos = vec4(0.0, 0.0, 0.0, 1.0);\n}\n}\n} else {\nif (prev.z > -nearFar[0]) {\nprev = mix(pos, prev, interp(vnp, pos, prev));\n}\nif (next.z > -nearFar[0]) {\nnext = mix(next, pos, interp(vnp, next, pos));\n}\n}\nforwardViewPosDepth(pos.xyz);\npos = projectAndScale(pos);\nnext = projectAndScale(next);\nprev = projectAndScale(prev);\n}`),c(z),z.constants.add(\"aaWidth\",\"float\",E?0:1).main.add(S`\n    // unpack values from uv0.y\n    bool isStartVertex = abs(abs(uv0.y)-3.0) == 1.0;\n\n    float coverage = 1.0;\n\n    // Check for special value of uv0.y which is used by the Renderer when graphics\n    // are removed before the VBO is recompacted. If this is the case, then we just\n    // project outside of clip space.\n    if (uv0.y == 0.0) {\n      // Project out of clip space\n      gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\n    }\n    else {\n      bool isJoin = abs(uv0.y) < 3.0;\n      float lineSize = getSize();\n\n      if (lineSize < 1.0) {\n        coverage = lineSize; // convert sub-pixel coverage to alpha\n        lineSize = 1.0;\n      }\n      lineSize += aaWidth;\n\n      float lineWidth = lineSize * pixelRatio;\n      vLineWidth = lineWidth;\n      ${B?S`vLineSizeInv = 1.0 / lineSize;`:\"\"}\n\n      vec4 pos  = view * vec4(position, 1.0);\n      vec4 prev = view * vec4(prevPosition, 1.0);\n      vec4 next = view * vec4(nextPosition, 1.0);\n  `),k&&z.main.add(S`vec4 other = isStartVertex ? next : prev;\nbool markersHidden = areWorldMarkersHidden(pos, other);\nif(!isJoin && !markersHidden) {\npos.xyz += normalize(other.xyz - pos.xyz) * getWorldMarkerSize(pos) * 0.5;\n}`),z.main.add(S`clipAndTransform(pos, prev, next, isStartVertex);\nvec2 left = (pos.xy - prev.xy);\nvec2 right = (next.xy - pos.xy);\nfloat leftLen = length(left);\nfloat rightLen = length(right);`);(E||U)&&z.main.add(S`\n      float isEndVertex = float(!isStartVertex);\n      vec2 segmentOrigin = mix(pos.xy, prev.xy, isEndVertex);\n      vec2 segment = mix(right, left, isEndVertex);\n      ${U?S`vec2 segmentEnd = mix(next.xy, pos.xy, isEndVertex);`:\"\"}\n    `),z.main.add(S`left = (leftLen > 0.001) ? left/leftLen : vec2(0.0, 0.0);\nright = (rightLen > 0.001) ? right/rightLen : vec2(0.0, 0.0);\nvec2 capDisplacementDir = vec2(0, 0);\nvec2 joinDisplacementDir = vec2(0, 0);\nfloat displacementLen = lineWidth;\nif (isJoin) {\nbool isOutside = (left.x * right.y - left.y * right.x) * uv0.y > 0.0;\njoinDisplacementDir = normalize(left + right);\njoinDisplacementDir = perpendicular(joinDisplacementDir);\nif (leftLen > 0.001 && rightLen > 0.001) {\nfloat nDotSeg = dot(joinDisplacementDir, left);\ndisplacementLen /= length(nDotSeg * left - joinDisplacementDir);\nif (!isOutside) {\ndisplacementLen = min(displacementLen, min(leftLen, rightLen)/abs(nDotSeg));\n}\n}\nif (isOutside && (displacementLen > miterLimit * lineWidth)) {`),N?z.main.add(S`\n        vec2 startDir = leftLen < 0.001 ? right : left;\n        startDir = perpendicular(startDir);\n\n        vec2 endDir = rightLen < 0.001 ? left : right;\n        endDir = perpendicular(endDir);\n\n        float factor = ${E?S`min(1.0, subdivisionFactor * ${S.float((j+2)/(j+1))})`:S`subdivisionFactor`};\n\n        float rotationAngle = acos(clamp(dot(startDir, endDir), -1.0, 1.0));\n        joinDisplacementDir = rotate(startDir, -sign(uv0.y) * factor * rotationAngle);\n      `):z.main.add(S`if (leftLen < 0.001) {\njoinDisplacementDir = right;\n}\nelse if (rightLen < 0.001) {\njoinDisplacementDir = left;\n}\nelse {\njoinDisplacementDir = (isStartVertex || subdivisionFactor > 0.0) ? right : left;\n}\njoinDisplacementDir = perpendicular(joinDisplacementDir);`);const J=W!==w.BUTT;return z.main.add(S`\n        displacementLen = lineWidth;\n      }\n    } else {\n      // CAP handling ---------------------------------------------------\n      joinDisplacementDir = isStartVertex ? right : left;\n      joinDisplacementDir = perpendicular(joinDisplacementDir);\n\n      ${J?S`capDisplacementDir = isStartVertex ? -right : left;`:\"\"}\n    }\n  `),z.main.add(S`\n    // Displacement (in pixels) caused by join/or cap\n    vec2 dpos = joinDisplacementDir * sign(uv0.y) * displacementLen + capDisplacementDir * displacementLen;\n    float lineDistNorm = sign(uv0.y) * pos.w;\n\n    vLineDistance =  lineWidth * lineDistNorm;\n    ${H?S`vLineDistanceNorm = lineDistNorm;`:\"\"}\n\n    pos.xy += dpos;\n  `),U&&z.main.add(S`vec2 segmentDir = normalize(segment);\nvSegmentSDF = (isJoin && isStartVertex) ? LARGE_HALF_FLOAT : (dot(pos.xy - segmentOrigin, segmentDir) * pos.w) ;\nvReverseSegmentSDF = (isJoin && !isStartVertex) ? LARGE_HALF_FLOAT : (dot(pos.xy - segmentEnd, -segmentDir) * pos.w);`),E&&(V?z.uniforms.add(new g(\"worldToScreenRatio\",(e=>1/e.screenToPCSRatio))):z.main.add(S`vec3 segmentCenter = mix((nextPosition + position) * 0.5, (position + prevPosition) * 0.5, isEndVertex);\nfloat worldToScreenRatio = computeWorldToScreenRatio(segmentCenter);`),z.main.add(S`float segmentLengthScreenDouble = length(segment);\nfloat segmentLengthScreen = segmentLengthScreenDouble * 0.5;\nfloat discreteWorldToScreenRatio = discretizeWorldToScreenRatio(worldToScreenRatio);\nfloat segmentLengthRender = length(mix(nextPosition - position, position - prevPosition, isEndVertex));\nvStipplePatternStretch = worldToScreenRatio / discreteWorldToScreenRatio;`),V?z.main.add(S`float segmentLengthPseudoScreen = segmentLengthScreen / pixelRatio * discreteWorldToScreenRatio / worldToScreenRatio;\nfloat startPseudoScreen = uv0.x * discreteWorldToScreenRatio - mix(0.0, segmentLengthPseudoScreen, isEndVertex);`):z.main.add(S`float startPseudoScreen = mix(uv0.x, uv0.x - segmentLengthRender, isEndVertex) * discreteWorldToScreenRatio;\nfloat segmentLengthPseudoScreen = segmentLengthRender * discreteWorldToScreenRatio;`),z.uniforms.add(new h(\"stipplePatternPixelSize\",(e=>o(e)))),z.main.add(S`float patternLength = lineSize * stipplePatternPixelSize;\nvStippleDistanceLimits = computeStippleDistanceLimits(startPseudoScreen, segmentLengthPseudoScreen, segmentLengthScreen, patternLength);\nvStippleDistance = mix(vStippleDistanceLimits.x, vStippleDistanceLimits.y, isEndVertex);\nif (segmentLengthScreenDouble >= 0.001) {\nvec2 stippleDisplacement = pos.xy - segmentOrigin;\nfloat stippleDisplacementFactor = dot(segment, stippleDisplacement) / (segmentLengthScreenDouble * segmentLengthScreenDouble);\nvStippleDistance += (stippleDisplacementFactor - isEndVertex) * (vStippleDistanceLimits.y - vStippleDistanceLimits.x);\n}\nvStippleDistanceLimits *= pos.w;\nvStippleDistance *= pos.w;\nvStippleDistanceLimits = isJoin ?\nvStippleDistanceLimits :\nisStartVertex ?\nvec2(-1e34, vStippleDistanceLimits.y) :\nvec2(vStippleDistanceLimits.x, 1e34);`)),z.main.add(S`\n      // Convert back into NDC\n      pos.xy = (pos.xy / viewport.zw) * pos.w;\n\n      vColor = getColor();\n      vColor.a *= coverage;\n\n      ${M&&!V?\"pos.z -= 0.001 * pos.w;\":\"\"}\n\n      // transform final position to camera space for slicing\n      vpos = (inverseProjectionMatrix * pos).xyz;\n      gl_Position = pos;\n      forwardObjectAndLayerIdColor();\n    }`),F.fragment.include(i,C),F.include(L,C),A.include(d),A.main.add(S`discardBySlice(vpos);\ndiscardByTerrainDepth();`),M?A.main.add(S`vec4 finalColor = vec4(1.0, 0.0, 1.0, 1.0);`):(U&&A.main.add(S`\n        float sdf = min(vSegmentSDF, vReverseSegmentSDF);\n        vec2 fragmentPosition = vec2(\n          min(sdf, 0.0),\n          vLineDistance\n        ) * gl_FragCoord.w;\n\n        float fragmentRadius = length(fragmentPosition);\n        float fragmentCapSDF = (fragmentRadius - vLineWidth) * 0.5; // Divide by 2 to transform from double pixel scale\n        float capCoverage = clamp(0.5 - fragmentCapSDF, 0.0, 1.0);\n\n        if (capCoverage < ${S.float(y)}) {\n          discard;\n        }\n      `),$?A.main.add(S`\n      vec2 stipplePosition = vec2(\n        min(getStippleSDF() * 2.0 - 1.0, 0.0),\n        vLineDistanceNorm * gl_FragCoord.w\n      );\n      float stippleRadius = length(stipplePosition * vLineWidth);\n      float stippleCapSDF = (stippleRadius - vLineWidth) * 0.5; // Divide by 2 to transform from double pixel scale\n      float stippleCoverage = clamp(0.5 - stippleCapSDF, 0.0, 1.0);\n      float stippleAlpha = step(${S.float(y)}, stippleCoverage);\n      `):A.main.add(S`float stippleAlpha = getStippleAlpha();`),O!==e.ObjectAndLayerIdColor&&A.main.add(S`discardByStippleAlpha(stippleAlpha, ${S.float(y)});`),A.uniforms.add(new f(\"intrinsicColor\",(e=>e.color))),A.main.add(S`vec4 color = intrinsicColor * vColor;`),_&&(A.uniforms.add(new f(\"innerColor\",(e=>e.innerColor??e.color)),new h(\"innerWidth\",((e,i)=>e.innerWidth*i.camera.pixelRatio))),A.main.add(S`float distToInner = abs(vLineDistance * gl_FragCoord.w) - innerWidth;\nfloat innerAA = clamp(0.5 - distToInner, 0.0, 1.0);\nfloat innerAlpha = innerColor.a + color.a * (1.0 - innerColor.a);\ncolor = mix(color, vec4(innerColor.rgb, innerAlpha), innerAA);`)),A.main.add(S`vec4 finalColor = blendStipple(color, stippleAlpha);`),I&&(A.uniforms.add(new h(\"falloff\",(e=>e.falloff))),A.main.add(S`finalColor.a *= pow(max(0.0, 1.0 - abs(vLineDistanceNorm * gl_FragCoord.w)), falloff);`)),E||A.main.add(S`float featherStartDistance = max(vLineWidth - 2.0, 0.0);\nfloat value = abs(vLineDistance) * gl_FragCoord.w;\nfloat feather = (value - featherStartDistance) / (vLineWidth - featherStartDistance);\nfinalColor.a *= 1.0 - clamp(feather, 0.0, 1.0);`)),A.main.add(S`outputColorHighlightOID(finalColor, vpos);`),F}const F=Object.freeze(Object.defineProperty({__proto__:null,build:C,ribbonlineNumRoundJoinSubdivisions:j},Symbol.toStringTag,{value:\"Module\"}));export{F as R,C as b,j as r};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{VisualVariables as t}from\"../shading/VisualVariables.glsl.js\";import{Float3PassUniform as i}from\"../../shaderModules/Float3PassUniform.js\";import{FloatPassUniform as e}from\"../../shaderModules/FloatPassUniform.js\";import{FloatsPassUniform as a}from\"../../shaderModules/FloatsPassUniform.js\";import{glsl as r}from\"../../shaderModules/glsl.js\";import{VertexAttribute as v}from\"../../../lib/VertexAttribute.js\";const o=8;function c(c,s){const l=c.vertex;l.uniforms.add(new e(\"intrinsicWidth\",(t=>t.width))),s.vvSize?(c.attributes.add(v.SIZEFEATUREATTRIBUTE,\"float\"),l.uniforms.add(new i(\"vvSizeMinSize\",(t=>t.vvSize.minSize)),new i(\"vvSizeMaxSize\",(t=>t.vvSize.maxSize)),new i(\"vvSizeOffset\",(t=>t.vvSize.offset)),new i(\"vvSizeFactor\",(t=>t.vvSize.factor))),l.code.add(r`float getSize() {\nreturn intrinsicWidth * clamp(vvSizeOffset + sizeFeatureAttribute * vvSizeFactor, vvSizeMinSize, vvSizeMaxSize).x;\n}`)):(c.attributes.add(v.SIZE,\"float\"),l.code.add(r`float getSize(){\nreturn intrinsicWidth * size;\n}`)),s.vvOpacity?(c.attributes.add(v.OPACITYFEATUREATTRIBUTE,\"float\"),l.constants.add(\"vvOpacityNumber\",\"int\",8),l.uniforms.add(new a(\"vvOpacityValues\",(t=>t.vvOpacity.values),o),new a(\"vvOpacityOpacities\",(t=>t.vvOpacity.opacityValues),o)),l.code.add(r`float interpolateOpacity( float value ){\nif (value <= vvOpacityValues[0]) {\nreturn vvOpacityOpacities[0];\n}\nfor (int i = 1; i < vvOpacityNumber; ++i) {\nif (vvOpacityValues[i] >= value) {\nfloat f = (value - vvOpacityValues[i-1]) / (vvOpacityValues[i] - vvOpacityValues[i-1]);\nreturn mix(vvOpacityOpacities[i-1], vvOpacityOpacities[i], f);\n}\n}\nreturn vvOpacityOpacities[vvOpacityNumber - 1];\n}\nvec4 applyOpacity( vec4 color ){\nreturn vec4(color.xyz, interpolateOpacity(opacityFeatureAttribute));\n}`)):l.code.add(r`vec4 applyOpacity( vec4 color ){\nreturn color;\n}`),s.vvColor?(c.include(t,s),c.attributes.add(v.COLORFEATUREATTRIBUTE,\"float\"),l.code.add(r`vec4 getColor(){\nreturn applyOpacity(interpolateVVColor(colorFeatureAttribute));\n}`)):(c.attributes.add(v.COLOR,\"vec4\"),l.code.add(r`vec4 getColor(){\nreturn applyOpacity(color);\n}`))}export{c as RibbonVertexPosition};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{RgbaFloatEncoding as e}from\"../util/RgbaFloatEncoding.glsl.js\";import{addCameraPosition as t,addPixelRatio as o}from\"../util/View.glsl.js\";import{Float4PassUniform as r}from\"../../shaderModules/Float4PassUniform.js\";import{FloatBindUniform as i}from\"../../shaderModules/FloatBindUniform.js\";import{FloatPassUniform as l}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as a,If as p}from\"../../shaderModules/glsl.js\";import{Texture2DPassUniform as s}from\"../../shaderModules/Texture2DPassUniform.js\";import{computeLongestPattern as n,computeTextureSize as d}from\"../../../materials/stippleTextureRepository.js\";import{ensureColor4 as c}from\"../../../shaders/ensureColor4.js\";function f(n,d){if(!d.stippleEnabled)return void n.fragment.code.add(a`float getStippleAlpha() { return 1.0; }\nvoid discardByStippleAlpha(float stippleAlpha, float threshold) {}\nvec4 blendStipple(vec4 color, float stippleAlpha) { return color; }`);const f=!(d.draped&&d.stipplePreferContinuous),{vertex:g,fragment:h}=n;h.include(e),d.draped||(t(g,d),g.uniforms.add(new i(\"worldToScreenPerDistanceRatio\",(({camera:e})=>1/e.perScreenPixelRatio))).code.add(a`float computeWorldToScreenRatio(vec3 segmentCenter) {\nfloat segmentDistanceToCamera = length(segmentCenter - cameraPosition);\nreturn worldToScreenPerDistanceRatio / segmentDistanceToCamera;\n}`)),n.varyings.add(\"vStippleDistance\",\"float\"),n.varyings.add(\"vStippleDistanceLimits\",\"vec2\"),n.varyings.add(\"vStipplePatternStretch\",\"float\"),g.code.add(a`\n    float discretizeWorldToScreenRatio(float worldToScreenRatio) {\n      float step = ${a.float(u)};\n\n      float discreteWorldToScreenRatio = log(worldToScreenRatio);\n      discreteWorldToScreenRatio = ceil(discreteWorldToScreenRatio / step) * step;\n      discreteWorldToScreenRatio = exp(discreteWorldToScreenRatio);\n      return discreteWorldToScreenRatio;\n    }\n  `),g.code.add(a`vec2 computeStippleDistanceLimits(float startPseudoScreen, float segmentLengthPseudoScreen, float segmentLengthScreen, float patternLength) {`),g.code.add(a`\n    if (segmentLengthPseudoScreen >= ${f?\"patternLength\":\"1e4\"}) {\n  `),o(g),g.code.add(a`float repetitions = segmentLengthScreen / (patternLength * pixelRatio);\nfloat flooredRepetitions = max(1.0, floor(repetitions + 0.5));\nfloat segmentLengthScreenRounded = flooredRepetitions * patternLength;\nfloat stretch = repetitions / flooredRepetitions;\nvStipplePatternStretch = max(0.75, stretch);\nreturn vec2(0.0, segmentLengthScreenRounded);\n}\nreturn vec2(startPseudoScreen, startPseudoScreen + segmentLengthPseudoScreen);\n}`),h.uniforms.add(new s(\"stipplePatternTexture\",(e=>e.stippleTexture)),new l(\"stipplePatternSDFNormalizer\",(e=>m(e.stipplePattern))),new l(\"stipplePatternPixelSizeInv\",(e=>1/S(e)))),d.stippleOffColorEnabled&&h.uniforms.add(new r(\"stippleOffColor\",(e=>c(e.stippleOffColor)))),h.code.add(a`float getStippleSDF(out bool isClamped) {\nfloat stippleDistanceClamped = clamp(vStippleDistance, vStippleDistanceLimits.x, vStippleDistanceLimits.y);\nvec2 aaCorrectedLimits = vStippleDistanceLimits + vec2(1.0, -1.0) / gl_FragCoord.w;\nisClamped = vStippleDistance < aaCorrectedLimits.x || vStippleDistance > aaCorrectedLimits.y;\nfloat u = stippleDistanceClamped * gl_FragCoord.w * stipplePatternPixelSizeInv * vLineSizeInv;\nu = fract(u);\nfloat encodedSDF = rgbaTofloat(texture(stipplePatternTexture, vec2(u, 0.5)));\nfloat sdf = (encodedSDF * 2.0 - 1.0) * stipplePatternSDFNormalizer;\nreturn (sdf - 0.5) * vStipplePatternStretch + 0.5;\n}\nfloat getStippleSDF() {\nbool ignored;\nreturn getStippleSDF(ignored);\n}\nfloat getStippleAlpha() {\nbool isClamped;\nfloat stippleSDF = getStippleSDF(isClamped);\nfloat antiAliasedResult = clamp(stippleSDF * vLineWidth + 0.5, 0.0, 1.0);\nreturn isClamped ? floor(antiAliasedResult + 0.5) : antiAliasedResult;\n}`),h.code.add(a`\n    void discardByStippleAlpha(float stippleAlpha, float threshold) {\n     ${p(!d.stippleOffColorEnabled,\"if (stippleAlpha < threshold) { discard; }\")}\n    }\n\n    vec4 blendStipple(vec4 color, float stippleAlpha) {\n      return ${d.stippleOffColorEnabled?\"mix(color, stippleOffColor, stippleAlpha)\":\"vec4(color.rgb, color.a * stippleAlpha)\"};\n    }\n  `)}function m(e){return e?(Math.floor(.5*(n(e)-1))+.5)/e.pixelRatio:1}function S(e){const t=e.stipplePattern;return t?d(e.stipplePattern)/t.pixelRatio:1}const u=.4;export{f as LineStipple,S as computePixelSize};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{markerSizePerLineWidth as e}from\"../../../../support/engineContent/marker.js\";import{addPixelRatio as r}from\"../util/View.glsl.js\";import{FloatBindUniform as o}from\"../../shaderModules/FloatBindUniform.js\";import{glsl as t}from\"../../shaderModules/glsl.js\";import{LineMarkerSpace as a}from\"../../../shaders/LineMarkerTechniqueConfiguration.js\";function n(n,i){const d=n.vertex;r(d),null==d.uniforms.get(\"markerScale\")&&d.constants.add(\"markerScale\",\"float\",1),d.constants.add(\"markerSizePerLineWidth\",\"float\",e).code.add(t`float getLineWidth() {\nreturn max(getSize(), 1.0) * pixelRatio;\n}\nfloat getScreenMarkerSize() {\nreturn markerSizePerLineWidth * markerScale * getLineWidth();\n}`),i.space===a.World&&(d.constants.add(\"maxSegmentLengthFraction\",\"float\",.45),d.uniforms.add(new o(\"perRenderPixelRatio\",(e=>e.camera.perRenderPixelRatio))),d.code.add(t`bool areWorldMarkersHidden(vec4 pos, vec4 other) {\nvec3 midPoint = mix(pos.xyz, other.xyz, 0.5);\nfloat distanceToCamera = length(midPoint);\nfloat screenToWorldRatio = perRenderPixelRatio * distanceToCamera * 0.5;\nfloat worldMarkerSize = getScreenMarkerSize() * screenToWorldRatio;\nfloat segmentLen = length(pos.xyz - other.xyz);\nreturn worldMarkerSize > maxSegmentLengthFraction * segmentLen;\n}\nfloat getWorldMarkerSize(vec4 pos) {\nfloat distanceToCamera = length(pos.xyz);\nfloat screenToWorldRatio = perRenderPixelRatio * distanceToCamera * 0.5;\nreturn getScreenMarkerSize() * screenToWorldRatio;\n}`))}export{n as MarkerSizing};\n"],"names":[],"sourceRoot":""}