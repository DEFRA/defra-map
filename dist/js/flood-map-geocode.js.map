{"version":3,"file":"flood-map-geocode.js","mappings":"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","sources":["webpack://defra/./node_modules/@turf/helpers/dist/esm/index.js","webpack://defra/./src/js/provider/os-open-names/reverse-geocode.js","webpack://defra/./node_modules/geodesy/dms.js","webpack://defra/./node_modules/geodesy/vector3d.js","webpack://defra/./node_modules/geodesy/latlon-ellipsoidal.js","webpack://defra/./node_modules/geodesy/latlon-ellipsoidal-datum.js","webpack://defra/./node_modules/geodesy/osgridref.js","webpack://defra/./node_modules/@turf/invariant/dist/esm/index.js","webpack://defra/./node_modules/@turf/distance/dist/esm/index.js","webpack://defra/./src/js/lib/viewport.js","webpack://defra/./src/js/provider/os-open-names/geocode.js"],"sourcesContent":["// index.ts\nvar earthRadius = 63710088e-1;\nvar factors = {\n  centimeters: earthRadius * 100,\n  centimetres: earthRadius * 100,\n  degrees: 360 / (2 * Math.PI),\n  feet: earthRadius * 3.28084,\n  inches: earthRadius * 39.37,\n  kilometers: earthRadius / 1e3,\n  kilometres: earthRadius / 1e3,\n  meters: earthRadius,\n  metres: earthRadius,\n  miles: earthRadius / 1609.344,\n  millimeters: earthRadius * 1e3,\n  millimetres: earthRadius * 1e3,\n  nauticalmiles: earthRadius / 1852,\n  radians: 1,\n  yards: earthRadius * 1.0936\n};\nvar areaFactors = {\n  acres: 247105e-9,\n  centimeters: 1e4,\n  centimetres: 1e4,\n  feet: 10.763910417,\n  hectares: 1e-4,\n  inches: 1550.003100006,\n  kilometers: 1e-6,\n  kilometres: 1e-6,\n  meters: 1,\n  metres: 1,\n  miles: 386e-9,\n  nauticalmiles: 29155334959812285e-23,\n  millimeters: 1e6,\n  millimetres: 1e6,\n  yards: 1.195990046\n};\nfunction feature(geom, properties, options = {}) {\n  const feat = { type: \"Feature\" };\n  if (options.id === 0 || options.id) {\n    feat.id = options.id;\n  }\n  if (options.bbox) {\n    feat.bbox = options.bbox;\n  }\n  feat.properties = properties || {};\n  feat.geometry = geom;\n  return feat;\n}\nfunction geometry(type, coordinates, _options = {}) {\n  switch (type) {\n    case \"Point\":\n      return point(coordinates).geometry;\n    case \"LineString\":\n      return lineString(coordinates).geometry;\n    case \"Polygon\":\n      return polygon(coordinates).geometry;\n    case \"MultiPoint\":\n      return multiPoint(coordinates).geometry;\n    case \"MultiLineString\":\n      return multiLineString(coordinates).geometry;\n    case \"MultiPolygon\":\n      return multiPolygon(coordinates).geometry;\n    default:\n      throw new Error(type + \" is invalid\");\n  }\n}\nfunction point(coordinates, properties, options = {}) {\n  if (!coordinates) {\n    throw new Error(\"coordinates is required\");\n  }\n  if (!Array.isArray(coordinates)) {\n    throw new Error(\"coordinates must be an Array\");\n  }\n  if (coordinates.length < 2) {\n    throw new Error(\"coordinates must be at least 2 numbers long\");\n  }\n  if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n    throw new Error(\"coordinates must contain numbers\");\n  }\n  const geom = {\n    type: \"Point\",\n    coordinates\n  };\n  return feature(geom, properties, options);\n}\nfunction points(coordinates, properties, options = {}) {\n  return featureCollection(\n    coordinates.map((coords) => {\n      return point(coords, properties);\n    }),\n    options\n  );\n}\nfunction polygon(coordinates, properties, options = {}) {\n  for (const ring of coordinates) {\n    if (ring.length < 4) {\n      throw new Error(\n        \"Each LinearRing of a Polygon must have 4 or more Positions.\"\n      );\n    }\n    if (ring[ring.length - 1].length !== ring[0].length) {\n      throw new Error(\"First and last Position are not equivalent.\");\n    }\n    for (let j = 0; j < ring[ring.length - 1].length; j++) {\n      if (ring[ring.length - 1][j] !== ring[0][j]) {\n        throw new Error(\"First and last Position are not equivalent.\");\n      }\n    }\n  }\n  const geom = {\n    type: \"Polygon\",\n    coordinates\n  };\n  return feature(geom, properties, options);\n}\nfunction polygons(coordinates, properties, options = {}) {\n  return featureCollection(\n    coordinates.map((coords) => {\n      return polygon(coords, properties);\n    }),\n    options\n  );\n}\nfunction lineString(coordinates, properties, options = {}) {\n  if (coordinates.length < 2) {\n    throw new Error(\"coordinates must be an array of two or more positions\");\n  }\n  const geom = {\n    type: \"LineString\",\n    coordinates\n  };\n  return feature(geom, properties, options);\n}\nfunction lineStrings(coordinates, properties, options = {}) {\n  return featureCollection(\n    coordinates.map((coords) => {\n      return lineString(coords, properties);\n    }),\n    options\n  );\n}\nfunction featureCollection(features, options = {}) {\n  const fc = { type: \"FeatureCollection\" };\n  if (options.id) {\n    fc.id = options.id;\n  }\n  if (options.bbox) {\n    fc.bbox = options.bbox;\n  }\n  fc.features = features;\n  return fc;\n}\nfunction multiLineString(coordinates, properties, options = {}) {\n  const geom = {\n    type: \"MultiLineString\",\n    coordinates\n  };\n  return feature(geom, properties, options);\n}\nfunction multiPoint(coordinates, properties, options = {}) {\n  const geom = {\n    type: \"MultiPoint\",\n    coordinates\n  };\n  return feature(geom, properties, options);\n}\nfunction multiPolygon(coordinates, properties, options = {}) {\n  const geom = {\n    type: \"MultiPolygon\",\n    coordinates\n  };\n  return feature(geom, properties, options);\n}\nfunction geometryCollection(geometries, properties, options = {}) {\n  const geom = {\n    type: \"GeometryCollection\",\n    geometries\n  };\n  return feature(geom, properties, options);\n}\nfunction round(num, precision = 0) {\n  if (precision && !(precision >= 0)) {\n    throw new Error(\"precision must be a positive number\");\n  }\n  const multiplier = Math.pow(10, precision || 0);\n  return Math.round(num * multiplier) / multiplier;\n}\nfunction radiansToLength(radians, units = \"kilometers\") {\n  const factor = factors[units];\n  if (!factor) {\n    throw new Error(units + \" units is invalid\");\n  }\n  return radians * factor;\n}\nfunction lengthToRadians(distance, units = \"kilometers\") {\n  const factor = factors[units];\n  if (!factor) {\n    throw new Error(units + \" units is invalid\");\n  }\n  return distance / factor;\n}\nfunction lengthToDegrees(distance, units) {\n  return radiansToDegrees(lengthToRadians(distance, units));\n}\nfunction bearingToAzimuth(bearing) {\n  let angle = bearing % 360;\n  if (angle < 0) {\n    angle += 360;\n  }\n  return angle;\n}\nfunction azimuthToBearing(angle) {\n  angle = angle % 360;\n  if (angle > 180) {\n    return angle - 360;\n  } else if (angle < -180) {\n    return angle + 360;\n  }\n  return angle;\n}\nfunction radiansToDegrees(radians) {\n  const normalisedRadians = radians % (2 * Math.PI);\n  return normalisedRadians * 180 / Math.PI;\n}\nfunction degreesToRadians(degrees) {\n  const normalisedDegrees = degrees % 360;\n  return normalisedDegrees * Math.PI / 180;\n}\nfunction convertLength(length, originalUnit = \"kilometers\", finalUnit = \"kilometers\") {\n  if (!(length >= 0)) {\n    throw new Error(\"length must be a positive number\");\n  }\n  return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nfunction convertArea(area, originalUnit = \"meters\", finalUnit = \"kilometers\") {\n  if (!(area >= 0)) {\n    throw new Error(\"area must be a positive number\");\n  }\n  const startFactor = areaFactors[originalUnit];\n  if (!startFactor) {\n    throw new Error(\"invalid original units\");\n  }\n  const finalFactor = areaFactors[finalUnit];\n  if (!finalFactor) {\n    throw new Error(\"invalid final units\");\n  }\n  return area / startFactor * finalFactor;\n}\nfunction isNumber(num) {\n  return !isNaN(num) && num !== null && !Array.isArray(num);\n}\nfunction isObject(input) {\n  return input !== null && typeof input === \"object\" && !Array.isArray(input);\n}\nfunction validateBBox(bbox) {\n  if (!bbox) {\n    throw new Error(\"bbox is required\");\n  }\n  if (!Array.isArray(bbox)) {\n    throw new Error(\"bbox must be an Array\");\n  }\n  if (bbox.length !== 4 && bbox.length !== 6) {\n    throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n  }\n  bbox.forEach((num) => {\n    if (!isNumber(num)) {\n      throw new Error(\"bbox must only contain numbers\");\n    }\n  });\n}\nfunction validateId(id) {\n  if (!id) {\n    throw new Error(\"id is required\");\n  }\n  if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n    throw new Error(\"id must be a number or a string\");\n  }\n}\nexport {\n  areaFactors,\n  azimuthToBearing,\n  bearingToAzimuth,\n  convertArea,\n  convertLength,\n  degreesToRadians,\n  earthRadius,\n  factors,\n  feature,\n  featureCollection,\n  geometry,\n  geometryCollection,\n  isNumber,\n  isObject,\n  lengthToDegrees,\n  lengthToRadians,\n  lineString,\n  lineStrings,\n  multiLineString,\n  multiPoint,\n  multiPolygon,\n  point,\n  points,\n  polygon,\n  polygons,\n  radiansToDegrees,\n  radiansToLength,\n  round,\n  validateBBox,\n  validateId\n};\n//# sourceMappingURL=index.js.map","import config from './config.json'\nimport { detectCoordinateType } from '../../lib/viewport'\nimport { LatLon } from 'geodesy/osgridref.js'\n\nconst place = ({ NAME1, POPULATED_PLACE, COUNTY_UNITARY, REGION }) => {\n  return `${NAME1}${POPULATED_PLACE ? ', ' + POPULATED_PLACE : ''}${COUNTY_UNITARY ? ', ' + COUNTY_UNITARY : ''}, ${REGION}`\n}\n\nclass ReverseGeocode {\n  constructor (transformGeocodeRequest = (u) => u) {\n    this.transformGeocodeRequest = transformGeocodeRequest\n  }\n\n  async getNearest (zoom, coord) {\n    // Need to convert WSG84 to BNG\n    if (detectCoordinateType(coord) === 'WSG84') {\n      try {\n        const bng = (new LatLon(coord[1], coord[0])).toOsGrid()\n        coord = [bng.easting, bng.northing]\n      } catch (err) {\n        console.log(err)\n        return null\n      }\n    }\n\n    let url = config.OS_NEAREST_URL\n    url = url.replace('{easting}', Math.round(coord[0])).replace('{northing}', Math.round(coord[1]))\n    const response = await fetch(await this.transformGeocodeRequest(url))\n    const json = await response.json()\n    return json.results ? place(json.results[0].GAZETTEER_ENTRY) : null\n  }\n}\n\nexport default ReverseGeocode\n","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Geodesy representation conversion functions                        (c) Chris Veness 2002-2020  */\n/*                                                                                   MIT Licence  */\n/* www.movable-type.co.uk/scripts/latlong.html                                                    */\n/* www.movable-type.co.uk/scripts/js/geodesy/geodesy-library.html#dms                             */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n/* eslint no-irregular-whitespace: [2, { skipComments: true }] */\n\n\n/**\n * Latitude/longitude points may be represented as decimal degrees, or subdivided into sexagesimal\n * minutes and seconds. This module provides methods for parsing and representing degrees / minutes\n * / seconds.\n *\n * @module dms\n */\n\n\n/* Degree-minutes-seconds (& cardinal directions) separator character */\nlet dmsSeparator = '\\u202f'; // U+202F = 'narrow no-break space'\n\n\n/**\n * Functions for parsing and representing degrees / minutes / seconds.\n */\nclass Dms {\n\n    // note Unicode Degree = U+00B0. Prime = U+2032, Double prime = U+2033\n\n    /**\n     * Separator character to be used to separate degrees, minutes, seconds, and cardinal directions.\n     *\n     * Default separator is U+202F ‘narrow no-break space’.\n     *\n     * To change this (e.g. to empty string or full space), set Dms.separator prior to invoking\n     * formatting.\n     *\n     * @example\n     *   import LatLon, { Dms } from '/js/geodesy/latlon-spherical.js';\n     *   const p = new LatLon(51.2, 0.33).toString('dms');  // 51° 12′ 00″ N, 000° 19′ 48″ E\n     *   Dms.separator = '';                                // no separator\n     *   const pʹ = new LatLon(51.2, 0.33).toString('dms'); // 51°12′00″N, 000°19′48″E\n     */\n    static get separator()     { return dmsSeparator; }\n    static set separator(char) { dmsSeparator = char; }\n\n\n    /**\n     * Parses string representing degrees/minutes/seconds into numeric degrees.\n     *\n     * This is very flexible on formats, allowing signed decimal degrees, or deg-min-sec optionally\n     * suffixed by compass direction (NSEW); a variety of separators are accepted. Examples -3.62,\n     * '3 37 12W', '3°37′12″W'.\n     *\n     * Thousands/decimal separators must be comma/dot; use Dms.fromLocale to convert locale-specific\n     * thousands/decimal separators.\n     *\n     * @param   {string|number} dms - Degrees or deg/min/sec in variety of formats.\n     * @returns {number}        Degrees as decimal number.\n     *\n     * @example\n     *   const lat = Dms.parse('51° 28′ 40.37″ N');\n     *   const lon = Dms.parse('000° 00′ 05.29″ W');\n     *   const p1 = new LatLon(lat, lon); // 51.4779°N, 000.0015°W\n     */\n    static parse(dms) {\n        // check for signed decimal degrees without NSEW, if so return it directly\n        if (!isNaN(parseFloat(dms)) && isFinite(dms)) return Number(dms);\n\n        // strip off any sign or compass dir'n & split out separate d/m/s\n        const dmsParts = String(dms).trim().replace(/^-/, '').replace(/[NSEW]$/i, '').split(/[^0-9.,]+/);\n        if (dmsParts[dmsParts.length-1]=='') dmsParts.splice(dmsParts.length-1);  // from trailing symbol\n\n        if (dmsParts == '') return NaN;\n\n        // and convert to decimal degrees...\n        let deg = null;\n        switch (dmsParts.length) {\n            case 3:  // interpret 3-part result as d/m/s\n                deg = dmsParts[0]/1 + dmsParts[1]/60 + dmsParts[2]/3600;\n                break;\n            case 2:  // interpret 2-part result as d/m\n                deg = dmsParts[0]/1 + dmsParts[1]/60;\n                break;\n            case 1:  // just d (possibly decimal) or non-separated dddmmss\n                deg = dmsParts[0];\n                // check for fixed-width unseparated format eg 0033709W\n                //if (/[NS]/i.test(dmsParts)) deg = '0' + deg;  // - normalise N/S to 3-digit degrees\n                //if (/[0-9]{7}/.test(deg)) deg = deg.slice(0,3)/1 + deg.slice(3,5)/60 + deg.slice(5)/3600;\n                break;\n            default:\n                return NaN;\n        }\n        if (/^-|[WS]$/i.test(dms.trim())) deg = -deg; // take '-', west and south as -ve\n\n        return Number(deg);\n    }\n\n\n    /**\n     * Converts decimal degrees to deg/min/sec format\n     *  - degree, prime, double-prime symbols are added, but sign is discarded, though no compass\n     *    direction is added.\n     *  - degrees are zero-padded to 3 digits; for degrees latitude, use .slice(1) to remove leading\n     *    zero.\n     *\n     * @private\n     * @param   {number} deg - Degrees to be formatted as specified.\n     * @param   {string} [format=d] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.\n     * @param   {number} [dp=4|2|0] - Number of decimal places to use – default 4 for d, 2 for dm, 0 for dms.\n     * @returns {string} Degrees formatted as deg/min/secs according to specified format.\n     */\n    static toDms(deg, format='d', dp=undefined) {\n        if (isNaN(deg)) return null;  // give up here if we can't make a number from deg\n        if (typeof deg == 'string' && deg.trim() == '') return null;\n        if (typeof deg == 'boolean') return null;\n        if (deg == Infinity) return null;\n        if (deg == null) return null;\n\n        // default values\n        if (dp === undefined) {\n            switch (format) {\n                case 'd':   case 'deg':         dp = 4; break;\n                case 'dm':  case 'deg+min':     dp = 2; break;\n                case 'dms': case 'deg+min+sec': dp = 0; break;\n                default:          format = 'd'; dp = 4; break; // be forgiving on invalid format\n            }\n        }\n\n        deg = Math.abs(deg);  // (unsigned result ready for appending compass dir'n)\n\n        let dms = null, d = null, m = null, s = null;\n        switch (format) {\n            default: // invalid format spec!\n            case 'd': case 'deg':\n                d = deg.toFixed(dp);                       // round/right-pad degrees\n                if (d<100) d = '0' + d;                    // left-pad with leading zeros (note may include decimals)\n                if (d<10) d = '0' + d;\n                dms = d + '°';\n                break;\n            case 'dm': case 'deg+min':\n                d = Math.floor(deg);                       // get component deg\n                m = ((deg*60) % 60).toFixed(dp);           // get component min & round/right-pad\n                if (m == 60) { m = (0).toFixed(dp); d++; } // check for rounding up\n                d = ('000'+d).slice(-3);                   // left-pad with leading zeros\n                if (m<10) m = '0' + m;                     // left-pad with leading zeros (note may include decimals)\n                dms = d + '°'+Dms.separator + m + '′';\n                break;\n            case 'dms': case 'deg+min+sec':\n                d = Math.floor(deg);                       // get component deg\n                m = Math.floor((deg*3600)/60) % 60;        // get component min\n                s = (deg*3600 % 60).toFixed(dp);           // get component sec & round/right-pad\n                if (s == 60) { s = (0).toFixed(dp); m++; } // check for rounding up\n                if (m == 60) { m = 0; d++; }               // check for rounding up\n                d = ('000'+d).slice(-3);                   // left-pad with leading zeros\n                m = ('00'+m).slice(-2);                    // left-pad with leading zeros\n                if (s<10) s = '0' + s;                     // left-pad with leading zeros (note may include decimals)\n                dms = d + '°'+Dms.separator + m + '′'+Dms.separator + s + '″';\n                break;\n        }\n\n        return dms;\n    }\n\n\n    /**\n     * Converts numeric degrees to deg/min/sec latitude (2-digit degrees, suffixed with N/S).\n     *\n     * @param   {number} deg - Degrees to be formatted as specified.\n     * @param   {string} [format=d] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.\n     * @param   {number} [dp=4|2|0] - Number of decimal places to use – default 4 for d, 2 for dm, 0 for dms.\n     * @returns {string} Degrees formatted as deg/min/secs according to specified format.\n     *\n     * @example\n     *   const lat = Dms.toLat(-3.62, 'dms'); // 3°37′12″S\n     */\n    static toLat(deg, format, dp) {\n        const lat = Dms.toDms(Dms.wrap90(deg), format, dp);\n        return lat===null ? '–' : lat.slice(1) + Dms.separator + (deg<0 ? 'S' : 'N');  // knock off initial '0' for lat!\n    }\n\n\n    /**\n     * Convert numeric degrees to deg/min/sec longitude (3-digit degrees, suffixed with E/W).\n     *\n     * @param   {number} deg - Degrees to be formatted as specified.\n     * @param   {string} [format=d] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.\n     * @param   {number} [dp=4|2|0] - Number of decimal places to use – default 4 for d, 2 for dm, 0 for dms.\n     * @returns {string} Degrees formatted as deg/min/secs according to specified format.\n     *\n     * @example\n     *   const lon = Dms.toLon(-3.62, 'dms'); // 3°37′12″W\n     */\n    static toLon(deg, format, dp) {\n        const lon = Dms.toDms(Dms.wrap180(deg), format, dp);\n        return lon===null ? '–' : lon + Dms.separator + (deg<0 ? 'W' : 'E');\n    }\n\n\n    /**\n     * Converts numeric degrees to deg/min/sec as a bearing (0°..360°).\n     *\n     * @param   {number} deg - Degrees to be formatted as specified.\n     * @param   {string} [format=d] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.\n     * @param   {number} [dp=4|2|0] - Number of decimal places to use – default 4 for d, 2 for dm, 0 for dms.\n     * @returns {string} Degrees formatted as deg/min/secs according to specified format.\n     *\n     * @example\n     *   const lon = Dms.toBrng(-3.62, 'dms'); // 356°22′48″\n     */\n    static toBrng(deg, format, dp) {\n        const brng =  Dms.toDms(Dms.wrap360(deg), format, dp);\n        return brng===null ? '–' : brng.replace('360', '0');  // just in case rounding took us up to 360°!\n    }\n\n\n    /**\n     * Converts DMS string from locale thousands/decimal separators to JavaScript comma/dot separators\n     * for subsequent parsing.\n     *\n     * Both thousands and decimal separators must be followed by a numeric character, to facilitate\n     * parsing of single lat/long string (in which whitespace must be left after the comma separator).\n     *\n     * @param   {string} str - Degrees/minutes/seconds formatted with locale separators.\n     * @returns {string} Degrees/minutes/seconds formatted with standard Javascript separators.\n     *\n     * @example\n     *   const lat = Dms.fromLocale('51°28′40,12″N');                          // '51°28′40.12″N' in France\n     *   const p = new LatLon(Dms.fromLocale('51°28′40,37″N, 000°00′05,29″W'); // '51.4779°N, 000.0015°W' in France\n     */\n    static fromLocale(str) {\n        const locale = (123456.789).toLocaleString();\n        const separator = { thousands: locale.slice(3, 4), decimal: locale.slice(7, 8) };\n        return str.replace(separator.thousands, '⁜').replace(separator.decimal, '.').replace('⁜', ',');\n    }\n\n\n    /**\n     * Converts DMS string from JavaScript comma/dot thousands/decimal separators to locale separators.\n     *\n     * Can also be used to format standard numbers such as distances.\n     *\n     * @param   {string} str - Degrees/minutes/seconds formatted with standard Javascript separators.\n     * @returns {string} Degrees/minutes/seconds formatted with locale separators.\n     *\n     * @example\n     *   const Dms.toLocale('123,456.789');                   // '123.456,789' in France\n     *   const Dms.toLocale('51°28′40.12″N, 000°00′05.31″W'); // '51°28′40,12″N, 000°00′05,31″W' in France\n     */\n    static toLocale(str) {\n        const locale = (123456.789).toLocaleString();\n        const separator = { thousands: locale.slice(3, 4), decimal: locale.slice(7, 8) };\n        return str.replace(/,([0-9])/, '⁜$1').replace('.', separator.decimal).replace('⁜', separator.thousands);\n    }\n\n\n    /**\n     * Returns compass point (to given precision) for supplied bearing.\n     *\n     * @param   {number} bearing - Bearing in degrees from north.\n     * @param   {number} [precision=3] - Precision (1:cardinal / 2:intercardinal / 3:secondary-intercardinal).\n     * @returns {string} Compass point for supplied bearing.\n     *\n     * @example\n     *   const point = Dms.compassPoint(24);    // point = 'NNE'\n     *   const point = Dms.compassPoint(24, 1); // point = 'N'\n     */\n    static compassPoint(bearing, precision=3) {\n        if (![ 1, 2, 3 ].includes(Number(precision))) throw new RangeError(`invalid precision ‘${precision}’`);\n        // note precision could be extended to 4 for quarter-winds (eg NbNW), but I think they are little used\n\n        bearing = Dms.wrap360(bearing); // normalise to range 0..360°\n\n        const cardinals = [\n            'N', 'NNE', 'NE', 'ENE',\n            'E', 'ESE', 'SE', 'SSE',\n            'S', 'SSW', 'SW', 'WSW',\n            'W', 'WNW', 'NW', 'NNW' ];\n        const n = 4 * 2**(precision-1); // no of compass points at req’d precision (1=>4, 2=>8, 3=>16)\n        const cardinal = cardinals[Math.round(bearing*n/360)%n * 16/n];\n\n        return cardinal;\n    }\n\n\n    /**\n     * Constrain degrees to range -90..+90 (for latitude); e.g. -91 => -89, 91 => 89.\n     *\n     * @private\n     * @param {number} degrees\n     * @returns degrees within range -90..+90.\n     */\n    static wrap90(degrees) {\n        if (-90<=degrees && degrees<=90) return degrees; // avoid rounding due to arithmetic ops if within range\n\n        // latitude wrapping requires a triangle wave function; a general triangle wave is\n        //     f(x) = 4a/p ⋅ | (x-p/4)%p - p/2 | - a\n        // where a = amplitude, p = period, % = modulo; however, JavaScript '%' is a remainder operator\n        // not a modulo operator - for modulo, replace 'x%n' with '((x%n)+n)%n'\n        const x = degrees, a = 90, p = 360;\n        return 4*a/p * Math.abs((((x-p/4)%p)+p)%p - p/2) - a;\n    }\n\n    /**\n     * Constrain degrees to range -180..+180 (for longitude); e.g. -181 => 179, 181 => -179.\n     *\n     * @private\n     * @param {number} degrees\n     * @returns degrees within range -180..+180.\n     */\n    static wrap180(degrees) {\n        if (-180<=degrees && degrees<=180) return degrees; // avoid rounding due to arithmetic ops if within range\n\n        // longitude wrapping requires a sawtooth wave function; a general sawtooth wave is\n        //     f(x) = (2ax/p - p/2) % p - a\n        // where a = amplitude, p = period, % = modulo; however, JavaScript '%' is a remainder operator\n        // not a modulo operator - for modulo, replace 'x%n' with '((x%n)+n)%n'\n        const x = degrees, a = 180, p = 360;\n        return (((2*a*x/p - p/2)%p)+p)%p - a;\n    }\n\n    /**\n     * Constrain degrees to range 0..360 (for bearings); e.g. -1 => 359, 361 => 1.\n     *\n     * @private\n     * @param {number} degrees\n     * @returns degrees within range 0..360.\n     */\n    static wrap360(degrees) {\n        if (0<=degrees && degrees<360) return degrees; // avoid rounding due to arithmetic ops if within range\n\n        // bearing wrapping requires a sawtooth wave function with a vertical offset equal to the\n        // amplitude and a corresponding phase shift; this changes the general sawtooth wave function from\n        //     f(x) = (2ax/p - p/2) % p - a\n        // to\n        //     f(x) = (2ax/p) % p\n        // where a = amplitude, p = period, % = modulo; however, JavaScript '%' is a remainder operator\n        // not a modulo operator - for modulo, replace 'x%n' with '((x%n)+n)%n'\n        const x = degrees, a = 180, p = 360;\n        return (((2*a*x/p)%p)+p)%p;\n    }\n\n}\n\n\n// Extend Number object with methods to convert between degrees & radians\nNumber.prototype.toRadians = function() { return this * Math.PI / 180; };\nNumber.prototype.toDegrees = function() { return this * 180 / Math.PI; };\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport default Dms;\n","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Vector handling functions                                          (c) Chris Veness 2011-2019  */\n/*                                                                                   MIT Licence  */\n/* www.movable-type.co.uk/scripts/geodesy-library.html#vector3d                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n\n/**\n * Library of 3-d vector manipulation routines.\n *\n * @module vector3d\n */\n\n\n/* Vector3d - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\n/**\n * Functions for manipulating generic 3-d vectors.\n *\n * Functions return vectors as return results, so that operations can be chained.\n *\n * @example\n *   const v = v1.cross(v2).dot(v3) // ≡ v1×v2⋅v3\n */\nclass Vector3d {\n\n    /**\n     * Creates a 3-d vector.\n     *\n     * @param {number} x - X component of vector.\n     * @param {number} y - Y component of vector.\n     * @param {number} z - Z component of vector.\n     *\n     * @example\n     *   import Vector3d from '/js/geodesy/vector3d.js';\n     *   const v = new Vector3d(0.267, 0.535, 0.802);\n     */\n    constructor(x, y, z) {\n        if (isNaN(x) || isNaN(y) || isNaN(z)) throw new TypeError(`invalid vector [${x},${y},${z}]`);\n\n        this.x = Number(x);\n        this.y = Number(y);\n        this.z = Number(z);\n    }\n\n\n    /**\n     * Length (magnitude or norm) of ‘this’ vector.\n     *\n     * @returns {number} Magnitude of this vector.\n     */\n    get length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    /**\n     * Adds supplied vector to ‘this’ vector.\n     *\n     * @param   {Vector3d} v - Vector to be added to this vector.\n     * @returns {Vector3d} Vector representing sum of this and v.\n     */\n    plus(v) {\n        if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n\n        return new Vector3d(this.x + v.x, this.y + v.y, this.z + v.z);\n    }\n\n\n    /**\n     * Subtracts supplied vector from ‘this’ vector.\n     *\n     * @param   {Vector3d} v - Vector to be subtracted from this vector.\n     * @returns {Vector3d} Vector representing difference between this and v.\n     */\n    minus(v) {\n        if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n\n        return new Vector3d(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n\n\n    /**\n     * Multiplies ‘this’ vector by a scalar value.\n     *\n     * @param   {number}   x - Factor to multiply this vector by.\n     * @returns {Vector3d} Vector scaled by x.\n     */\n    times(x) {\n        if (isNaN(x)) throw new TypeError(`invalid scalar value ‘${x}’`);\n\n        return new Vector3d(this.x * x, this.y * x, this.z * x);\n    }\n\n\n    /**\n     * Divides ‘this’ vector by a scalar value.\n     *\n     * @param   {number}   x - Factor to divide this vector by.\n     * @returns {Vector3d} Vector divided by x.\n     */\n    dividedBy(x) {\n        if (isNaN(x)) throw new TypeError(`invalid scalar value ‘${x}’`);\n\n        return new Vector3d(this.x / x, this.y / x, this.z / x);\n    }\n\n\n    /**\n     * Multiplies ‘this’ vector by the supplied vector using dot (scalar) product.\n     *\n     * @param   {Vector3d} v - Vector to be dotted with this vector.\n     * @returns {number}   Dot product of ‘this’ and v.\n     */\n    dot(v) {\n        if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    }\n\n\n    /**\n     * Multiplies ‘this’ vector by the supplied vector using cross (vector) product.\n     *\n     * @param   {Vector3d} v - Vector to be crossed with this vector.\n     * @returns {Vector3d} Cross product of ‘this’ and v.\n     */\n    cross(v) {\n        if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n\n        const x = this.y * v.z - this.z * v.y;\n        const y = this.z * v.x - this.x * v.z;\n        const z = this.x * v.y - this.y * v.x;\n\n        return new Vector3d(x, y, z);\n    }\n\n\n    /**\n     * Negates a vector to point in the opposite direction.\n     *\n     * @returns {Vector3d} Negated vector.\n     */\n    negate() {\n        return new Vector3d(-this.x, -this.y, -this.z);\n    }\n\n\n    /**\n     * Normalizes a vector to its unit vector\n     * – if the vector is already unit or is zero magnitude, this is a no-op.\n     *\n     * @returns {Vector3d} Normalised version of this vector.\n     */\n    unit() {\n        const norm = this.length;\n        if (norm == 1) return this;\n        if (norm == 0) return this;\n\n        const x = this.x / norm;\n        const y = this.y / norm;\n        const z = this.z / norm;\n\n        return new Vector3d(x, y, z);\n    }\n\n\n    /**\n     * Calculates the angle between ‘this’ vector and supplied vector atan2(|p₁×p₂|, p₁·p₂) (or if\n     * (extra-planar) ‘n’ supplied then atan2(n·p₁×p₂, p₁·p₂).\n     *\n     * @param   {Vector3d} v - Vector whose angle is to be determined from ‘this’ vector.\n     * @param   {Vector3d} [n] - Plane normal: if supplied, angle is signed +ve if this->v is\n     *                     clockwise looking along n, -ve in opposite direction.\n     * @returns {number}   Angle (in radians) between this vector and supplied vector (in range 0..π\n     *                     if n not supplied, range -π..+π if n supplied).\n     */\n    angleTo(v, n=undefined) {\n        if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n        if (!(n instanceof Vector3d || n == undefined)) throw new TypeError('n is not Vector3d object');\n\n        // q.v. stackoverflow.com/questions/14066933#answer-16544330, but n·p₁×p₂ is numerically\n        // ill-conditioned, so just calculate sign to apply to |p₁×p₂|\n\n        // if n·p₁×p₂ is -ve, negate |p₁×p₂|\n        const sign = n==undefined || this.cross(v).dot(n)>=0 ? 1 : -1;\n\n        const sinθ = this.cross(v).length * sign;\n        const cosθ = this.dot(v);\n\n        return Math.atan2(sinθ, cosθ);\n    }\n\n\n    /**\n     * Rotates ‘this’ point around an axis by a specified angle.\n     *\n     * @param   {Vector3d} axis - The axis being rotated around.\n     * @param   {number}   angle - The angle of rotation (in degrees).\n     * @returns {Vector3d} The rotated point.\n     */\n    rotateAround(axis, angle) {\n        if (!(axis instanceof Vector3d)) throw new TypeError('axis is not Vector3d object');\n\n        const θ = angle.toRadians();\n\n        // en.wikipedia.org/wiki/Rotation_matrix#Rotation_matrix_from_axis_and_angle\n        // en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Quaternion-derived_rotation_matrix\n        const p = this.unit();\n        const a = axis.unit();\n\n        const s = Math.sin(θ);\n        const c = Math.cos(θ);\n        const t = 1-c;\n        const x = a.x, y = a.y, z = a.z;\n\n        const r = [ // rotation matrix for rotation about supplied axis\n            [ t*x*x + c,   t*x*y - s*z, t*x*z + s*y ],\n            [ t*x*y + s*z, t*y*y + c,   t*y*z - s*x ],\n            [ t*x*z - s*y, t*y*z + s*x, t*z*z + c   ],\n        ];\n\n        // multiply r × p\n        const rp = [\n            r[0][0]*p.x + r[0][1]*p.y + r[0][2]*p.z,\n            r[1][0]*p.x + r[1][1]*p.y + r[1][2]*p.z,\n            r[2][0]*p.x + r[2][1]*p.y + r[2][2]*p.z,\n        ];\n        const p2 = new Vector3d(rp[0], rp[1], rp[2]);\n\n        return p2;\n        // qv en.wikipedia.org/wiki/Rodrigues'_rotation_formula...\n    }\n\n\n    /**\n     * String representation of vector.\n     *\n     * @param   {number} [dp=3] - Number of decimal places to be used.\n     * @returns {string} Vector represented as [x,y,z].\n     */\n    toString(dp=3) {\n        return `[${this.x.toFixed(dp)},${this.y.toFixed(dp)},${this.z.toFixed(dp)}]`;\n    }\n\n}\n\n\n// Extend Number object with methods to convert between degrees & radians\nNumber.prototype.toRadians = function() { return this * Math.PI / 180; };\nNumber.prototype.toDegrees = function() { return this * 180 / Math.PI; };\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport default Vector3d;\n","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Geodesy tools for an ellipsoidal earth model                       (c) Chris Veness 2005-2022  */\n/*                                                                                   MIT Licence  */\n/* Core class for latlon-ellipsoidal-datum & latlon-ellipsoidal-referenceframe.                   */\n/*                                                                                                */\n/* www.movable-type.co.uk/scripts/latlong-convert-coords.html                                     */\n/* www.movable-type.co.uk/scripts/geodesy-library.html#latlon-ellipsoidal                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nimport Dms      from './dms.js';\nimport Vector3d from './vector3d.js';\n\n\n/**\n * A latitude/longitude point defines a geographic location on or above/below the earth’s surface,\n * measured in degrees from the equator & the International Reference Meridian and in metres above\n * the ellipsoid, and based on a given datum.\n *\n * As so much modern geodesy is based on WGS-84 (as used by GPS), this module includes WGS-84\n * ellipsoid parameters, and it has methods for converting geodetic (latitude/longitude) points to/from\n * geocentric cartesian points; the latlon-ellipsoidal-datum and latlon-ellipsoidal-referenceframe\n * modules provide transformation parameters for converting between historical datums and between\n * modern reference frames.\n *\n * This module is used for both trigonometric geodesy (eg latlon-ellipsoidal-vincenty) and n-vector\n * geodesy (eg latlon-nvector-ellipsoidal), and also for UTM/MGRS mapping.\n *\n * @module latlon-ellipsoidal\n */\n\n\n/*\n * Ellipsoid parameters; exposed through static getter below.\n *\n * The only ellipsoid defined is WGS84, for use in utm/mgrs, vincenty, nvector.\n */\nconst ellipsoids = {\n    WGS84: { a: 6378137, b: 6356752.314245, f: 1/298.257223563 },\n};\n\n\n/*\n * Datums; exposed through static getter below.\n *\n * The only datum defined is WGS84, for use in utm/mgrs, vincenty, nvector.\n */\nconst datums = {\n    WGS84: { ellipsoid: ellipsoids.WGS84 },\n};\n\n\n// freeze static properties\nObject.freeze(ellipsoids.WGS84);\nObject.freeze(datums.WGS84);\n\n\n/* LatLonEllipsoidal - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n\n/**\n * Latitude/longitude points on an ellipsoidal model earth, with ellipsoid parameters and methods\n * for converting points to/from cartesian (ECEF) coordinates.\n *\n * This is the core class, which will usually be used via LatLonEllipsoidal_Datum or\n * LatLonEllipsoidal_ReferenceFrame.\n */\nclass LatLonEllipsoidal {\n\n    /**\n     * Creates a geodetic latitude/longitude point on a (WGS84) ellipsoidal model earth.\n     *\n     * @param  {number} lat - Latitude (in degrees).\n     * @param  {number} lon - Longitude (in degrees).\n     * @param  {number} [height=0] - Height above ellipsoid in metres.\n     * @throws {TypeError} Invalid lat/lon/height.\n     *\n     * @example\n     *   import LatLon from '/js/geodesy/latlon-ellipsoidal.js';\n     *   const p = new LatLon(51.47788, -0.00147, 17);\n     */\n    constructor(lat, lon, height=0) {\n        if (isNaN(lat) || lat == null) throw new TypeError(`invalid lat ‘${lat}’`);\n        if (isNaN(lon) || lon == null) throw new TypeError(`invalid lon ‘${lon}’`);\n        if (isNaN(height) || height == null) throw new TypeError(`invalid height ‘${height}’`);\n\n        this._lat = Dms.wrap90(Number(lat));\n        this._lon = Dms.wrap180(Number(lon));\n        this._height = Number(height);\n    }\n\n\n    /**\n     * Latitude in degrees north from equator (including aliases lat, latitude): can be set as\n     * numeric or hexagesimal (deg-min-sec); returned as numeric.\n     */\n    get lat()       { return this._lat; }\n    get latitude()  { return this._lat; }\n    set lat(lat) {\n        this._lat = isNaN(lat) ? Dms.wrap90(Dms.parse(lat)) : Dms.wrap90(Number(lat));\n        if (isNaN(this._lat)) throw new TypeError(`invalid lat ‘${lat}’`);\n    }\n    set latitude(lat) {\n        this._lat = isNaN(lat) ? Dms.wrap90(Dms.parse(lat)) : Dms.wrap90(Number(lat));\n        if (isNaN(this._lat)) throw new TypeError(`invalid latitude ‘${lat}’`);\n    }\n\n    /**\n     * Longitude in degrees east from international reference meridian (including aliases lon, lng,\n     * longitude): can be set as numeric or hexagesimal (deg-min-sec); returned as numeric.\n     */\n    get lon()       { return this._lon; }\n    get lng()       { return this._lon; }\n    get longitude() { return this._lon; }\n    set lon(lon) {\n        this._lon = isNaN(lon) ? Dms.wrap180(Dms.parse(lon)) : Dms.wrap180(Number(lon));\n        if (isNaN(this._lon)) throw new TypeError(`invalid lon ‘${lon}’`);\n    }\n    set lng(lon) {\n        this._lon = isNaN(lon) ? Dms.wrap180(Dms.parse(lon)) : Dms.wrap180(Number(lon));\n        if (isNaN(this._lon)) throw new TypeError(`invalid lng ‘${lon}’`);\n    }\n    set longitude(lon) {\n        this._lon = isNaN(lon) ? Dms.wrap180(Dms.parse(lon)) : Dms.wrap180(Number(lon));\n        if (isNaN(this._lon)) throw new TypeError(`invalid longitude ‘${lon}’`);\n    }\n\n    /**\n     * Height in metres above ellipsoid.\n     */\n    get height()       { return this._height; }\n    set height(height) { this._height = Number(height); if (isNaN(this._height)) throw new TypeError(`invalid height ‘${height}’`); }\n\n\n    /**\n     * Datum.\n     *\n     * Note this is replicated within LatLonEllipsoidal in order that a LatLonEllipsoidal object can\n     * be monkey-patched to look like a LatLonEllipsoidal_Datum, for Vincenty calculations on\n     * different ellipsoids.\n     *\n     * @private\n     */\n    get datum()      { return this._datum; }\n    set datum(datum) { this._datum = datum; }\n\n\n    /**\n     * Ellipsoids with their parameters; this module only defines WGS84 parameters a = 6378137, b =\n     * 6356752.314245, f = 1/298.257223563.\n     *\n     * @example\n     *   const a = LatLon.ellipsoids.WGS84.a; // 6378137\n     */\n    static get ellipsoids() {\n        return ellipsoids;\n    }\n\n    /**\n     * Datums; this module only defines WGS84 datum, hence no datum transformations.\n     *\n     * @example\n     *   const a = LatLon.datums.WGS84.ellipsoid.a; // 6377563.396\n     */\n    static get datums() {\n        return datums;\n    }\n\n\n    /**\n     * Parses a latitude/longitude point from a variety of formats.\n     *\n     * Latitude & longitude (in degrees) can be supplied as two separate parameters, as a single\n     * comma-separated lat/lon string, or as a single object with { lat, lon } or GeoJSON properties.\n     *\n     * The latitude/longitude values may be numeric or strings; they may be signed decimal or\n     * deg-min-sec (hexagesimal) suffixed by compass direction (NSEW); a variety of separators are\n     * accepted. Examples -3.62, '3 37 12W', '3°37′12″W'.\n     *\n     * Thousands/decimal separators must be comma/dot; use Dms.fromLocale to convert locale-specific\n     * thousands/decimal separators.\n     *\n     * @param   {number|string|Object} lat|latlon - Latitude (in degrees), or comma-separated lat/lon, or lat/lon object.\n     * @param   {number}               [lon]      - Longitude (in degrees).\n     * @param   {number}               [height=0] - Height above ellipsoid in metres.\n     * @returns {LatLon} Latitude/longitude point on WGS84 ellipsoidal model earth.\n     * @throws  {TypeError} Invalid coordinate.\n     *\n     * @example\n     *   const p1 = LatLon.parse(51.47788, -0.00147);              // numeric pair\n     *   const p2 = LatLon.parse('51°28′40″N, 000°00′05″W', 17);   // dms string + height\n     *   const p3 = LatLon.parse({ lat: 52.205, lon: 0.119 }, 17); // { lat, lon } object numeric + height\n     */\n    static parse(...args) {\n        if (args.length == 0) throw new TypeError('invalid (empty) point');\n\n        let lat=undefined, lon=undefined, height=undefined;\n\n        // single { lat, lon } object\n        if (typeof args[0]=='object' && (args.length==1 || !isNaN(parseFloat(args[1])))) {\n            const ll = args[0];\n            if (ll.type == 'Point' && Array.isArray(ll.coordinates)) { // GeoJSON\n                [ lon, lat, height ] = ll.coordinates;\n                height = height || 0;\n            } else { // regular { lat, lon } object\n                if (ll.latitude  != undefined) lat = ll.latitude;\n                if (ll.lat       != undefined) lat = ll.lat;\n                if (ll.longitude != undefined) lon = ll.longitude;\n                if (ll.lng       != undefined) lon = ll.lng;\n                if (ll.lon       != undefined) lon = ll.lon;\n                if (ll.height    != undefined) height = ll.height;\n                lat = Dms.wrap90(Dms.parse(lat));\n                lon = Dms.wrap180(Dms.parse(lon));\n            }\n            if (args[1] != undefined) height = args[1];\n            if (isNaN(lat) || isNaN(lon)) throw new TypeError(`invalid point ‘${JSON.stringify(args[0])}’`);\n        }\n\n        // single comma-separated lat/lon\n        if (typeof args[0] == 'string' && args[0].split(',').length == 2) {\n            [ lat, lon ] = args[0].split(',');\n            lat = Dms.wrap90(Dms.parse(lat));\n            lon = Dms.wrap180(Dms.parse(lon));\n            height = args[1] || 0;\n            if (isNaN(lat) || isNaN(lon)) throw new TypeError(`invalid point ‘${args[0]}’`);\n        }\n\n        // regular (lat, lon) arguments\n        if (lat==undefined && lon==undefined) {\n            [ lat, lon ] = args;\n            lat = Dms.wrap90(Dms.parse(lat));\n            lon = Dms.wrap180(Dms.parse(lon));\n            height = args[2] || 0;\n            if (isNaN(lat) || isNaN(lon)) throw new TypeError(`invalid point ‘${args.toString()}’`);\n        }\n\n        return new this(lat, lon, height); // 'new this' as may return subclassed types\n    }\n\n\n    /**\n     * Converts ‘this’ point from (geodetic) latitude/longitude coordinates to (geocentric)\n     * cartesian (x/y/z) coordinates.\n     *\n     * @returns {Cartesian} Cartesian point equivalent to lat/lon point, with x, y, z in metres from\n     *   earth centre.\n     */\n    toCartesian() {\n        // x = (ν+h)⋅cosφ⋅cosλ, y = (ν+h)⋅cosφ⋅sinλ, z = (ν⋅(1-e²)+h)⋅sinφ\n        // where ν = a/√(1−e²⋅sinφ⋅sinφ), e² = (a²-b²)/a² or (better conditioned) 2⋅f-f²\n        const ellipsoid = this.datum\n            ? this.datum.ellipsoid\n            : this.referenceFrame ? this.referenceFrame.ellipsoid : ellipsoids.WGS84;\n\n        const φ = this.lat.toRadians();\n        const λ = this.lon.toRadians();\n        const h = this.height;\n        const { a, f } = ellipsoid;\n\n        const sinφ = Math.sin(φ), cosφ = Math.cos(φ);\n        const sinλ = Math.sin(λ), cosλ = Math.cos(λ);\n\n        const eSq = 2*f - f*f;                      // 1st eccentricity squared ≡ (a²-b²)/a²\n        const ν = a / Math.sqrt(1 - eSq*sinφ*sinφ); // radius of curvature in prime vertical\n\n        const x = (ν+h) * cosφ * cosλ;\n        const y = (ν+h) * cosφ * sinλ;\n        const z = (ν*(1-eSq)+h) * sinφ;\n\n        return new Cartesian(x, y, z);\n    }\n\n\n    /**\n     * Checks if another point is equal to ‘this’ point.\n     *\n     * @param   {LatLon} point - Point to be compared against this point.\n     * @returns {bool} True if points have identical latitude, longitude, height, and datum/referenceFrame.\n     * @throws  {TypeError} Invalid point.\n     *\n     * @example\n     *   const p1 = new LatLon(52.205, 0.119);\n     *   const p2 = new LatLon(52.205, 0.119);\n     *   const equal = p1.equals(p2); // true\n     */\n    equals(point) {\n        if (!(point instanceof LatLonEllipsoidal)) throw new TypeError(`invalid point ‘${point}’`);\n\n        if (Math.abs(this.lat - point.lat) > Number.EPSILON) return false;\n        if (Math.abs(this.lon - point.lon) > Number.EPSILON) return false;\n        if (Math.abs(this.height - point.height) > Number.EPSILON) return false;\n        if (this.datum != point.datum) return false;\n        if (this.referenceFrame != point.referenceFrame) return false;\n        if (this.epoch != point.epoch) return false;\n\n        return true;\n    }\n\n\n    /**\n     * Returns a string representation of ‘this’ point, formatted as degrees, degrees+minutes, or\n     * degrees+minutes+seconds.\n     *\n     * @param   {string} [format=d] - Format point as 'd', 'dm', 'dms', or 'n' for signed numeric.\n     * @param   {number} [dp=4|2|0] - Number of decimal places to use: default 4 for d, 2 for dm, 0 for dms.\n     * @param   {number} [dpHeight=null] - Number of decimal places to use for height; default is no height display.\n     * @returns {string} Comma-separated formatted latitude/longitude.\n     * @throws  {RangeError} Invalid format.\n     *\n     * @example\n     *   const greenwich = new LatLon(51.47788, -0.00147, 46);\n     *   const d = greenwich.toString();                        // 51.4779°N, 000.0015°W\n     *   const dms = greenwich.toString('dms', 2);              // 51°28′40″N, 000°00′05″W\n     *   const [lat, lon] = greenwich.toString('n').split(','); // 51.4779, -0.0015\n     *   const dmsh = greenwich.toString('dms', 0, 0);          // 51°28′40″N, 000°00′06″W +46m\n     */\n    toString(format='d', dp=undefined, dpHeight=null) {\n        // note: explicitly set dp to undefined for passing through to toLat/toLon\n        if (![ 'd', 'dm', 'dms', 'n' ].includes(format)) throw new RangeError(`invalid format ‘${format}’`);\n\n        const height = (this.height>=0 ? ' +' : ' ') + this.height.toFixed(dpHeight) + 'm';\n        if (format == 'n') { // signed numeric degrees\n            if (dp == undefined) dp = 4;\n            const lat = this.lat.toFixed(dp);\n            const lon = this.lon.toFixed(dp);\n            return `${lat}, ${lon}${dpHeight==null ? '' : height}`;\n        }\n\n        const lat = Dms.toLat(this.lat, format, dp);\n        const lon = Dms.toLon(this.lon, format, dp);\n\n        return `${lat}, ${lon}${dpHeight==null ? '' : height}`;\n    }\n\n}\n\n\n/* Cartesian  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\n/**\n * ECEF (earth-centered earth-fixed) geocentric cartesian coordinates.\n *\n * @extends Vector3d\n */\nclass Cartesian extends Vector3d {\n\n    /**\n     * Creates cartesian coordinate representing ECEF (earth-centric earth-fixed) point.\n     *\n     * @param {number} x - X coordinate in metres (=> 0°N,0°E).\n     * @param {number} y - Y coordinate in metres (=> 0°N,90°E).\n     * @param {number} z - Z coordinate in metres (=> 90°N).\n     *\n     * @example\n     *   import { Cartesian } from '/js/geodesy/latlon-ellipsoidal.js';\n     *   const coord = new Cartesian(3980581.210, -111.159, 4966824.522);\n     */\n    constructor(x, y, z) {\n        super(x, y, z); // arguably redundant constructor, but specifies units & axes\n    }\n\n\n    /**\n     * Converts ‘this’ (geocentric) cartesian (x/y/z) coordinate to (geodetic) latitude/longitude\n     * point on specified ellipsoid.\n     *\n     * Uses Bowring’s (1985) formulation for μm precision in concise form; ‘The accuracy of geodetic\n     * latitude and height equations’, B R Bowring, Survey Review vol 28, 218, Oct 1985.\n     *\n     * @param   {LatLon.ellipsoids} [ellipsoid=WGS84] - Ellipsoid to use when converting point.\n     * @returns {LatLon} Latitude/longitude point defined by cartesian coordinates, on given ellipsoid.\n     * @throws  {TypeError} Invalid ellipsoid.\n     *\n     * @example\n     *   const c = new Cartesian(4027893.924, 307041.993, 4919474.294);\n     *   const p = c.toLatLon(); // 50.7978°N, 004.3592°E\n     */\n    toLatLon(ellipsoid=ellipsoids.WGS84) {\n        // note ellipsoid is available as a parameter for when toLatLon gets subclassed to\n        // Ellipsoidal_Datum / Ellipsoidal_Referenceframe.\n        if (!ellipsoid || !ellipsoid.a) throw new TypeError(`invalid ellipsoid ‘${ellipsoid}’`);\n\n        const { x, y, z } = this;\n        const { a, b, f } = ellipsoid;\n\n        const e2 = 2*f - f*f;           // 1st eccentricity squared ≡ (a²−b²)/a²\n        const ε2 = e2 / (1-e2);         // 2nd eccentricity squared ≡ (a²−b²)/b²\n        const p = Math.sqrt(x*x + y*y); // distance from minor axis\n        const R = Math.sqrt(p*p + z*z); // polar radius\n\n        // parametric latitude (Bowring eqn.17, replacing tanβ = z·a / p·b)\n        const tanβ = (b*z)/(a*p) * (1+ε2*b/R);\n        const sinβ = tanβ / Math.sqrt(1+tanβ*tanβ);\n        const cosβ = sinβ / tanβ;\n\n        // geodetic latitude (Bowring eqn.18: tanφ = z+ε²⋅b⋅sin³β / p−e²⋅cos³β)\n        const φ = isNaN(cosβ) ? 0 : Math.atan2(z + ε2*b*sinβ*sinβ*sinβ, p - e2*a*cosβ*cosβ*cosβ);\n\n        // longitude\n        const λ = Math.atan2(y, x);\n\n        // height above ellipsoid (Bowring eqn.7)\n        const sinφ = Math.sin(φ), cosφ = Math.cos(φ);\n        const ν = a / Math.sqrt(1-e2*sinφ*sinφ); // length of the normal terminated by the minor axis\n        const h = p*cosφ + z*sinφ - (a*a/ν);\n\n        const point = new LatLonEllipsoidal(φ.toDegrees(), λ.toDegrees(), h);\n\n        return point;\n    }\n\n\n    /**\n     * Returns a string representation of ‘this’ cartesian point.\n     *\n     * @param   {number} [dp=0] - Number of decimal places to use.\n     * @returns {string} Comma-separated latitude/longitude.\n     */\n    toString(dp=0) {\n        const x = this.x.toFixed(dp), y = this.y.toFixed(dp), z = this.z.toFixed(dp);\n        return `[${x},${y},${z}]`;\n    }\n\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport { LatLonEllipsoidal as default, Cartesian, Vector3d, Dms };\n","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Geodesy tools for conversions between (historical) datums          (c) Chris Veness 2005-2019  */\n/*                                                                                   MIT Licence  */\n/* www.movable-type.co.uk/scripts/latlong-convert-coords.html                                     */\n/* www.movable-type.co.uk/scripts/geodesy-library.html#latlon-ellipsoidal-datum                  */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nimport LatLonEllipsoidal, { Cartesian, Dms } from './latlon-ellipsoidal.js';\n\n\n/**\n * Historical geodetic datums: a latitude/longitude point defines a geographic location on or\n * above/below the  earth’s surface, measured in degrees from the equator & the International\n * Reference Meridian and metres above the ellipsoid, and based on a given datum. The datum is\n * based on a reference ellipsoid and tied to geodetic survey reference points.\n *\n * Modern geodesy is generally based on the WGS84 datum (as used for instance by GPS systems), but\n * previously various reference ellipsoids and datum references were used.\n *\n * This module extends the core latlon-ellipsoidal module to include ellipsoid parameters and datum\n * transformation parameters, and methods for converting between different (generally historical)\n * datums.\n *\n * It can be used for UK Ordnance Survey mapping (OS National Grid References are still based on the\n * otherwise historical OSGB36 datum), as well as for historical purposes.\n *\n * q.v. Ordnance Survey ‘A guide to coordinate systems in Great Britain’ Section 6,\n * www.ordnancesurvey.co.uk/docs/support/guide-coordinate-systems-great-britain.pdf, and also\n * www.ordnancesurvey.co.uk/blog/2014/12/2.\n *\n * @module latlon-ellipsoidal-datum\n */\n\n\n/*\n * Ellipsoid parameters; exposed through static getter below.\n */\nconst ellipsoids = {\n    WGS84:         { a: 6378137,     b: 6356752.314245, f: 1/298.257223563 },\n    Airy1830:      { a: 6377563.396, b: 6356256.909,    f: 1/299.3249646   },\n    AiryModified:  { a: 6377340.189, b: 6356034.448,    f: 1/299.3249646   },\n    Bessel1841:    { a: 6377397.155, b: 6356078.962818, f: 1/299.1528128   },\n    Clarke1866:    { a: 6378206.4,   b: 6356583.8,      f: 1/294.978698214 },\n    Clarke1880IGN: { a: 6378249.2,   b: 6356515.0,      f: 1/293.466021294 },\n    GRS80:         { a: 6378137,     b: 6356752.314140, f: 1/298.257222101 },\n    Intl1924:      { a: 6378388,     b: 6356911.946,    f: 1/297           }, // aka Hayford\n    WGS72:         { a: 6378135,     b: 6356750.5,      f: 1/298.26        },\n};\n\n\n/*\n * Datums; exposed through static getter below.\n */\nconst datums = {\n    // transforms: t in metres, s in ppm, r in arcseconds              tx       ty        tz       s        rx        ry        rz\n    ED50:       { ellipsoid: ellipsoids.Intl1924,      transform: [   89.5,    93.8,    123.1,    -1.2,     0.0,      0.0,      0.156    ] }, // epsg.io/1311\n    ETRS89:     { ellipsoid: ellipsoids.GRS80,         transform: [    0,       0,        0,       0,       0,        0,        0        ] }, // epsg.io/1149; @ 1-metre level\n    Irl1975:    { ellipsoid: ellipsoids.AiryModified,  transform: [ -482.530, 130.596, -564.557,  -8.150,   1.042,    0.214,    0.631    ] }, // epsg.io/1954\n    NAD27:      { ellipsoid: ellipsoids.Clarke1866,    transform: [    8,    -160,     -176,       0,       0,        0,        0        ] },\n    NAD83:      { ellipsoid: ellipsoids.GRS80,         transform: [    0.9956, -1.9103,  -0.5215, -0.00062, 0.025915, 0.009426, 0.011599 ] },\n    NTF:        { ellipsoid: ellipsoids.Clarke1880IGN, transform: [  168,      60,     -320,       0,       0,        0,        0        ] },\n    OSGB36:     { ellipsoid: ellipsoids.Airy1830,      transform: [ -446.448, 125.157, -542.060,  20.4894, -0.1502,  -0.2470,  -0.8421   ] }, // epsg.io/1314\n    Potsdam:    { ellipsoid: ellipsoids.Bessel1841,    transform: [ -582,    -105,     -414,      -8.3,     1.04,     0.35,    -3.08     ] },\n    TokyoJapan: { ellipsoid: ellipsoids.Bessel1841,    transform: [  148,    -507,     -685,       0,       0,        0,        0        ] },\n    WGS72:      { ellipsoid: ellipsoids.WGS72,         transform: [    0,       0,       -4.5,    -0.22,    0,        0,        0.554    ] },\n    WGS84:      { ellipsoid: ellipsoids.WGS84,         transform: [    0.0,     0.0,      0.0,     0.0,     0.0,      0.0,      0.0      ] },\n};\n/* sources:\n * - ED50:       www.gov.uk/guidance/oil-and-gas-petroleum-operations-notices#pon-4\n * - Irl1975:    www.osi.ie/wp-content/uploads/2015/05/transformations_booklet.pdf\n * - NAD27:      en.wikipedia.org/wiki/Helmert_transformation\n * - NAD83:      www.uvm.edu/giv/resources/WGS84_NAD83.pdf [strictly, WGS84(G1150) -> NAD83(CORS96) @ epoch 1997.0]\n *               (note NAD83(1986) ≡ WGS84(Original); confluence.qps.nl/pages/viewpage.action?pageId=29855173)\n * - NTF:        Nouvelle Triangulation Francaise geodesie.ign.fr/contenu/fichiers/Changement_systeme_geodesique.pdf\n * - OSGB36:     www.ordnancesurvey.co.uk/docs/support/guide-coordinate-systems-great-britain.pdf\n * - Potsdam:    kartoweb.itc.nl/geometrics/Coordinate%20transformations/coordtrans.html\n * - TokyoJapan: www.geocachingtoolbox.com?page=datumEllipsoidDetails\n * - WGS72:      www.icao.int/safety/pbn/documentation/eurocontrol/eurocontrol wgs 84 implementation manual.pdf\n *\n * more transform parameters are available from earth-info.nga.mil/GandG/coordsys/datums/NATO_DT.pdf,\n * www.fieldenmaps.info/cconv/web/cconv_params.js\n */\n/* note:\n * - ETRS89 reference frames are coincident with WGS-84 at epoch 1989.0 (ie null transform) at the one metre level.\n */\n\n\n// freeze static properties\nObject.keys(ellipsoids).forEach(e => Object.freeze(ellipsoids[e]));\nObject.keys(datums).forEach(d => { Object.freeze(datums[d]); Object.freeze(datums[d].transform); });\n\n\n/* LatLon - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\n/**\n * Latitude/longitude points on an ellipsoidal model earth, with ellipsoid parameters and methods\n * for converting between datums and to geocentric (ECEF) cartesian coordinates.\n *\n * @extends LatLonEllipsoidal\n */\nclass LatLonEllipsoidal_Datum extends LatLonEllipsoidal {\n\n    /**\n     * Creates a geodetic latitude/longitude point on an ellipsoidal model earth using given datum.\n     *\n     * @param {number} lat - Latitude (in degrees).\n     * @param {number} lon - Longitude (in degrees).\n     * @param {number} [height=0] - Height above ellipsoid in metres.\n     * @param {LatLon.datums} datum - Datum this point is defined within.\n     *\n     * @example\n     *   import LatLon from '/js/geodesy/latlon-ellipsoidal-datum.js';\n     *   const p = new LatLon(53.3444, -6.2577, 17, LatLon.datums.Irl1975);\n     */\n    constructor(lat, lon, height=0, datum=datums.WGS84) {\n        if (!datum || datum.ellipsoid==undefined) throw new TypeError(`unrecognised datum ‘${datum}’`);\n\n        super(lat, lon, height);\n\n        this._datum = datum;\n    }\n\n\n    /**\n     * Datum this point is defined within.\n     */\n    get datum() {\n        return this._datum;\n    }\n\n\n    /**\n     * Ellipsoids with their parameters; semi-major axis (a), semi-minor axis (b), and flattening (f).\n     *\n     * Flattening f = (a−b)/a; at least one of these parameters is derived from defining constants.\n     *\n     * @example\n     *   const a = LatLon.ellipsoids.Airy1830.a; // 6377563.396\n     */\n    static get ellipsoids() {\n        return ellipsoids;\n    }\n\n\n    /**\n     * Datums; with associated ellipsoid, and Helmert transform parameters to convert from WGS-84\n     * into given datum.\n     *\n     * Note that precision of various datums will vary, and WGS-84 (original) is not defined to be\n     * accurate to better than ±1 metre. No transformation should be assumed to be accurate to\n     * better than a metre, for many datums somewhat less.\n     *\n     * This is a small sample of commoner datums from a large set of historical datums. I will add\n     * new datums on request.\n     *\n     * @example\n     *   const a = LatLon.datums.OSGB36.ellipsoid.a;                    // 6377563.396\n     *   const tx = LatLon.datums.OSGB36.transform;                     // [ tx, ty, tz, s, rx, ry, rz ]\n     *   const availableDatums = Object.keys(LatLon.datums).join(', '); // ED50, Irl1975, NAD27, ...\n     */\n    static get datums() {\n        return datums;\n    }\n\n\n    // note instance datum getter/setters are in LatLonEllipsoidal\n\n\n    /**\n     * Parses a latitude/longitude point from a variety of formats.\n     *\n     * Latitude & longitude (in degrees) can be supplied as two separate parameters, as a single\n     * comma-separated lat/lon string, or as a single object with { lat, lon } or GeoJSON properties.\n     *\n     * The latitude/longitude values may be numeric or strings; they may be signed decimal or\n     * deg-min-sec (hexagesimal) suffixed by compass direction (NSEW); a variety of separators are\n     * accepted. Examples -3.62, '3 37 12W', '3°37′12″W'.\n     *\n     * Thousands/decimal separators must be comma/dot; use Dms.fromLocale to convert locale-specific\n     * thousands/decimal separators.\n     *\n     * @param   {number|string|Object} lat|latlon - Geodetic Latitude (in degrees) or comma-separated lat/lon or lat/lon object.\n     * @param   {number}               [lon] - Longitude in degrees.\n     * @param   {number}               [height=0] - Height above ellipsoid in metres.\n     * @param   {LatLon.datums}        [datum=WGS84] - Datum this point is defined within.\n     * @returns {LatLon} Latitude/longitude point on ellipsoidal model earth using given datum.\n     * @throws  {TypeError} Unrecognised datum.\n     *\n     * @example\n     *   const p = LatLon.parse('51.47736, 0.0000', 0, LatLon.datums.OSGB36);\n     */\n    static parse(...args) {\n        let datum = datums.WGS84;\n\n        // if the last argument is a datum, use that, otherwise use default WGS-84\n        if (args.length==4 || (args.length==3 && typeof args[2] == 'object')) datum = args.pop();\n\n        if (!datum || datum.ellipsoid==undefined) throw new TypeError(`unrecognised datum ‘${datum}’`);\n\n        const point = super.parse(...args);\n\n        point._datum = datum;\n\n        return point;\n    }\n\n\n    /**\n     * Converts ‘this’ lat/lon coordinate to new coordinate system.\n     *\n     * @param   {LatLon.datums} toDatum - Datum this coordinate is to be converted to.\n     * @returns {LatLon} This point converted to new datum.\n     * @throws  {TypeError} Unrecognised datum.\n     *\n     * @example\n     *   const pWGS84 = new LatLon(51.47788, -0.00147, 0, LatLon.datums.WGS84);\n     *   const pOSGB = pWGS84.convertDatum(LatLon.datums.OSGB36); // 51.4773°N, 000.0001°E\n     */\n    convertDatum(toDatum) {\n        if (!toDatum || toDatum.ellipsoid==undefined) throw new TypeError(`unrecognised datum ‘${toDatum}’`);\n\n        const oldCartesian = this.toCartesian();                 // convert geodetic to cartesian\n        const newCartesian = oldCartesian.convertDatum(toDatum); // convert datum\n        const newLatLon = newCartesian.toLatLon();               // convert cartesian back to geodetic\n\n        return newLatLon;\n    }\n\n\n    /**\n     * Converts ‘this’ point from (geodetic) latitude/longitude coordinates to (geocentric) cartesian\n     * (x/y/z) coordinates, based on the same datum.\n     *\n     * Shadow of LatLonEllipsoidal.toCartesian(), returning Cartesian augmented with\n     * LatLonEllipsoidal_Datum methods/properties.\n     *\n     * @returns {Cartesian} Cartesian point equivalent to lat/lon point, with x, y, z in metres from\n     *   earth centre, augmented with reference frame conversion methods and properties.\n     */\n    toCartesian() {\n        const cartesian = super.toCartesian();\n        const cartesianDatum = new Cartesian_Datum(cartesian.x, cartesian.y, cartesian.z, this.datum);\n        return cartesianDatum;\n    }\n\n}\n\n\n/* Cartesian  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\n/**\n * Augments Cartesian with datum the cooordinate is based on, and methods to convert between datums\n * (using Helmert 7-parameter transforms) and to convert cartesian to geodetic latitude/longitude\n * point.\n *\n * @extends Cartesian\n */\nclass Cartesian_Datum extends Cartesian {\n\n    /**\n     * Creates cartesian coordinate representing ECEF (earth-centric earth-fixed) point, on a given\n     * datum. The datum will identify the primary meridian (for the x-coordinate), and is also\n     * useful in transforming to/from geodetic (lat/lon) coordinates.\n     *\n     * @param  {number} x - X coordinate in metres (=> 0°N,0°E).\n     * @param  {number} y - Y coordinate in metres (=> 0°N,90°E).\n     * @param  {number} z - Z coordinate in metres (=> 90°N).\n     * @param  {LatLon.datums} [datum] - Datum this coordinate is defined within.\n     * @throws {TypeError} Unrecognised datum.\n     *\n     * @example\n     *   import { Cartesian } from '/js/geodesy/latlon-ellipsoidal-datum.js';\n     *   const coord = new Cartesian(3980581.210, -111.159, 4966824.522);\n     */\n    constructor(x, y, z, datum=undefined) {\n        if (datum && datum.ellipsoid==undefined) throw new TypeError(`unrecognised datum ‘${datum}’`);\n\n        super(x, y, z);\n\n        if (datum) this._datum = datum;\n    }\n\n\n    /**\n     * Datum this point is defined within.\n     */\n    get datum() {\n        return this._datum;\n    }\n    set datum(datum) {\n        if (!datum || datum.ellipsoid==undefined) throw new TypeError(`unrecognised datum ‘${datum}’`);\n        this._datum = datum;\n    }\n\n\n    /**\n     * Converts ‘this’ (geocentric) cartesian (x/y/z) coordinate to (geodetic) latitude/longitude\n     * point (based on the same datum, or WGS84 if unset).\n     *\n     * Shadow of Cartesian.toLatLon(), returning LatLon augmented with LatLonEllipsoidal_Datum\n     * methods convertDatum, toCartesian, etc.\n     *\n     * @returns {LatLon} Latitude/longitude point defined by cartesian coordinates.\n     * @throws  {TypeError} Unrecognised datum\n     *\n     * @example\n     *   const c = new Cartesian(4027893.924, 307041.993, 4919474.294);\n     *   const p = c.toLatLon(); // 50.7978°N, 004.3592°E\n     */\n    toLatLon(deprecatedDatum=undefined) {\n        if (deprecatedDatum) {\n            console.info('datum parameter to Cartesian_Datum.toLatLon is deprecated: set datum before calling toLatLon()');\n            this.datum = deprecatedDatum;\n        }\n        const datum = this.datum || datums.WGS84;\n        if (!datum || datum.ellipsoid==undefined) throw new TypeError(`unrecognised datum ‘${datum}’`);\n\n        const latLon = super.toLatLon(datum.ellipsoid); // TODO: what if datum is not geocentric?\n        const point = new LatLonEllipsoidal_Datum(latLon.lat, latLon.lon, latLon.height, this.datum);\n        return point;\n    }\n\n\n    /**\n     * Converts ‘this’ cartesian coordinate to new datum using Helmert 7-parameter transformation.\n     *\n     * @param   {LatLon.datums} toDatum - Datum this coordinate is to be converted to.\n     * @returns {Cartesian} This point converted to new datum.\n     * @throws  {Error} Undefined datum.\n     *\n     * @example\n     *   const c = new Cartesian(3980574.247, -102.127, 4966830.065, LatLon.datums.OSGB36);\n     *   c.convertDatum(LatLon.datums.Irl1975); // [??,??,??]\n     */\n    convertDatum(toDatum) {\n        // TODO: what if datum is not geocentric?\n        if (!toDatum || toDatum.ellipsoid == undefined) throw new TypeError(`unrecognised datum ‘${toDatum}’`);\n        if (!this.datum) throw new TypeError('cartesian coordinate has no datum');\n\n        let oldCartesian = null;\n        let transform = null;\n\n        if (this.datum == undefined || this.datum == datums.WGS84) {\n            // converting from WGS 84\n            oldCartesian = this;\n            transform = toDatum.transform;\n        }\n        if (toDatum == datums.WGS84) {\n            // converting to WGS 84; use inverse transform\n            oldCartesian = this;\n            transform = this.datum.transform.map(p => -p);\n        }\n        if (transform == null) {\n            // neither this.datum nor toDatum are WGS84: convert this to WGS84 first\n            oldCartesian = this.convertDatum(datums.WGS84);\n            transform = toDatum.transform;\n        }\n\n        const newCartesian = oldCartesian.applyTransform(transform);\n        newCartesian.datum = toDatum;\n\n        return newCartesian;\n    }\n\n\n    /**\n     * Applies Helmert 7-parameter transformation to ‘this’ coordinate using transform parameters t.\n     *\n     * This is used in converting datums (geodetic->cartesian, apply transform, cartesian->geodetic).\n     *\n     * @private\n     * @param   {number[]} t - Transformation to apply to this coordinate.\n     * @returns {Cartesian} Transformed point.\n     */\n    applyTransform(t)   {\n        // this point\n        const { x: x1, y: y1, z: z1 } = this;\n\n        // transform parameters\n        const tx = t[0];                    // x-shift in metres\n        const ty = t[1];                    // y-shift in metres\n        const tz = t[2];                    // z-shift in metres\n        const s  = t[3]/1e6 + 1;            // scale: normalise parts-per-million to (s+1)\n        const rx = (t[4]/3600).toRadians(); // x-rotation: normalise arcseconds to radians\n        const ry = (t[5]/3600).toRadians(); // y-rotation: normalise arcseconds to radians\n        const rz = (t[6]/3600).toRadians(); // z-rotation: normalise arcseconds to radians\n\n        // apply transform\n        const x2 = tx + x1*s  - y1*rz + z1*ry;\n        const y2 = ty + x1*rz + y1*s  - z1*rx;\n        const z2 = tz - x1*ry + y1*rx + z1*s;\n\n        return new Cartesian_Datum(x2, y2, z2);\n    }\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport { LatLonEllipsoidal_Datum as default, Cartesian_Datum as Cartesian, datums, Dms };\n","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Ordnance Survey Grid Reference functions                           (c) Chris Veness 2005-2021  */\n/*                                                                                   MIT Licence  */\n/* www.movable-type.co.uk/scripts/latlong-gridref.html                                            */\n/* www.movable-type.co.uk/scripts/geodesy-library.html#osgridref                                  */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nimport LatLonEllipsoidal, { Dms } from './latlon-ellipsoidal-datum.js';\n\n\n/**\n * Ordnance Survey OSGB grid references provide geocoordinate references for UK mapping purposes.\n *\n * Formulation implemented here due to Thomas, Redfearn, etc is as published by OS, but is inferior\n * to Krüger as used by e.g. Karney 2011.\n *\n * www.ordnancesurvey.co.uk/documents/resources/guide-coordinate-systems-great-britain.pdf.\n *\n * Note OSGB grid references cover Great Britain only; Ireland and the Channel Islands have their\n * own references.\n *\n * Note that these formulae are based on ellipsoidal calculations, and according to the OS are\n * accurate to about 4–5 metres – for greater accuracy, a geoid-based transformation (OSTN15) must\n * be used.\n */\n\n/*\n * Converted 2015 to work with WGS84 by default, OSGB36 as option;\n * www.ordnancesurvey.co.uk/blog/2014/12/confirmation-on-changes-to-latitude-and-longitude\n */\n\n\n/* OsGridRef  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\nconst nationalGrid = {\n    trueOrigin:  { lat: 49, lon: -2 },                 // true origin of grid 49°N,2°W on OSGB36 datum\n    falseOrigin: { easting: -400e3, northing: 100e3 }, // easting & northing of false origin, metres from true origin\n    scaleFactor: 0.9996012717,                         // scale factor on central meridian\n    ellipsoid:   LatLonEllipsoidal.ellipsoids.Airy1830,\n};\n// note Irish National Grid uses t/o 53°30′N, 8°W, f/o 200kmW, 250kmS, scale factor 1.000035, on Airy 1830 Modified ellipsoid\n\n\n/**\n * OS Grid References with methods to parse and convert them to latitude/longitude points.\n */\nclass OsGridRef {\n\n    /**\n     * Creates an OsGridRef object.\n     *\n     * @param {number} easting - Easting in metres from OS Grid false origin.\n     * @param {number} northing - Northing in metres from OS Grid false origin.\n     *\n     * @example\n     *   import OsGridRef from '/js/geodesy/osgridref.js';\n     *   const gridref = new OsGridRef(651409, 313177);\n     */\n    constructor(easting, northing) {\n        this.easting = Number(easting);\n        this.northing = Number(northing);\n\n        if (isNaN(easting)  || this.easting<0  || this.easting>700e3) throw new RangeError(`invalid easting ‘${easting}’`);\n        if (isNaN(northing) || this.northing<0 || this.northing>1300e3) throw new RangeError(`invalid northing ‘${northing}’`);\n    }\n\n\n    /**\n     * Converts ‘this’ Ordnance Survey Grid Reference easting/northing coordinate to latitude/longitude\n     * (SW corner of grid square).\n     *\n     * While OS Grid References are based on OSGB-36, the Ordnance Survey have deprecated the use of\n     * OSGB-36 for latitude/longitude coordinates (in favour of WGS-84), hence this function returns\n     * WGS-84 by default, with OSGB-36 as an option. See www.ordnancesurvey.co.uk/blog/2014/12/2.\n     *\n     * Note formulation implemented here due to Thomas, Redfearn, etc is as published by OS, but is\n     * inferior to Krüger as used by e.g. Karney 2011.\n     *\n     * @param   {LatLon.datum} [datum=WGS84] - Datum to convert grid reference into.\n     * @returns {LatLon}       Latitude/longitude of supplied grid reference.\n     *\n     * @example\n     *   const gridref = new OsGridRef(651409.903, 313177.270);\n     *   const pWgs84 = gridref.toLatLon();                    // 52°39′28.723″N, 001°42′57.787″E\n     *   // to obtain (historical) OSGB36 lat/lon point:\n     *   const pOsgb = gridref.toLatLon(LatLon.datums.OSGB36); // 52°39′27.253″N, 001°43′04.518″E\n     */\n    toLatLon(datum=LatLonEllipsoidal.datums.WGS84) {\n        const { easting: E, northing: N } = this;\n\n        const { a, b } = nationalGrid.ellipsoid;            // a = 6377563.396, b = 6356256.909\n        const φ0 = nationalGrid.trueOrigin.lat.toRadians(); // latitude of true origin, 49°N\n        const λ0 = nationalGrid.trueOrigin.lon.toRadians(); // longitude of true origin, 2°W\n        const E0 = -nationalGrid.falseOrigin.easting;       // easting of true origin, 400km\n        const N0 = -nationalGrid.falseOrigin.northing;      // northing of true origin, -100km\n        const F0 = nationalGrid.scaleFactor;                // 0.9996012717\n\n        const e2 = 1 - (b*b)/(a*a);                         // eccentricity squared\n        const n = (a-b)/(a+b), n2 = n*n, n3 = n*n*n;        // n, n², n³\n\n        let φ=φ0, M=0;\n        do {\n            φ = (N-N0-M)/(a*F0) + φ;\n\n            const Ma = (1 + n + (5/4)*n2 + (5/4)*n3) * (φ-φ0);\n            const Mb = (3*n + 3*n*n + (21/8)*n3) * Math.sin(φ-φ0) * Math.cos(φ+φ0);\n            const Mc = ((15/8)*n2 + (15/8)*n3) * Math.sin(2*(φ-φ0)) * Math.cos(2*(φ+φ0));\n            const Md = (35/24)*n3 * Math.sin(3*(φ-φ0)) * Math.cos(3*(φ+φ0));\n            M = b * F0 * (Ma - Mb + Mc - Md);                // meridional arc\n\n        } while (Math.abs(N-N0-M) >= 0.00001);  // ie until < 0.01mm\n\n        const cosφ = Math.cos(φ), sinφ = Math.sin(φ);\n        const ν = a*F0/Math.sqrt(1-e2*sinφ*sinφ);            // nu = transverse radius of curvature\n        const ρ = a*F0*(1-e2)/Math.pow(1-e2*sinφ*sinφ, 1.5); // rho = meridional radius of curvature\n        const η2 = ν/ρ-1;                                    // eta = ?\n\n        const tanφ = Math.tan(φ);\n        const tan2φ = tanφ*tanφ, tan4φ = tan2φ*tan2φ, tan6φ = tan4φ*tan2φ;\n        const secφ = 1/cosφ;\n        const ν3 = ν*ν*ν, ν5 = ν3*ν*ν, ν7 = ν5*ν*ν;\n        const VII = tanφ/(2*ρ*ν);\n        const VIII = tanφ/(24*ρ*ν3)*(5+3*tan2φ+η2-9*tan2φ*η2);\n        const IX = tanφ/(720*ρ*ν5)*(61+90*tan2φ+45*tan4φ);\n        const X = secφ/ν;\n        const XI = secφ/(6*ν3)*(ν/ρ+2*tan2φ);\n        const XII = secφ/(120*ν5)*(5+28*tan2φ+24*tan4φ);\n        const XIIA = secφ/(5040*ν7)*(61+662*tan2φ+1320*tan4φ+720*tan6φ);\n\n        const dE = (E-E0), dE2 = dE*dE, dE3 = dE2*dE, dE4 = dE2*dE2, dE5 = dE3*dE2, dE6 = dE4*dE2, dE7 = dE5*dE2;\n        φ = φ - VII*dE2 + VIII*dE4 - IX*dE6;\n        const λ = λ0 + X*dE - XI*dE3 + XII*dE5 - XIIA*dE7;\n\n        let point = new LatLon_OsGridRef(φ.toDegrees(), λ.toDegrees(), 0, LatLonEllipsoidal.datums.OSGB36);\n\n        if (datum != LatLonEllipsoidal.datums.OSGB36) {\n            // if point is required in datum other than OSGB36, convert it\n            point = point.convertDatum(datum);\n            // convertDatum() gives us a LatLon: convert to LatLon_OsGridRef which includes toOsGrid()\n            point = new LatLon_OsGridRef(point.lat, point.lon, point.height, point.datum);\n        }\n\n        return point;\n    }\n\n\n    /**\n     * Parses grid reference to OsGridRef object.\n     *\n     * Accepts standard grid references (eg 'SU 387 148'), with or without whitespace separators, from\n     * two-digit references up to 10-digit references (1m × 1m square), or fully numeric comma-separated\n     * references in metres (eg '438700,114800').\n     *\n     * @param   {string}    gridref - Standard format OS Grid Reference.\n     * @returns {OsGridRef} Numeric version of grid reference in metres from false origin (SW corner of\n     *   supplied grid square).\n     * @throws  {Error}     Invalid grid reference.\n     *\n     * @example\n     *   const grid = OsGridRef.parse('TG 51409 13177'); // grid: { easting: 651409, northing: 313177 }\n     */\n    static parse(gridref) {\n        gridref = String(gridref).trim();\n\n        // check for fully numeric comma-separated gridref format\n        let match = gridref.match(/^(\\d+),\\s*(\\d+)$/);\n        if (match) return new OsGridRef(match[1], match[2]);\n\n        // validate format\n        match = gridref.match(/^[HNST][ABCDEFGHJKLMNOPQRSTUVWXYZ]\\s*[0-9]+\\s*[0-9]+$/i);\n        if (!match) throw new Error(`invalid grid reference ‘${gridref}’`);\n\n        // get numeric values of letter references, mapping A->0, B->1, C->2, etc:\n        let l1 = gridref.toUpperCase().charCodeAt(0) - 'A'.charCodeAt(0); // 500km square\n        let l2 = gridref.toUpperCase().charCodeAt(1) - 'A'.charCodeAt(0); // 100km square\n        // shuffle down letters after 'I' since 'I' is not used in grid:\n        if (l1 > 7) l1--;\n        if (l2 > 7) l2--;\n\n        // convert grid letters into 100km-square indexes from false origin (grid square SV):\n        const e100km = ((l1 - 2) % 5) * 5 + (l2 % 5);\n        const n100km = (19 - Math.floor(l1 / 5) * 5) - Math.floor(l2 / 5);\n\n        // skip grid letters to get numeric (easting/northing) part of ref\n        let en = gridref.slice(2).trim().split(/\\s+/);\n        // if e/n not whitespace separated, split half way\n        if (en.length == 1) en = [ en[0].slice(0, en[0].length / 2), en[0].slice(en[0].length / 2) ];\n\n        // validation\n        if (en[0].length != en[1].length) throw new Error(`invalid grid reference ‘${gridref}’`);\n\n        // standardise to 10-digit refs (metres)\n        en[0] = en[0].padEnd(5, '0');\n        en[1] = en[1].padEnd(5, '0');\n\n        const e = e100km + en[0];\n        const n = n100km + en[1];\n\n        return new OsGridRef(e, n);\n    }\n\n\n    /**\n     * Converts ‘this’ numeric grid reference to standard OS Grid Reference.\n     *\n     * @param   {number} [digits=10] - Precision of returned grid reference (10 digits = metres);\n     *   digits=0 will return grid reference in numeric format.\n     * @returns {string} This grid reference in standard format.\n     *\n     * @example\n     *   const gridref = new OsGridRef(651409, 313177).toString(8); // 'TG 5140 1317'\n     *   const gridref = new OsGridRef(651409, 313177).toString(0); // '651409,313177'\n     */\n    toString(digits=10) {\n        if (![ 0,2,4,6,8,10,12,14,16 ].includes(Number(digits))) throw new RangeError(`invalid precision ‘${digits}’`); // eslint-disable-line comma-spacing\n\n        let { easting: e, northing: n } = this;\n\n        // use digits = 0 to return numeric format (in metres) - note northing may be >= 1e7\n        if (digits == 0) {\n            const format = { useGrouping: false,  minimumIntegerDigits: 6, maximumFractionDigits: 3 };\n            const ePad = e.toLocaleString('en', format);\n            const nPad = n.toLocaleString('en', format);\n            return `${ePad},${nPad}`;\n        }\n\n        // get the 100km-grid indices\n        const e100km = Math.floor(e / 100000), n100km = Math.floor(n / 100000);\n\n        // translate those into numeric equivalents of the grid letters\n        let l1 = (19 - n100km) - (19 - n100km) % 5 + Math.floor((e100km + 10) / 5);\n        let l2 = (19 - n100km) * 5 % 25 + e100km % 5;\n\n        // compensate for skipped 'I' and build grid letter-pairs\n        if (l1 > 7) l1++;\n        if (l2 > 7) l2++;\n        const letterPair = String.fromCharCode(l1 + 'A'.charCodeAt(0), l2 + 'A'.charCodeAt(0));\n\n        // strip 100km-grid indices from easting & northing, and reduce precision\n        e = Math.floor((e % 100000) / Math.pow(10, 5 - digits / 2));\n        n = Math.floor((n % 100000) / Math.pow(10, 5 - digits / 2));\n\n        // pad eastings & northings with leading zeros\n        e = e.toString().padStart(digits/2, '0');\n        n = n.toString().padStart(digits/2, '0');\n\n        return `${letterPair} ${e} ${n}`;\n    }\n\n}\n\n\n/* LatLon_OsGridRef - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\n/**\n * Extends LatLon class with method to convert LatLon point to OS Grid Reference.\n *\n * @extends LatLonEllipsoidal\n */\nclass LatLon_OsGridRef extends LatLonEllipsoidal {\n\n    /**\n     * Converts latitude/longitude to Ordnance Survey grid reference easting/northing coordinate.\n     *\n     * @returns {OsGridRef} OS Grid Reference easting/northing.\n     *\n     * @example\n     *   const grid = new LatLon(52.65798, 1.71605).toOsGrid(); // TG 51409 13177\n     *   // for conversion of (historical) OSGB36 latitude/longitude point:\n     *   const grid = new LatLon(52.65798, 1.71605).toOsGrid(LatLon.datums.OSGB36);\n     */\n    toOsGrid() {\n        // if necessary convert to OSGB36 first\n        const point = this.datum == LatLonEllipsoidal.datums.OSGB36\n            ? this\n            : this.convertDatum(LatLonEllipsoidal.datums.OSGB36);\n\n        const φ = point.lat.toRadians();\n        const λ = point.lon.toRadians();\n\n        const { a, b } = nationalGrid.ellipsoid;            // a = 6377563.396, b = 6356256.909\n        const φ0 = nationalGrid.trueOrigin.lat.toRadians(); // latitude of true origin, 49°N\n        const λ0 = nationalGrid.trueOrigin.lon.toRadians(); // longitude of true origin, 2°W\n        const E0 = -nationalGrid.falseOrigin.easting;       // easting of true origin, 400km\n        const N0 = -nationalGrid.falseOrigin.northing;      // northing of true origin, -100km\n        const F0 = nationalGrid.scaleFactor;                // 0.9996012717\n\n        const e2 = 1 - (b*b)/(a*a);                          // eccentricity squared\n        const n = (a-b)/(a+b), n2 = n*n, n3 = n*n*n;         // n, n², n³\n\n        const cosφ = Math.cos(φ), sinφ = Math.sin(φ);\n        const ν = a*F0/Math.sqrt(1-e2*sinφ*sinφ);            // nu = transverse radius of curvature\n        const ρ = a*F0*(1-e2)/Math.pow(1-e2*sinφ*sinφ, 1.5); // rho = meridional radius of curvature\n        const η2 = ν/ρ-1;                                    // eta = ?\n\n        const Ma = (1 + n + (5/4)*n2 + (5/4)*n3) * (φ-φ0);\n        const Mb = (3*n + 3*n*n + (21/8)*n3) * Math.sin(φ-φ0) * Math.cos(φ+φ0);\n        const Mc = ((15/8)*n2 + (15/8)*n3) * Math.sin(2*(φ-φ0)) * Math.cos(2*(φ+φ0));\n        const Md = (35/24)*n3 * Math.sin(3*(φ-φ0)) * Math.cos(3*(φ+φ0));\n        const M = b * F0 * (Ma - Mb + Mc - Md);              // meridional arc\n\n        const cos3φ = cosφ*cosφ*cosφ;\n        const cos5φ = cos3φ*cosφ*cosφ;\n        const tan2φ = Math.tan(φ)*Math.tan(φ);\n        const tan4φ = tan2φ*tan2φ;\n\n        const I = M + N0;\n        const II = (ν/2)*sinφ*cosφ;\n        const III = (ν/24)*sinφ*cos3φ*(5-tan2φ+9*η2);\n        const IIIA = (ν/720)*sinφ*cos5φ*(61-58*tan2φ+tan4φ);\n        const IV = ν*cosφ;\n        const V = (ν/6)*cos3φ*(ν/ρ-tan2φ);\n        const VI = (ν/120) * cos5φ * (5 - 18*tan2φ + tan4φ + 14*η2 - 58*tan2φ*η2);\n\n        const Δλ = λ-λ0;\n        const Δλ2 = Δλ*Δλ, Δλ3 = Δλ2*Δλ, Δλ4 = Δλ3*Δλ, Δλ5 = Δλ4*Δλ, Δλ6 = Δλ5*Δλ;\n\n        let N = I + II*Δλ2 + III*Δλ4 + IIIA*Δλ6;\n        let E = E0 + IV*Δλ + V*Δλ3 + VI*Δλ5;\n\n        N = Number(N.toFixed(3)); // round to mm precision\n        E = Number(E.toFixed(3));\n\n        try {\n            return new OsGridRef(E, N); // note: gets truncated to SW corner of 1m grid square\n        } catch (e) {\n            throw new Error(`${e.message} from (${point.lat.toFixed(6)},${point.lon.toFixed(6)}).toOsGrid()`);\n        }\n    }\n\n\n    /**\n     * Override LatLonEllipsoidal.convertDatum() with version which returns LatLon_OsGridRef.\n     */\n    convertDatum(toDatum) {\n        const osgbED = super.convertDatum(toDatum); // returns LatLonEllipsoidal_Datum\n        const osgbOSGR = new LatLon_OsGridRef(osgbED.lat, osgbED.lon, osgbED.height, osgbED.datum);\n        return osgbOSGR;\n    }\n\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport { OsGridRef as default, LatLon_OsGridRef as LatLon, Dms };\n","// index.ts\nimport { isNumber } from \"@turf/helpers\";\nfunction getCoord(coord) {\n  if (!coord) {\n    throw new Error(\"coord is required\");\n  }\n  if (!Array.isArray(coord)) {\n    if (coord.type === \"Feature\" && coord.geometry !== null && coord.geometry.type === \"Point\") {\n      return [...coord.geometry.coordinates];\n    }\n    if (coord.type === \"Point\") {\n      return [...coord.coordinates];\n    }\n  }\n  if (Array.isArray(coord) && coord.length >= 2 && !Array.isArray(coord[0]) && !Array.isArray(coord[1])) {\n    return [...coord];\n  }\n  throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\nfunction getCoords(coords) {\n  if (Array.isArray(coords)) {\n    return coords;\n  }\n  if (coords.type === \"Feature\") {\n    if (coords.geometry !== null) {\n      return coords.geometry.coordinates;\n    }\n  } else {\n    if (coords.coordinates) {\n      return coords.coordinates;\n    }\n  }\n  throw new Error(\n    \"coords must be GeoJSON Feature, Geometry Object or an Array\"\n  );\n}\nfunction containsNumber(coordinates) {\n  if (coordinates.length > 1 && isNumber(coordinates[0]) && isNumber(coordinates[1])) {\n    return true;\n  }\n  if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n    return containsNumber(coordinates[0]);\n  }\n  throw new Error(\"coordinates must only contain numbers\");\n}\nfunction geojsonType(value, type, name) {\n  if (!type || !name) {\n    throw new Error(\"type and name required\");\n  }\n  if (!value || value.type !== type) {\n    throw new Error(\n      \"Invalid input to \" + name + \": must be a \" + type + \", given \" + value.type\n    );\n  }\n}\nfunction featureOf(feature, type, name) {\n  if (!feature) {\n    throw new Error(\"No feature passed\");\n  }\n  if (!name) {\n    throw new Error(\".featureOf() requires a name\");\n  }\n  if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n    throw new Error(\n      \"Invalid input to \" + name + \", Feature with geometry required\"\n    );\n  }\n  if (!feature.geometry || feature.geometry.type !== type) {\n    throw new Error(\n      \"Invalid input to \" + name + \": must be a \" + type + \", given \" + feature.geometry.type\n    );\n  }\n}\nfunction collectionOf(featureCollection, type, name) {\n  if (!featureCollection) {\n    throw new Error(\"No featureCollection passed\");\n  }\n  if (!name) {\n    throw new Error(\".collectionOf() requires a name\");\n  }\n  if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n    throw new Error(\n      \"Invalid input to \" + name + \", FeatureCollection required\"\n    );\n  }\n  for (const feature of featureCollection.features) {\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n      throw new Error(\n        \"Invalid input to \" + name + \", Feature with geometry required\"\n      );\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n      throw new Error(\n        \"Invalid input to \" + name + \": must be a \" + type + \", given \" + feature.geometry.type\n      );\n    }\n  }\n}\nfunction getGeom(geojson) {\n  if (geojson.type === \"Feature\") {\n    return geojson.geometry;\n  }\n  return geojson;\n}\nfunction getType(geojson, _name) {\n  if (geojson.type === \"FeatureCollection\") {\n    return \"FeatureCollection\";\n  }\n  if (geojson.type === \"GeometryCollection\") {\n    return \"GeometryCollection\";\n  }\n  if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n    return geojson.geometry.type;\n  }\n  return geojson.type;\n}\nexport {\n  collectionOf,\n  containsNumber,\n  featureOf,\n  geojsonType,\n  getCoord,\n  getCoords,\n  getGeom,\n  getType\n};\n//# sourceMappingURL=index.js.map","// index.ts\nimport { getCoord } from \"@turf/invariant\";\nimport { radiansToLength, degreesToRadians } from \"@turf/helpers\";\nfunction distance(from, to, options = {}) {\n  var coordinates1 = getCoord(from);\n  var coordinates2 = getCoord(to);\n  var dLat = degreesToRadians(coordinates2[1] - coordinates1[1]);\n  var dLon = degreesToRadians(coordinates2[0] - coordinates1[0]);\n  var lat1 = degreesToRadians(coordinates1[1]);\n  var lat2 = degreesToRadians(coordinates2[1]);\n  var a = Math.pow(Math.sin(dLat / 2), 2) + Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n  return radiansToLength(\n    2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)),\n    options.units\n  );\n}\nvar turf_distance_default = distance;\nexport {\n  turf_distance_default as default,\n  distance\n};\n//# sourceMappingURL=index.js.map","import { distance as turfDistance } from '@turf/distance'\nimport { point as TurfPoint } from '@turf/helpers'\nimport { defaults } from '../store/constants'\n\nconst getBearing = (coord1, coord2) => {\n  const east = coord1[0] < coord2[0] && 'east'\n  const west = coord1[0] > coord2[0] && 'west'\n  const north = coord1[1] < coord2[1] && 'north'\n  const south = coord1[1] > coord2[1] && 'south'\n  return [east, west, north, south].filter(b => b && typeof b === 'string')\n}\n\nconst getUnits = (metres) => {\n  const MAX_METRES = 800\n  const MAX_MILES = 5000\n  const RATIO = 0.621371\n  let units\n  if (metres < MAX_METRES) {\n    units = `${metres} metres`\n  } else if (metres < MAX_MILES) {\n    units = (metres / 1000 * RATIO).toFixed(1) + ' miles'\n  } else {\n    units = Math.round((metres / 1000) * RATIO) + ' miles'\n  }\n  return units\n}\n\nconst getDirection = (coord1, coord2) => {\n  coord1 = coord1.map(n => n > 1000 ? Math.round(n) : Math.round(n * 100000) / 100000)\n  coord2 = coord2.map(n => n > 1000 ? Math.round(n) : Math.round(n * 100000) / 100000)\n  const ns1 = [coord1[0], coord1[1]]\n  const ns2 = [coord1[0], coord2[1]]\n  const ew1 = [coord1[0], coord1[1]]\n  const ew2 = [coord2[0], coord1[1]]\n  const nsd = getDistance(ns1, ns2)\n  const ewd = getDistance(ew1, ew2)\n  const bearing = getBearing(coord1, coord2)\n  const ewc = bearing.filter(b => ['east', 'west'].includes(b)).join('')\n  const nsc = bearing.filter(b => ['north', 'south'].includes(b)).join('')\n  const ew = ewc ? `${ewc} ${getUnits(ewd)}` : ''\n  const ns = nsc ? `${nsc} ${getUnits(nsd)}` : ''\n  return `${ns + (ewc && nsc ? ', ' : '') + ew}`\n}\n\nconst getArea = (bounds) => {\n  const ew = getDistance([bounds[0], bounds[1]], [bounds[2], bounds[1]])\n  const ns = getDistance([bounds[0], bounds[1]], [bounds[0], bounds[3]])\n  return `${getUnits(ew)} by ${getUnits(ns)}`\n}\n\nconst getBoundsChange = (oCentre, originalZoom, isMaxZoom, isMinZoom, center, zoom) => {\n  const isSameCentre = JSON.stringify(oCentre) === JSON.stringify(center)\n  const isSameZoom = originalZoom === zoom\n  const isMove = oCentre && originalZoom && !(isSameCentre && isSameZoom)\n  const maxZoom = isMaxZoom ? ' (Maximum zoom reached)' : ''\n  const minZoom = isMinZoom ? ' (Minimum zoom reached)' : ''\n  let change = ''\n  if (isMove) {\n    if (!isSameCentre && !isSameZoom) {\n      change = `New area${maxZoom}${minZoom}: `\n    } else if (!isSameCentre) {\n      change = `Map move: ${getDirection(oCentre, center)}, `\n    } else {\n      const direction = zoom > originalZoom ? 'in' : 'out'\n      change = `Zoomed ${direction}${maxZoom}${minZoom}: `\n    }\n  }\n  return change\n}\n\nconst getSelectedStatus = (featuresInViewport, id) => {\n  const total = featuresInViewport.length\n  const index = featuresInViewport.findIndex(f => f.id === id)\n  return index >= 0 && `${total} feature${total !== 1 ? 's' : ''} in this area. ${featuresInViewport[index].name}. ${index + 1} of ${total} highlighted.`\n}\n\nconst getOffsetBoundingClientRect = (el) => {\n  const offsetParent = el.closest('[data-fm-main]') || document.body\n  return offsetParent.getBoundingClientRect()\n}\n\nconst isCirclePolygon = (geometry) => {\n  const coordinates = geometry?.coordinates?.[0]\n\n  // Expect exactly 64 points\n  if (coordinates?.length !== 65) {\n    return false\n  }\n\n  // Compute approximate centre using two opposite points\n  const [x1, y1] = coordinates[0]\n  const [x2, y2] = coordinates[32]\n  const center = [(x1 + x2) / 2, (y1 + y2) / 2]\n\n  let minDist = Infinity; let maxDist = -Infinity\n  let minEdge = Infinity; let maxEdge = -Infinity\n\n  for (let i = 0; i < 64; i++) {\n    const [xA, yA] = coordinates[i]\n    const [xB, yB] = coordinates[(i + 1) % 64]\n\n    // Distance from center\n    const dist = Math.hypot(xA - center[0], yA - center[1])\n    minDist = Math.min(minDist, dist)\n    maxDist = Math.max(maxDist, dist)\n\n    // Distance to next vertex (edge length)\n    const edgeDist = Math.hypot(xB - xA, yB - yA)\n    minEdge = Math.min(minEdge, edgeDist)\n    maxEdge = Math.max(maxEdge, edgeDist)\n  }\n\n  // Need to revist tolerance as they depend on size too\n  const WSG84_TOLERANCE = 0.3\n  const BNG_TOLERANCE = 0.3\n  const tolerance = detectCoordinateType(center) === 'WSG84' ? WSG84_TOLERANCE : BNG_TOLERANCE\n\n  return Math.abs(maxDist - minDist) < tolerance && Math.abs(maxEdge - minEdge) < tolerance\n}\n\nconst metresToImperial = (metres) => {\n  const MILE = 1609.344\n  const YARD = 0.9144\n  const pluralize = (value, singular, plural) => `${value} ${value === 1 ? singular : plural}`\n  if (metres >= MILE) {\n    const miles = Math.floor(metres / MILE)\n    const remainder = metres % MILE\n    const yards = Math.floor(remainder / YARD)\n    return `${pluralize(miles, 'mile', 'miles')}, ${pluralize(yards, 'yard', 'yards')}`\n  } else {\n    const yards = Math.floor(metres / YARD)\n    return `${pluralize(yards, 'yard', 'yards')}`\n  }\n}\n\nconst squareMetresToKm = (metres) => {\n  const SQ_KM = 1_000_000\n  if (metres >= SQ_KM) {\n    let km2 = (metres / SQ_KM).toFixed(2)\n    km2 = Number(km2).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 2 })\n    return `${km2} km²`\n  } else {\n    return `${Math.ceil(metres).toLocaleString()} m²`\n  }\n}\n\nexport const parseDimensions = (dimensions) => {\n  const { area, length } = dimensions\n  const areaDisplay = area ? squareMetresToKm(area) : null\n  const lengthDisplay = length ? metresToImperial(length) : null\n  return { ...dimensions, areaDisplay, lengthDisplay }\n}\n\nexport const detectCoordinateType = (coords) => {\n  if (coords.length === 3) {\n    return 'BNG' // If a third value exists (zone), it's UTM\n  }\n  const [x, y] = coords\n  if (x >= -180 && x <= 180 && y >= -90 && y <= 90) {\n    return 'WSG84'\n  }\n  if (x > 180 && y > 90) {\n    return 'BNG'\n  }\n  return 'Unknown'\n}\n\nexport const getDistance = (coord1, coord2) => {\n  let distance\n  if (coord1[0] > 1000) {\n    const x = Math.abs(coord1[0] - coord2[0])\n    const y = Math.abs(coord1[1] - coord2[1])\n    const dist = Math.sqrt((Math.pow(x, 2)) + (Math.pow(y, 2)))\n    distance = dist\n  } else {\n    const p1 = new TurfPoint(coord1)\n    const p2 = new TurfPoint(coord2)\n    distance = turfDistance(p1, p2, { units: 'metres' })\n  }\n  return Math.round(distance)\n}\n\nexport const getFocusPadding = (el, scale) => {\n  let padding\n  if (el) {\n    const parent = getOffsetBoundingClientRect(el)\n    const box = el.getBoundingClientRect()\n    const boxX = box.x || box.left\n    const boxY = box.y || box.top\n    const parentX = parent.x || parent.left\n    const parentY = parent.y || parent.top\n    padding = {\n      top: (boxY - parentY) / scale,\n      left: (boxX - parentX) / scale,\n      right: (parent.width - box.width - (boxX - parentX)) / scale,\n      bottom: (parent.height - box.height - (boxY - parentY)) / scale\n    }\n  }\n  // Addresses repid browser resizing\n  const isValid = Object.values(padding).every(i => i >= 0)\n  return isValid && padding\n}\n\nexport const getFocusBounds = (el, scale) => {\n  let bounds\n  if (el) {\n    const parent = getOffsetBoundingClientRect(el)\n    const box = el.getBoundingClientRect()\n    const m = 10\n    bounds = [[\n      ((box.x || box.left) - (parent.x || parent.left) + m) / scale,\n      (((box.y || box.top) - (parent.y || parent.top)) + box.height - m) / scale\n    ], [\n      (box.width + ((box.x || box.left) - (parent.x || parent.left)) - m) / scale,\n      ((box.y || box.top) - (parent.y || parent.top) + m) / scale\n    ]]\n  }\n  return bounds\n}\n\nexport const getMapPixel = (el, scale) => {\n  const parent = getOffsetBoundingClientRect(el)\n  const box = el.getBoundingClientRect()\n  const left = ((box.x || box.left) - (parent.x || parent.left)) / scale\n  const top = ((box.y || box.top) - (parent.y || parent.top)) / scale\n  const offsetLeft = (box.width / 2) / scale\n  const offsetTop = (box.height / 2) / scale\n  const point = [left + offsetLeft, top + offsetTop]\n  return point\n}\n\nexport const getDescription = (place, bounds, features) => {\n  const { featuresTotal, isFeaturesInMap, isPixelFeaturesAtPixel, isPixelFeaturesInMap } = features || {}\n  let text = ''\n\n  if (featuresTotal) {\n    text = `${featuresTotal} feature${featuresTotal === 1 ? '' : 's'} in this area. `\n  } else if (isPixelFeaturesAtPixel) {\n    text = 'Data visible at the center coordinate. '\n  } else if (isPixelFeaturesInMap) {\n    text = 'No data visible at the center coordinate. '\n  } else if (isFeaturesInMap) {\n    text = 'No feature data in this area. '\n  } else {\n    // Null\n  }\n\n  const focusPlace = place ? `approximate centre ${place}, ` : ''\n  const focusArea = `covering ${getArea(bounds)}`\n  const findPlace = place ? '' : 'Use ALT plus I to find closest place'\n\n  return `${focusPlace}${focusArea}. ${text}${findPlace}`\n}\n\nexport const getStatus = (action, isBoundsChange, place, state, current) => {\n  const { center, bounds, zoom, isMaxZoom, isMinZoom, features, label, selectedId } = current\n  let status = null\n  if (label) {\n    status = label\n  } else if (selectedId) {\n    const selected = getSelectedStatus(features?.featuresInViewport, selectedId)\n    status = selected\n  } else if (action === 'DATA') {\n    status = 'Map change: new data. Use ALT plus I to get new details'\n  } else if (isBoundsChange) {\n    const direction = getBoundsChange(state.center, state.zoom, isMaxZoom, isMinZoom, center, zoom)\n    const description = getDescription(place, bounds, features)\n    status = `${direction}${direction ? 'f' : 'F'}ocus area ${description}`\n  } else {\n    status = ''\n  }\n  return status\n}\n\nexport const getPlace = (isUserInitiated, action, oPlace, newPlace) => {\n  let place\n  if (!isUserInitiated) {\n    if (action === 'RESET') {\n      place = oPlace\n    } else {\n      place = newPlace\n    }\n  }\n  return place\n}\n\nexport const parseCentre = (value, srid) => {\n  const mb = defaults[`MAX_BOUNDS_${srid}`]\n  let isInRange\n  let coords = value?.split(',')\n  // Query string formed correctly\n  if (!(Array.isArray(coords) && coords?.length === 3)) {\n    return null\n  }\n  // Coords are numbers\n  coords = coords.slice(0, 2).map(x => parseFloat(x))\n  coords = !coords.some(isNaN) && coords\n  if (!coords) {\n    return null\n  }\n  // Coords are within the valid range\n  if (srid === '27700') {\n    isInRange = !!coords.filter(c => c >= 0).length\n  } else {\n    isInRange = (coords[0] > mb[0] && coords[0] < mb[2]) && (coords[1] > mb[1] && coords[1] < mb[3])\n  }\n  return isInRange ? coords : null\n}\n\nexport const parseZoom = value => {\n  const coords = value?.split(',')\n  if (!(Array.isArray(coords) && coords?.length === 3)) {\n    return null\n  }\n  const zoom = parseFloat(coords[2])\n  return !zoom.isNaN ? zoom : null\n}\n\nexport const getShortcutKey = (e, featuresViewport) => {\n  const number = e.code.slice(-1)\n  const hasFeature = featuresViewport.length >= number\n  const id = hasFeature ? featuresViewport[number - 1].id : ''\n  return id\n}\n\nexport const getFeatureShape = (feature) => {\n  if (isCirclePolygon(feature?.geometry)) {\n    return 'circle'\n  }\n  if (feature?.geometry?.type?.toLowerCase() === 'polygon') {\n    const coords = feature.geometry?.coordinates\n    const flatCoords = (coords && Array.from(new Set(coords.flat(2)))) || null\n    return flatCoords?.length === 4 ? 'square' : 'polygon'\n  }\n  return null\n}\n\nexport const spatialNavigate = (direction, start, pixels) => {\n  const quadrant = pixels.filter(p => {\n    const offsetX = Math.abs(p[0] - start[0])\n    const offsetY = Math.abs(p[1] - start[1])\n    let isQuadrant = false\n    if (direction === 'up') {\n      isQuadrant = p[1] <= start[1] && offsetY >= offsetX\n    } else if (direction === 'down') {\n      isQuadrant = p[1] > start[1] && offsetY >= offsetX\n    } else if (direction === 'left') {\n      isQuadrant = p[0] <= start[0] && offsetY < offsetX\n    } else {\n      isQuadrant = p[0] > start[0] && offsetY < offsetX\n    }\n    return isQuadrant && (JSON.stringify(p) !== JSON.stringify(start))\n  })\n  if (!quadrant.length) {\n    quadrant.push(start)\n  }\n  const pythagorean = (a, b) => Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))\n  const distances = quadrant.map(p => pythagorean(Math.abs(start[0] - p[0]), Math.abs(start[1] - p[1])))\n  const closest = quadrant[distances.indexOf(Math.min(...distances))]\n  return pixels.findIndex(i => JSON.stringify(i) === JSON.stringify(closest))\n}\n\nexport const getScale = (size) => {\n  return { small: 1, medium: 1.5, large: 2 }[size] || 1\n}\n\nexport const getPoint = (el, e, scale) => {\n  const { left, top } = el.getBoundingClientRect()\n  const { clientX, clientY } = e.nativeEvent\n  const x = clientX - left\n  const y = clientY - top\n  return [x / scale, y / scale]\n}\n\nexport const getStyle = (styles = []) => {\n  const validStyles = styles.filter(s => defaults.STYLES.includes(s.name))\n  const style = window.localStorage.getItem('style')\n  return validStyles.find(s => s.name === style) || validStyles.find(s => s.name === 'default')\n}\n","import OsGridRef from 'geodesy/osgridref.js'\nimport config from './config.json'\n\nconst isPostcode = (value) => {\n  value = value.replace(/\\s/g, '')\n  const regex = /^(([A-Z]{1,2}\\d[A-Z\\d]?|ASCN|STHL|TDCU|BBND|[BFS]IQQ|PCRN|TKCA) ?\\d[A-Z]{2}|BFPO ?\\d{1,4}|(KY\\d|MSR|VG|AI)[ -]?\\d{4}|[A-Z]{2} ?\\d{2}|GE ?CX|GIR ?0A{2}|SAN ?TA1)$/i\n  return regex.test(value)\n}\n\n// Exclude Scotalnd, Wales and Northern Ireland results\nconst removeNonEngland = (results) => {\n  return results.filter(r => r.GAZETTEER_ENTRY.COUNTRY.toLowerCase() === 'england')\n}\n\n// Remove duplicates (OS API bug?) eg: 'Newcastle upon Tyne'\nconst removeDuplicates = (results) => {\n  return Array.from(new Map(results.map(result => [result.GAZETTEER_ENTRY.ID, result])).values())\n}\n\n// Remove any item that doesnt contain a part of the query in name1\nconst removeTenuousResults = (results, query) => {\n  const words = query.toLowerCase().replace(/,/g, '').split(' ')\n  return results.filter(l => words.some(w => l.GAZETTEER_ENTRY.NAME1.toLowerCase().includes(w)))\n}\n\n// Mark search charcaters in result\nconst markString = (string, find) => {\n  find = find.replace(/,/g, '')\n  const patterns = [...new Set([find, ...find.trim().split(/[stn]+/)])].join('|')\n  const reg = new RegExp(`(${patterns})`, 'i', 'g', 'gi')\n  return { __html: string.replace(reg, '<mark>$1</mark>') }\n}\n\nconst place = ({ ID, NAME1, MBR_XMIN, MBR_YMIN, MBR_XMAX, MBR_YMAX, GEOMETRY_X, GEOMETRY_Y }) => {\n  const bounds = MBR_XMIN\n    ? [\n        (new OsGridRef(MBR_XMIN, MBR_YMIN)).toLatLon().lon,\n        (new OsGridRef(MBR_XMIN, MBR_YMIN)).toLatLon().lat,\n        (new OsGridRef(MBR_XMAX, MBR_YMAX)).toLatLon().lon,\n        (new OsGridRef(MBR_XMAX, MBR_YMAX)).toLatLon().lat]\n        .map(n => Math.round(n * 1000000) / 1000000)\n    : [\n        (new OsGridRef(GEOMETRY_X - config.POINT_BUFFER, GEOMETRY_Y - config.POINT_BUFFER)).toLatLon().lon,\n        (new OsGridRef(GEOMETRY_X - config.POINT_BUFFER, GEOMETRY_Y - config.POINT_BUFFER)).toLatLon().lat,\n        (new OsGridRef(GEOMETRY_X + config.POINT_BUFFER, GEOMETRY_Y + config.POINT_BUFFER)).toLatLon().lon,\n        (new OsGridRef(GEOMETRY_X + config.POINT_BUFFER, GEOMETRY_Y + config.POINT_BUFFER)).toLatLon().lat]\n        .map(n => Math.round(n * 1000000) / 1000000)\n  const center = GEOMETRY_X\n    ? [(new OsGridRef(GEOMETRY_X, GEOMETRY_Y)).toLatLon().lon,\n        (new OsGridRef(GEOMETRY_X, GEOMETRY_Y)).toLatLon().lat]\n        .map(n => Math.round(n * 1000000) / 1000000)\n    : null\n\n  return {\n    id: ID,\n    text: NAME1,\n    bounds,\n    center\n  }\n}\n\nconst suggestion = (query, { ID, NAME1, COUNTY_UNITARY, DISTRICT_BOROUGH, POSTCODE_DISTRICT, LOCAL_TYPE }) => {\n  const qualifier = `${!['City', 'Postcode'].includes(LOCAL_TYPE) ? POSTCODE_DISTRICT + ', ' : ''}${LOCAL_TYPE !== 'City' ? (COUNTY_UNITARY || DISTRICT_BOROUGH) : ''}`\n  const text = `${NAME1}${qualifier ? ', ' + qualifier : ''}`\n\n  return {\n    id: ID,\n    text: `${NAME1}${qualifier ? ', ' + qualifier : ''}`,\n    marked: markString(text, query)\n  }\n}\n\nconst parseResults = async (query, transformGeocodeRequest) => {\n  if (!query) {\n    return []\n  }\n  let url = config.URL\n  url = url.replace('{query}', encodeURI(query)).replace('{maxresults}', isPostcode(query) ? 1 : 100)\n  let results = []\n  try {\n    const response = await fetch(await transformGeocodeRequest(url))\n    const json = await response.json()\n    if (json.error || json.header.totalresults === 0) {\n      return []\n    }\n    results = removeTenuousResults(json.results, query)\n    results = removeDuplicates(results)\n    results = removeNonEngland(results)\n    results = results.slice(0, 8)\n  } catch (err) {\n    console.log(err)\n  }\n  return results\n}\n\nclass Geocode {\n  constructor (transformGeocodeRequest = (u) => u) {\n    this.transformGeocodeRequest = transformGeocodeRequest\n  }\n\n  async suggest (query) {\n    if (!query) {\n      return []\n    }\n    const results = await parseResults(query, this.transformGeocodeRequest)\n    return results.map(l => suggestion(query, l.GAZETTEER_ENTRY))\n  }\n\n  async find (query) {\n    if (!query) {\n      return null\n    }\n    const results = await parseResults(query, this.transformGeocodeRequest)\n    return results.length ? place(results[0].GAZETTEER_ENTRY) : null\n  }\n}\n\nexport default Geocode\n"],"names":["earthRadius","factors","centimeters","centimetres","degrees","Math","PI","feet","inches","kilometers","kilometres","meters","metres","miles","millimeters","millimetres","nauticalmiles","radians","yards","feature","geom","properties","options","feat","type","id","bbox","geometry","point","coordinates","Error","Array","isArray","length","isNumber","polygon","ring","j","lineString","multiLineString","multiPolygon","radiansToLength","units","factor","lengthToRadians","distance","radiansToDegrees","degreesToRadians","num","isNaN","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","_defineProperties","_toPropertyKey","key","toPrimitive","String","_toPrimitive","ReverseGeocode","transformGeocodeRequest","arguments","undefined","_classCallCheck","this","_callee","zoom","coord","bng","url","response","json","_context","detectCoordinateType","LatLon","toOsGrid","easting","northing","t0","console","log","config","replace","round","t1","fetch","t2","results","NAME1","POPULATED_PLACE","COUNTY_UNITARY","REGION","_ref","GAZETTEER_ENTRY","concat","_getNearest","apply","_next","_throw","_x","_x2","dmsSeparator","Dms","separator","char","parse","dms","parseFloat","isFinite","Number","dmsParts","trim","split","splice","NaN","deg","test","toDms","format","dp","Infinity","abs","m","toFixed","floor","toLat","lat","wrap90","toLon","lon","wrap180","toBrng","brng","wrap360","fromLocale","str","locale","toLocaleString","thousands","decimal","toLocale","compassPoint","bearing","precision","includes","RangeError","x","toRadians","toDegrees","Vector3d","z","sqrt","plus","minus","times","dividedBy","dot","cross","negate","unit","norm","angleTo","sign","atan2","rotateAround","axis","angle","sin","cos","rp","toString","ellipsoids","WGS84","b","datums","ellipsoid","freeze","LatLonEllipsoidal","height","_lat","_lon","_height","latitude","lng","longitude","datum","_datum","args","ll","JSON","stringify","toCartesian","referenceFrame","eSq","Cartesian","equals","EPSILON","epoch","dpHeight","super","toLatLon","e2","Airy1830","AiryModified","Bessel1841","Clarke1866","Clarke1880IGN","GRS80","Intl1924","WGS72","ED50","transform","ETRS89","Irl1975","NAD27","NAD83","NTF","OSGB36","Potsdam","TokyoJapan","LatLonEllipsoidal_Datum","convertDatum","toDatum","cartesian","Cartesian_Datum","deprecatedDatum","info","latLon","oldCartesian","map","newCartesian","applyTransform","x1","y1","z1","tx","ty","tz","rx","ry","rz","nationalGrid","trueOrigin","falseOrigin","scaleFactor","OsGridRef","E","N","E0","N0","F0","n2","n3","M","pow","tan","dE","dE2","dE3","dE4","dE5","LatLon_OsGridRef","gridref","match","l1","toUpperCase","charCodeAt","l2","e100km","n100km","en","padEnd","digits","useGrouping","minimumIntegerDigits","maximumFractionDigits","letterPair","fromCharCode","padStart","message","osgbED","getCoord","getGeom","geojson","from","to","coordinates1","coordinates2","dLat","dLon","lat1","lat2","getUnits","RATIO","getOffsetBoundingClientRect","el","closest","document","body","getBoundingClientRect","parseDimensions","dimensions","area","areaDisplay","SQ_KM","km2","minimumFractionDigits","ceil","squareMetresToKm","lengthDisplay","MILE","YARD","pluralize","singular","plural","remainder","metresToImperial","_objectSpread","coords","_coords","_slicedToArray","getDistance","coord1","coord2","p1","TurfPoint","p2","turfDistance","getFocusPadding","scale","padding","parent","box","boxX","left","boxY","top","parentX","parentY","right","width","bottom","every","getFocusBounds","bounds","getMapPixel","getDescription","place","features","featuresTotal","isFeaturesInMap","isPixelFeaturesAtPixel","isPixelFeaturesInMap","text","focusPlace","focusArea","ew","ns","getArea","findPlace","getStatus","action","isBoundsChange","state","current","featuresInViewport","total","index","center","isMaxZoom","isMinZoom","label","selectedId","status","findIndex","direction","oCentre","originalZoom","isSameCentre","isSameZoom","maxZoom","minZoom","change","ns1","ns2","ew1","ew2","nsd","ewd","filter","getBearing","ewc","join","nsc","getDirection","getBoundsChange","description","getPlace","isUserInitiated","oPlace","newPlace","parseCentre","srid","_coords2","mb","defaults","some","parseZoom","getShortcutKey","featuresViewport","number","code","getFeatureShape","_feature$geometry","_geometry$coordinates","_coordinates$","_coordinates$2","minDist","maxDist","minEdge","maxEdge","_coordinates$i","xA","yA","_coordinates","xB","yB","dist","hypot","min","max","edgeDist","tolerance","isCirclePolygon","toLowerCase","_feature$geometry2","flatCoords","Set","flat","spatialNavigate","start","pixels","quadrant","offsetX","offsetY","distances","indexOf","getScale","size","small","medium","large","getPoint","_el$getBoundingClient","_e$nativeEvent","nativeEvent","clientX","clientY","getStyle","validStyles","STYLES","style","window","localStorage","getItem","find","_asyncToGenerator","_toConsumableArray","_arrayLikeToArray","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","removeNonEngland","COUNTRY","removeDuplicates","Map","result","ID","removeTenuousResults","query","words","w","markString","string","patterns","reg","RegExp","__html","suggestion","_ref2","DISTRICT_BOROUGH","POSTCODE_DISTRICT","LOCAL_TYPE","qualifier","marked","parseResults","_ref3","encodeURI","error","header","totalresults","Geocode","_suggest","_callee2","_context2","_x3","_find","_callee3","_context3","MBR_XMIN","MBR_YMIN","MBR_XMAX","MBR_YMAX","GEOMETRY_X","GEOMETRY_Y","_x4"],"sourceRoot":""}