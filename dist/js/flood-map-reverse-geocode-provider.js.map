{"version":3,"file":"flood-map-reverse-geocode-provider.js","mappings":"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","sources":["webpack://defra/./node_modules/@turf/helpers/dist/esm/index.js","webpack://defra/./node_modules/geodesy/dms.js","webpack://defra/./node_modules/geodesy/vector3d.js","webpack://defra/./node_modules/geodesy/latlon-ellipsoidal.js","webpack://defra/./node_modules/geodesy/latlon-ellipsoidal-datum.js","webpack://defra/./node_modules/geodesy/osgridref.js","webpack://defra/./node_modules/@turf/invariant/dist/esm/index.js","webpack://defra/./node_modules/@turf/distance/dist/esm/index.js","webpack://defra/./src/js/lib/viewport.js","webpack://defra/./src/js/provider/os-open-names-reverse/reverse-geocode.js"],"sourcesContent":["// index.ts\nvar earthRadius = 63710088e-1;\nvar factors = {\n  centimeters: earthRadius * 100,\n  centimetres: earthRadius * 100,\n  degrees: 360 / (2 * Math.PI),\n  feet: earthRadius * 3.28084,\n  inches: earthRadius * 39.37,\n  kilometers: earthRadius / 1e3,\n  kilometres: earthRadius / 1e3,\n  meters: earthRadius,\n  metres: earthRadius,\n  miles: earthRadius / 1609.344,\n  millimeters: earthRadius * 1e3,\n  millimetres: earthRadius * 1e3,\n  nauticalmiles: earthRadius / 1852,\n  radians: 1,\n  yards: earthRadius * 1.0936\n};\nvar areaFactors = {\n  acres: 247105e-9,\n  centimeters: 1e4,\n  centimetres: 1e4,\n  feet: 10.763910417,\n  hectares: 1e-4,\n  inches: 1550.003100006,\n  kilometers: 1e-6,\n  kilometres: 1e-6,\n  meters: 1,\n  metres: 1,\n  miles: 386e-9,\n  nauticalmiles: 29155334959812285e-23,\n  millimeters: 1e6,\n  millimetres: 1e6,\n  yards: 1.195990046\n};\nfunction feature(geom, properties, options = {}) {\n  const feat = { type: \"Feature\" };\n  if (options.id === 0 || options.id) {\n    feat.id = options.id;\n  }\n  if (options.bbox) {\n    feat.bbox = options.bbox;\n  }\n  feat.properties = properties || {};\n  feat.geometry = geom;\n  return feat;\n}\nfunction geometry(type, coordinates, _options = {}) {\n  switch (type) {\n    case \"Point\":\n      return point(coordinates).geometry;\n    case \"LineString\":\n      return lineString(coordinates).geometry;\n    case \"Polygon\":\n      return polygon(coordinates).geometry;\n    case \"MultiPoint\":\n      return multiPoint(coordinates).geometry;\n    case \"MultiLineString\":\n      return multiLineString(coordinates).geometry;\n    case \"MultiPolygon\":\n      return multiPolygon(coordinates).geometry;\n    default:\n      throw new Error(type + \" is invalid\");\n  }\n}\nfunction point(coordinates, properties, options = {}) {\n  if (!coordinates) {\n    throw new Error(\"coordinates is required\");\n  }\n  if (!Array.isArray(coordinates)) {\n    throw new Error(\"coordinates must be an Array\");\n  }\n  if (coordinates.length < 2) {\n    throw new Error(\"coordinates must be at least 2 numbers long\");\n  }\n  if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n    throw new Error(\"coordinates must contain numbers\");\n  }\n  const geom = {\n    type: \"Point\",\n    coordinates\n  };\n  return feature(geom, properties, options);\n}\nfunction points(coordinates, properties, options = {}) {\n  return featureCollection(\n    coordinates.map((coords) => {\n      return point(coords, properties);\n    }),\n    options\n  );\n}\nfunction polygon(coordinates, properties, options = {}) {\n  for (const ring of coordinates) {\n    if (ring.length < 4) {\n      throw new Error(\n        \"Each LinearRing of a Polygon must have 4 or more Positions.\"\n      );\n    }\n    if (ring[ring.length - 1].length !== ring[0].length) {\n      throw new Error(\"First and last Position are not equivalent.\");\n    }\n    for (let j = 0; j < ring[ring.length - 1].length; j++) {\n      if (ring[ring.length - 1][j] !== ring[0][j]) {\n        throw new Error(\"First and last Position are not equivalent.\");\n      }\n    }\n  }\n  const geom = {\n    type: \"Polygon\",\n    coordinates\n  };\n  return feature(geom, properties, options);\n}\nfunction polygons(coordinates, properties, options = {}) {\n  return featureCollection(\n    coordinates.map((coords) => {\n      return polygon(coords, properties);\n    }),\n    options\n  );\n}\nfunction lineString(coordinates, properties, options = {}) {\n  if (coordinates.length < 2) {\n    throw new Error(\"coordinates must be an array of two or more positions\");\n  }\n  const geom = {\n    type: \"LineString\",\n    coordinates\n  };\n  return feature(geom, properties, options);\n}\nfunction lineStrings(coordinates, properties, options = {}) {\n  return featureCollection(\n    coordinates.map((coords) => {\n      return lineString(coords, properties);\n    }),\n    options\n  );\n}\nfunction featureCollection(features, options = {}) {\n  const fc = { type: \"FeatureCollection\" };\n  if (options.id) {\n    fc.id = options.id;\n  }\n  if (options.bbox) {\n    fc.bbox = options.bbox;\n  }\n  fc.features = features;\n  return fc;\n}\nfunction multiLineString(coordinates, properties, options = {}) {\n  const geom = {\n    type: \"MultiLineString\",\n    coordinates\n  };\n  return feature(geom, properties, options);\n}\nfunction multiPoint(coordinates, properties, options = {}) {\n  const geom = {\n    type: \"MultiPoint\",\n    coordinates\n  };\n  return feature(geom, properties, options);\n}\nfunction multiPolygon(coordinates, properties, options = {}) {\n  const geom = {\n    type: \"MultiPolygon\",\n    coordinates\n  };\n  return feature(geom, properties, options);\n}\nfunction geometryCollection(geometries, properties, options = {}) {\n  const geom = {\n    type: \"GeometryCollection\",\n    geometries\n  };\n  return feature(geom, properties, options);\n}\nfunction round(num, precision = 0) {\n  if (precision && !(precision >= 0)) {\n    throw new Error(\"precision must be a positive number\");\n  }\n  const multiplier = Math.pow(10, precision || 0);\n  return Math.round(num * multiplier) / multiplier;\n}\nfunction radiansToLength(radians, units = \"kilometers\") {\n  const factor = factors[units];\n  if (!factor) {\n    throw new Error(units + \" units is invalid\");\n  }\n  return radians * factor;\n}\nfunction lengthToRadians(distance, units = \"kilometers\") {\n  const factor = factors[units];\n  if (!factor) {\n    throw new Error(units + \" units is invalid\");\n  }\n  return distance / factor;\n}\nfunction lengthToDegrees(distance, units) {\n  return radiansToDegrees(lengthToRadians(distance, units));\n}\nfunction bearingToAzimuth(bearing) {\n  let angle = bearing % 360;\n  if (angle < 0) {\n    angle += 360;\n  }\n  return angle;\n}\nfunction azimuthToBearing(angle) {\n  angle = angle % 360;\n  if (angle > 180) {\n    return angle - 360;\n  } else if (angle < -180) {\n    return angle + 360;\n  }\n  return angle;\n}\nfunction radiansToDegrees(radians) {\n  const normalisedRadians = radians % (2 * Math.PI);\n  return normalisedRadians * 180 / Math.PI;\n}\nfunction degreesToRadians(degrees) {\n  const normalisedDegrees = degrees % 360;\n  return normalisedDegrees * Math.PI / 180;\n}\nfunction convertLength(length, originalUnit = \"kilometers\", finalUnit = \"kilometers\") {\n  if (!(length >= 0)) {\n    throw new Error(\"length must be a positive number\");\n  }\n  return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nfunction convertArea(area, originalUnit = \"meters\", finalUnit = \"kilometers\") {\n  if (!(area >= 0)) {\n    throw new Error(\"area must be a positive number\");\n  }\n  const startFactor = areaFactors[originalUnit];\n  if (!startFactor) {\n    throw new Error(\"invalid original units\");\n  }\n  const finalFactor = areaFactors[finalUnit];\n  if (!finalFactor) {\n    throw new Error(\"invalid final units\");\n  }\n  return area / startFactor * finalFactor;\n}\nfunction isNumber(num) {\n  return !isNaN(num) && num !== null && !Array.isArray(num);\n}\nfunction isObject(input) {\n  return input !== null && typeof input === \"object\" && !Array.isArray(input);\n}\nfunction validateBBox(bbox) {\n  if (!bbox) {\n    throw new Error(\"bbox is required\");\n  }\n  if (!Array.isArray(bbox)) {\n    throw new Error(\"bbox must be an Array\");\n  }\n  if (bbox.length !== 4 && bbox.length !== 6) {\n    throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n  }\n  bbox.forEach((num) => {\n    if (!isNumber(num)) {\n      throw new Error(\"bbox must only contain numbers\");\n    }\n  });\n}\nfunction validateId(id) {\n  if (!id) {\n    throw new Error(\"id is required\");\n  }\n  if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n    throw new Error(\"id must be a number or a string\");\n  }\n}\nexport {\n  areaFactors,\n  azimuthToBearing,\n  bearingToAzimuth,\n  convertArea,\n  convertLength,\n  degreesToRadians,\n  earthRadius,\n  factors,\n  feature,\n  featureCollection,\n  geometry,\n  geometryCollection,\n  isNumber,\n  isObject,\n  lengthToDegrees,\n  lengthToRadians,\n  lineString,\n  lineStrings,\n  multiLineString,\n  multiPoint,\n  multiPolygon,\n  point,\n  points,\n  polygon,\n  polygons,\n  radiansToDegrees,\n  radiansToLength,\n  round,\n  validateBBox,\n  validateId\n};\n//# sourceMappingURL=index.js.map","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Geodesy representation conversion functions                        (c) Chris Veness 2002-2020  */\n/*                                                                                   MIT Licence  */\n/* www.movable-type.co.uk/scripts/latlong.html                                                    */\n/* www.movable-type.co.uk/scripts/js/geodesy/geodesy-library.html#dms                             */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n/* eslint no-irregular-whitespace: [2, { skipComments: true }] */\n\n\n/**\n * Latitude/longitude points may be represented as decimal degrees, or subdivided into sexagesimal\n * minutes and seconds. This module provides methods for parsing and representing degrees / minutes\n * / seconds.\n *\n * @module dms\n */\n\n\n/* Degree-minutes-seconds (& cardinal directions) separator character */\nlet dmsSeparator = '\\u202f'; // U+202F = 'narrow no-break space'\n\n\n/**\n * Functions for parsing and representing degrees / minutes / seconds.\n */\nclass Dms {\n\n    // note Unicode Degree = U+00B0. Prime = U+2032, Double prime = U+2033\n\n    /**\n     * Separator character to be used to separate degrees, minutes, seconds, and cardinal directions.\n     *\n     * Default separator is U+202F ‘narrow no-break space’.\n     *\n     * To change this (e.g. to empty string or full space), set Dms.separator prior to invoking\n     * formatting.\n     *\n     * @example\n     *   import LatLon, { Dms } from '/js/geodesy/latlon-spherical.js';\n     *   const p = new LatLon(51.2, 0.33).toString('dms');  // 51° 12′ 00″ N, 000° 19′ 48″ E\n     *   Dms.separator = '';                                // no separator\n     *   const pʹ = new LatLon(51.2, 0.33).toString('dms'); // 51°12′00″N, 000°19′48″E\n     */\n    static get separator()     { return dmsSeparator; }\n    static set separator(char) { dmsSeparator = char; }\n\n\n    /**\n     * Parses string representing degrees/minutes/seconds into numeric degrees.\n     *\n     * This is very flexible on formats, allowing signed decimal degrees, or deg-min-sec optionally\n     * suffixed by compass direction (NSEW); a variety of separators are accepted. Examples -3.62,\n     * '3 37 12W', '3°37′12″W'.\n     *\n     * Thousands/decimal separators must be comma/dot; use Dms.fromLocale to convert locale-specific\n     * thousands/decimal separators.\n     *\n     * @param   {string|number} dms - Degrees or deg/min/sec in variety of formats.\n     * @returns {number}        Degrees as decimal number.\n     *\n     * @example\n     *   const lat = Dms.parse('51° 28′ 40.37″ N');\n     *   const lon = Dms.parse('000° 00′ 05.29″ W');\n     *   const p1 = new LatLon(lat, lon); // 51.4779°N, 000.0015°W\n     */\n    static parse(dms) {\n        // check for signed decimal degrees without NSEW, if so return it directly\n        if (!isNaN(parseFloat(dms)) && isFinite(dms)) return Number(dms);\n\n        // strip off any sign or compass dir'n & split out separate d/m/s\n        const dmsParts = String(dms).trim().replace(/^-/, '').replace(/[NSEW]$/i, '').split(/[^0-9.,]+/);\n        if (dmsParts[dmsParts.length-1]=='') dmsParts.splice(dmsParts.length-1);  // from trailing symbol\n\n        if (dmsParts == '') return NaN;\n\n        // and convert to decimal degrees...\n        let deg = null;\n        switch (dmsParts.length) {\n            case 3:  // interpret 3-part result as d/m/s\n                deg = dmsParts[0]/1 + dmsParts[1]/60 + dmsParts[2]/3600;\n                break;\n            case 2:  // interpret 2-part result as d/m\n                deg = dmsParts[0]/1 + dmsParts[1]/60;\n                break;\n            case 1:  // just d (possibly decimal) or non-separated dddmmss\n                deg = dmsParts[0];\n                // check for fixed-width unseparated format eg 0033709W\n                //if (/[NS]/i.test(dmsParts)) deg = '0' + deg;  // - normalise N/S to 3-digit degrees\n                //if (/[0-9]{7}/.test(deg)) deg = deg.slice(0,3)/1 + deg.slice(3,5)/60 + deg.slice(5)/3600;\n                break;\n            default:\n                return NaN;\n        }\n        if (/^-|[WS]$/i.test(dms.trim())) deg = -deg; // take '-', west and south as -ve\n\n        return Number(deg);\n    }\n\n\n    /**\n     * Converts decimal degrees to deg/min/sec format\n     *  - degree, prime, double-prime symbols are added, but sign is discarded, though no compass\n     *    direction is added.\n     *  - degrees are zero-padded to 3 digits; for degrees latitude, use .slice(1) to remove leading\n     *    zero.\n     *\n     * @private\n     * @param   {number} deg - Degrees to be formatted as specified.\n     * @param   {string} [format=d] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.\n     * @param   {number} [dp=4|2|0] - Number of decimal places to use – default 4 for d, 2 for dm, 0 for dms.\n     * @returns {string} Degrees formatted as deg/min/secs according to specified format.\n     */\n    static toDms(deg, format='d', dp=undefined) {\n        if (isNaN(deg)) return null;  // give up here if we can't make a number from deg\n        if (typeof deg == 'string' && deg.trim() == '') return null;\n        if (typeof deg == 'boolean') return null;\n        if (deg == Infinity) return null;\n        if (deg == null) return null;\n\n        // default values\n        if (dp === undefined) {\n            switch (format) {\n                case 'd':   case 'deg':         dp = 4; break;\n                case 'dm':  case 'deg+min':     dp = 2; break;\n                case 'dms': case 'deg+min+sec': dp = 0; break;\n                default:          format = 'd'; dp = 4; break; // be forgiving on invalid format\n            }\n        }\n\n        deg = Math.abs(deg);  // (unsigned result ready for appending compass dir'n)\n\n        let dms = null, d = null, m = null, s = null;\n        switch (format) {\n            default: // invalid format spec!\n            case 'd': case 'deg':\n                d = deg.toFixed(dp);                       // round/right-pad degrees\n                if (d<100) d = '0' + d;                    // left-pad with leading zeros (note may include decimals)\n                if (d<10) d = '0' + d;\n                dms = d + '°';\n                break;\n            case 'dm': case 'deg+min':\n                d = Math.floor(deg);                       // get component deg\n                m = ((deg*60) % 60).toFixed(dp);           // get component min & round/right-pad\n                if (m == 60) { m = (0).toFixed(dp); d++; } // check for rounding up\n                d = ('000'+d).slice(-3);                   // left-pad with leading zeros\n                if (m<10) m = '0' + m;                     // left-pad with leading zeros (note may include decimals)\n                dms = d + '°'+Dms.separator + m + '′';\n                break;\n            case 'dms': case 'deg+min+sec':\n                d = Math.floor(deg);                       // get component deg\n                m = Math.floor((deg*3600)/60) % 60;        // get component min\n                s = (deg*3600 % 60).toFixed(dp);           // get component sec & round/right-pad\n                if (s == 60) { s = (0).toFixed(dp); m++; } // check for rounding up\n                if (m == 60) { m = 0; d++; }               // check for rounding up\n                d = ('000'+d).slice(-3);                   // left-pad with leading zeros\n                m = ('00'+m).slice(-2);                    // left-pad with leading zeros\n                if (s<10) s = '0' + s;                     // left-pad with leading zeros (note may include decimals)\n                dms = d + '°'+Dms.separator + m + '′'+Dms.separator + s + '″';\n                break;\n        }\n\n        return dms;\n    }\n\n\n    /**\n     * Converts numeric degrees to deg/min/sec latitude (2-digit degrees, suffixed with N/S).\n     *\n     * @param   {number} deg - Degrees to be formatted as specified.\n     * @param   {string} [format=d] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.\n     * @param   {number} [dp=4|2|0] - Number of decimal places to use – default 4 for d, 2 for dm, 0 for dms.\n     * @returns {string} Degrees formatted as deg/min/secs according to specified format.\n     *\n     * @example\n     *   const lat = Dms.toLat(-3.62, 'dms'); // 3°37′12″S\n     */\n    static toLat(deg, format, dp) {\n        const lat = Dms.toDms(Dms.wrap90(deg), format, dp);\n        return lat===null ? '–' : lat.slice(1) + Dms.separator + (deg<0 ? 'S' : 'N');  // knock off initial '0' for lat!\n    }\n\n\n    /**\n     * Convert numeric degrees to deg/min/sec longitude (3-digit degrees, suffixed with E/W).\n     *\n     * @param   {number} deg - Degrees to be formatted as specified.\n     * @param   {string} [format=d] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.\n     * @param   {number} [dp=4|2|0] - Number of decimal places to use – default 4 for d, 2 for dm, 0 for dms.\n     * @returns {string} Degrees formatted as deg/min/secs according to specified format.\n     *\n     * @example\n     *   const lon = Dms.toLon(-3.62, 'dms'); // 3°37′12″W\n     */\n    static toLon(deg, format, dp) {\n        const lon = Dms.toDms(Dms.wrap180(deg), format, dp);\n        return lon===null ? '–' : lon + Dms.separator + (deg<0 ? 'W' : 'E');\n    }\n\n\n    /**\n     * Converts numeric degrees to deg/min/sec as a bearing (0°..360°).\n     *\n     * @param   {number} deg - Degrees to be formatted as specified.\n     * @param   {string} [format=d] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.\n     * @param   {number} [dp=4|2|0] - Number of decimal places to use – default 4 for d, 2 for dm, 0 for dms.\n     * @returns {string} Degrees formatted as deg/min/secs according to specified format.\n     *\n     * @example\n     *   const lon = Dms.toBrng(-3.62, 'dms'); // 356°22′48″\n     */\n    static toBrng(deg, format, dp) {\n        const brng =  Dms.toDms(Dms.wrap360(deg), format, dp);\n        return brng===null ? '–' : brng.replace('360', '0');  // just in case rounding took us up to 360°!\n    }\n\n\n    /**\n     * Converts DMS string from locale thousands/decimal separators to JavaScript comma/dot separators\n     * for subsequent parsing.\n     *\n     * Both thousands and decimal separators must be followed by a numeric character, to facilitate\n     * parsing of single lat/long string (in which whitespace must be left after the comma separator).\n     *\n     * @param   {string} str - Degrees/minutes/seconds formatted with locale separators.\n     * @returns {string} Degrees/minutes/seconds formatted with standard Javascript separators.\n     *\n     * @example\n     *   const lat = Dms.fromLocale('51°28′40,12″N');                          // '51°28′40.12″N' in France\n     *   const p = new LatLon(Dms.fromLocale('51°28′40,37″N, 000°00′05,29″W'); // '51.4779°N, 000.0015°W' in France\n     */\n    static fromLocale(str) {\n        const locale = (123456.789).toLocaleString();\n        const separator = { thousands: locale.slice(3, 4), decimal: locale.slice(7, 8) };\n        return str.replace(separator.thousands, '⁜').replace(separator.decimal, '.').replace('⁜', ',');\n    }\n\n\n    /**\n     * Converts DMS string from JavaScript comma/dot thousands/decimal separators to locale separators.\n     *\n     * Can also be used to format standard numbers such as distances.\n     *\n     * @param   {string} str - Degrees/minutes/seconds formatted with standard Javascript separators.\n     * @returns {string} Degrees/minutes/seconds formatted with locale separators.\n     *\n     * @example\n     *   const Dms.toLocale('123,456.789');                   // '123.456,789' in France\n     *   const Dms.toLocale('51°28′40.12″N, 000°00′05.31″W'); // '51°28′40,12″N, 000°00′05,31″W' in France\n     */\n    static toLocale(str) {\n        const locale = (123456.789).toLocaleString();\n        const separator = { thousands: locale.slice(3, 4), decimal: locale.slice(7, 8) };\n        return str.replace(/,([0-9])/, '⁜$1').replace('.', separator.decimal).replace('⁜', separator.thousands);\n    }\n\n\n    /**\n     * Returns compass point (to given precision) for supplied bearing.\n     *\n     * @param   {number} bearing - Bearing in degrees from north.\n     * @param   {number} [precision=3] - Precision (1:cardinal / 2:intercardinal / 3:secondary-intercardinal).\n     * @returns {string} Compass point for supplied bearing.\n     *\n     * @example\n     *   const point = Dms.compassPoint(24);    // point = 'NNE'\n     *   const point = Dms.compassPoint(24, 1); // point = 'N'\n     */\n    static compassPoint(bearing, precision=3) {\n        if (![ 1, 2, 3 ].includes(Number(precision))) throw new RangeError(`invalid precision ‘${precision}’`);\n        // note precision could be extended to 4 for quarter-winds (eg NbNW), but I think they are little used\n\n        bearing = Dms.wrap360(bearing); // normalise to range 0..360°\n\n        const cardinals = [\n            'N', 'NNE', 'NE', 'ENE',\n            'E', 'ESE', 'SE', 'SSE',\n            'S', 'SSW', 'SW', 'WSW',\n            'W', 'WNW', 'NW', 'NNW' ];\n        const n = 4 * 2**(precision-1); // no of compass points at req’d precision (1=>4, 2=>8, 3=>16)\n        const cardinal = cardinals[Math.round(bearing*n/360)%n * 16/n];\n\n        return cardinal;\n    }\n\n\n    /**\n     * Constrain degrees to range -90..+90 (for latitude); e.g. -91 => -89, 91 => 89.\n     *\n     * @private\n     * @param {number} degrees\n     * @returns degrees within range -90..+90.\n     */\n    static wrap90(degrees) {\n        if (-90<=degrees && degrees<=90) return degrees; // avoid rounding due to arithmetic ops if within range\n\n        // latitude wrapping requires a triangle wave function; a general triangle wave is\n        //     f(x) = 4a/p ⋅ | (x-p/4)%p - p/2 | - a\n        // where a = amplitude, p = period, % = modulo; however, JavaScript '%' is a remainder operator\n        // not a modulo operator - for modulo, replace 'x%n' with '((x%n)+n)%n'\n        const x = degrees, a = 90, p = 360;\n        return 4*a/p * Math.abs((((x-p/4)%p)+p)%p - p/2) - a;\n    }\n\n    /**\n     * Constrain degrees to range -180..+180 (for longitude); e.g. -181 => 179, 181 => -179.\n     *\n     * @private\n     * @param {number} degrees\n     * @returns degrees within range -180..+180.\n     */\n    static wrap180(degrees) {\n        if (-180<=degrees && degrees<=180) return degrees; // avoid rounding due to arithmetic ops if within range\n\n        // longitude wrapping requires a sawtooth wave function; a general sawtooth wave is\n        //     f(x) = (2ax/p - p/2) % p - a\n        // where a = amplitude, p = period, % = modulo; however, JavaScript '%' is a remainder operator\n        // not a modulo operator - for modulo, replace 'x%n' with '((x%n)+n)%n'\n        const x = degrees, a = 180, p = 360;\n        return (((2*a*x/p - p/2)%p)+p)%p - a;\n    }\n\n    /**\n     * Constrain degrees to range 0..360 (for bearings); e.g. -1 => 359, 361 => 1.\n     *\n     * @private\n     * @param {number} degrees\n     * @returns degrees within range 0..360.\n     */\n    static wrap360(degrees) {\n        if (0<=degrees && degrees<360) return degrees; // avoid rounding due to arithmetic ops if within range\n\n        // bearing wrapping requires a sawtooth wave function with a vertical offset equal to the\n        // amplitude and a corresponding phase shift; this changes the general sawtooth wave function from\n        //     f(x) = (2ax/p - p/2) % p - a\n        // to\n        //     f(x) = (2ax/p) % p\n        // where a = amplitude, p = period, % = modulo; however, JavaScript '%' is a remainder operator\n        // not a modulo operator - for modulo, replace 'x%n' with '((x%n)+n)%n'\n        const x = degrees, a = 180, p = 360;\n        return (((2*a*x/p)%p)+p)%p;\n    }\n\n}\n\n\n// Extend Number object with methods to convert between degrees & radians\nNumber.prototype.toRadians = function() { return this * Math.PI / 180; };\nNumber.prototype.toDegrees = function() { return this * 180 / Math.PI; };\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport default Dms;\n","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Vector handling functions                                          (c) Chris Veness 2011-2019  */\n/*                                                                                   MIT Licence  */\n/* www.movable-type.co.uk/scripts/geodesy-library.html#vector3d                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n\n/**\n * Library of 3-d vector manipulation routines.\n *\n * @module vector3d\n */\n\n\n/* Vector3d - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\n/**\n * Functions for manipulating generic 3-d vectors.\n *\n * Functions return vectors as return results, so that operations can be chained.\n *\n * @example\n *   const v = v1.cross(v2).dot(v3) // ≡ v1×v2⋅v3\n */\nclass Vector3d {\n\n    /**\n     * Creates a 3-d vector.\n     *\n     * @param {number} x - X component of vector.\n     * @param {number} y - Y component of vector.\n     * @param {number} z - Z component of vector.\n     *\n     * @example\n     *   import Vector3d from '/js/geodesy/vector3d.js';\n     *   const v = new Vector3d(0.267, 0.535, 0.802);\n     */\n    constructor(x, y, z) {\n        if (isNaN(x) || isNaN(y) || isNaN(z)) throw new TypeError(`invalid vector [${x},${y},${z}]`);\n\n        this.x = Number(x);\n        this.y = Number(y);\n        this.z = Number(z);\n    }\n\n\n    /**\n     * Length (magnitude or norm) of ‘this’ vector.\n     *\n     * @returns {number} Magnitude of this vector.\n     */\n    get length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    /**\n     * Adds supplied vector to ‘this’ vector.\n     *\n     * @param   {Vector3d} v - Vector to be added to this vector.\n     * @returns {Vector3d} Vector representing sum of this and v.\n     */\n    plus(v) {\n        if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n\n        return new Vector3d(this.x + v.x, this.y + v.y, this.z + v.z);\n    }\n\n\n    /**\n     * Subtracts supplied vector from ‘this’ vector.\n     *\n     * @param   {Vector3d} v - Vector to be subtracted from this vector.\n     * @returns {Vector3d} Vector representing difference between this and v.\n     */\n    minus(v) {\n        if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n\n        return new Vector3d(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n\n\n    /**\n     * Multiplies ‘this’ vector by a scalar value.\n     *\n     * @param   {number}   x - Factor to multiply this vector by.\n     * @returns {Vector3d} Vector scaled by x.\n     */\n    times(x) {\n        if (isNaN(x)) throw new TypeError(`invalid scalar value ‘${x}’`);\n\n        return new Vector3d(this.x * x, this.y * x, this.z * x);\n    }\n\n\n    /**\n     * Divides ‘this’ vector by a scalar value.\n     *\n     * @param   {number}   x - Factor to divide this vector by.\n     * @returns {Vector3d} Vector divided by x.\n     */\n    dividedBy(x) {\n        if (isNaN(x)) throw new TypeError(`invalid scalar value ‘${x}’`);\n\n        return new Vector3d(this.x / x, this.y / x, this.z / x);\n    }\n\n\n    /**\n     * Multiplies ‘this’ vector by the supplied vector using dot (scalar) product.\n     *\n     * @param   {Vector3d} v - Vector to be dotted with this vector.\n     * @returns {number}   Dot product of ‘this’ and v.\n     */\n    dot(v) {\n        if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    }\n\n\n    /**\n     * Multiplies ‘this’ vector by the supplied vector using cross (vector) product.\n     *\n     * @param   {Vector3d} v - Vector to be crossed with this vector.\n     * @returns {Vector3d} Cross product of ‘this’ and v.\n     */\n    cross(v) {\n        if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n\n        const x = this.y * v.z - this.z * v.y;\n        const y = this.z * v.x - this.x * v.z;\n        const z = this.x * v.y - this.y * v.x;\n\n        return new Vector3d(x, y, z);\n    }\n\n\n    /**\n     * Negates a vector to point in the opposite direction.\n     *\n     * @returns {Vector3d} Negated vector.\n     */\n    negate() {\n        return new Vector3d(-this.x, -this.y, -this.z);\n    }\n\n\n    /**\n     * Normalizes a vector to its unit vector\n     * – if the vector is already unit or is zero magnitude, this is a no-op.\n     *\n     * @returns {Vector3d} Normalised version of this vector.\n     */\n    unit() {\n        const norm = this.length;\n        if (norm == 1) return this;\n        if (norm == 0) return this;\n\n        const x = this.x / norm;\n        const y = this.y / norm;\n        const z = this.z / norm;\n\n        return new Vector3d(x, y, z);\n    }\n\n\n    /**\n     * Calculates the angle between ‘this’ vector and supplied vector atan2(|p₁×p₂|, p₁·p₂) (or if\n     * (extra-planar) ‘n’ supplied then atan2(n·p₁×p₂, p₁·p₂).\n     *\n     * @param   {Vector3d} v - Vector whose angle is to be determined from ‘this’ vector.\n     * @param   {Vector3d} [n] - Plane normal: if supplied, angle is signed +ve if this->v is\n     *                     clockwise looking along n, -ve in opposite direction.\n     * @returns {number}   Angle (in radians) between this vector and supplied vector (in range 0..π\n     *                     if n not supplied, range -π..+π if n supplied).\n     */\n    angleTo(v, n=undefined) {\n        if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');\n        if (!(n instanceof Vector3d || n == undefined)) throw new TypeError('n is not Vector3d object');\n\n        // q.v. stackoverflow.com/questions/14066933#answer-16544330, but n·p₁×p₂ is numerically\n        // ill-conditioned, so just calculate sign to apply to |p₁×p₂|\n\n        // if n·p₁×p₂ is -ve, negate |p₁×p₂|\n        const sign = n==undefined || this.cross(v).dot(n)>=0 ? 1 : -1;\n\n        const sinθ = this.cross(v).length * sign;\n        const cosθ = this.dot(v);\n\n        return Math.atan2(sinθ, cosθ);\n    }\n\n\n    /**\n     * Rotates ‘this’ point around an axis by a specified angle.\n     *\n     * @param   {Vector3d} axis - The axis being rotated around.\n     * @param   {number}   angle - The angle of rotation (in degrees).\n     * @returns {Vector3d} The rotated point.\n     */\n    rotateAround(axis, angle) {\n        if (!(axis instanceof Vector3d)) throw new TypeError('axis is not Vector3d object');\n\n        const θ = angle.toRadians();\n\n        // en.wikipedia.org/wiki/Rotation_matrix#Rotation_matrix_from_axis_and_angle\n        // en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Quaternion-derived_rotation_matrix\n        const p = this.unit();\n        const a = axis.unit();\n\n        const s = Math.sin(θ);\n        const c = Math.cos(θ);\n        const t = 1-c;\n        const x = a.x, y = a.y, z = a.z;\n\n        const r = [ // rotation matrix for rotation about supplied axis\n            [ t*x*x + c,   t*x*y - s*z, t*x*z + s*y ],\n            [ t*x*y + s*z, t*y*y + c,   t*y*z - s*x ],\n            [ t*x*z - s*y, t*y*z + s*x, t*z*z + c   ],\n        ];\n\n        // multiply r × p\n        const rp = [\n            r[0][0]*p.x + r[0][1]*p.y + r[0][2]*p.z,\n            r[1][0]*p.x + r[1][1]*p.y + r[1][2]*p.z,\n            r[2][0]*p.x + r[2][1]*p.y + r[2][2]*p.z,\n        ];\n        const p2 = new Vector3d(rp[0], rp[1], rp[2]);\n\n        return p2;\n        // qv en.wikipedia.org/wiki/Rodrigues'_rotation_formula...\n    }\n\n\n    /**\n     * String representation of vector.\n     *\n     * @param   {number} [dp=3] - Number of decimal places to be used.\n     * @returns {string} Vector represented as [x,y,z].\n     */\n    toString(dp=3) {\n        return `[${this.x.toFixed(dp)},${this.y.toFixed(dp)},${this.z.toFixed(dp)}]`;\n    }\n\n}\n\n\n// Extend Number object with methods to convert between degrees & radians\nNumber.prototype.toRadians = function() { return this * Math.PI / 180; };\nNumber.prototype.toDegrees = function() { return this * 180 / Math.PI; };\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport default Vector3d;\n","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Geodesy tools for an ellipsoidal earth model                       (c) Chris Veness 2005-2022  */\n/*                                                                                   MIT Licence  */\n/* Core class for latlon-ellipsoidal-datum & latlon-ellipsoidal-referenceframe.                   */\n/*                                                                                                */\n/* www.movable-type.co.uk/scripts/latlong-convert-coords.html                                     */\n/* www.movable-type.co.uk/scripts/geodesy-library.html#latlon-ellipsoidal                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nimport Dms      from './dms.js';\nimport Vector3d from './vector3d.js';\n\n\n/**\n * A latitude/longitude point defines a geographic location on or above/below the earth’s surface,\n * measured in degrees from the equator & the International Reference Meridian and in metres above\n * the ellipsoid, and based on a given datum.\n *\n * As so much modern geodesy is based on WGS-84 (as used by GPS), this module includes WGS-84\n * ellipsoid parameters, and it has methods for converting geodetic (latitude/longitude) points to/from\n * geocentric cartesian points; the latlon-ellipsoidal-datum and latlon-ellipsoidal-referenceframe\n * modules provide transformation parameters for converting between historical datums and between\n * modern reference frames.\n *\n * This module is used for both trigonometric geodesy (eg latlon-ellipsoidal-vincenty) and n-vector\n * geodesy (eg latlon-nvector-ellipsoidal), and also for UTM/MGRS mapping.\n *\n * @module latlon-ellipsoidal\n */\n\n\n/*\n * Ellipsoid parameters; exposed through static getter below.\n *\n * The only ellipsoid defined is WGS84, for use in utm/mgrs, vincenty, nvector.\n */\nconst ellipsoids = {\n    WGS84: { a: 6378137, b: 6356752.314245, f: 1/298.257223563 },\n};\n\n\n/*\n * Datums; exposed through static getter below.\n *\n * The only datum defined is WGS84, for use in utm/mgrs, vincenty, nvector.\n */\nconst datums = {\n    WGS84: { ellipsoid: ellipsoids.WGS84 },\n};\n\n\n// freeze static properties\nObject.freeze(ellipsoids.WGS84);\nObject.freeze(datums.WGS84);\n\n\n/* LatLonEllipsoidal - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n\n/**\n * Latitude/longitude points on an ellipsoidal model earth, with ellipsoid parameters and methods\n * for converting points to/from cartesian (ECEF) coordinates.\n *\n * This is the core class, which will usually be used via LatLonEllipsoidal_Datum or\n * LatLonEllipsoidal_ReferenceFrame.\n */\nclass LatLonEllipsoidal {\n\n    /**\n     * Creates a geodetic latitude/longitude point on a (WGS84) ellipsoidal model earth.\n     *\n     * @param  {number} lat - Latitude (in degrees).\n     * @param  {number} lon - Longitude (in degrees).\n     * @param  {number} [height=0] - Height above ellipsoid in metres.\n     * @throws {TypeError} Invalid lat/lon/height.\n     *\n     * @example\n     *   import LatLon from '/js/geodesy/latlon-ellipsoidal.js';\n     *   const p = new LatLon(51.47788, -0.00147, 17);\n     */\n    constructor(lat, lon, height=0) {\n        if (isNaN(lat) || lat == null) throw new TypeError(`invalid lat ‘${lat}’`);\n        if (isNaN(lon) || lon == null) throw new TypeError(`invalid lon ‘${lon}’`);\n        if (isNaN(height) || height == null) throw new TypeError(`invalid height ‘${height}’`);\n\n        this._lat = Dms.wrap90(Number(lat));\n        this._lon = Dms.wrap180(Number(lon));\n        this._height = Number(height);\n    }\n\n\n    /**\n     * Latitude in degrees north from equator (including aliases lat, latitude): can be set as\n     * numeric or hexagesimal (deg-min-sec); returned as numeric.\n     */\n    get lat()       { return this._lat; }\n    get latitude()  { return this._lat; }\n    set lat(lat) {\n        this._lat = isNaN(lat) ? Dms.wrap90(Dms.parse(lat)) : Dms.wrap90(Number(lat));\n        if (isNaN(this._lat)) throw new TypeError(`invalid lat ‘${lat}’`);\n    }\n    set latitude(lat) {\n        this._lat = isNaN(lat) ? Dms.wrap90(Dms.parse(lat)) : Dms.wrap90(Number(lat));\n        if (isNaN(this._lat)) throw new TypeError(`invalid latitude ‘${lat}’`);\n    }\n\n    /**\n     * Longitude in degrees east from international reference meridian (including aliases lon, lng,\n     * longitude): can be set as numeric or hexagesimal (deg-min-sec); returned as numeric.\n     */\n    get lon()       { return this._lon; }\n    get lng()       { return this._lon; }\n    get longitude() { return this._lon; }\n    set lon(lon) {\n        this._lon = isNaN(lon) ? Dms.wrap180(Dms.parse(lon)) : Dms.wrap180(Number(lon));\n        if (isNaN(this._lon)) throw new TypeError(`invalid lon ‘${lon}’`);\n    }\n    set lng(lon) {\n        this._lon = isNaN(lon) ? Dms.wrap180(Dms.parse(lon)) : Dms.wrap180(Number(lon));\n        if (isNaN(this._lon)) throw new TypeError(`invalid lng ‘${lon}’`);\n    }\n    set longitude(lon) {\n        this._lon = isNaN(lon) ? Dms.wrap180(Dms.parse(lon)) : Dms.wrap180(Number(lon));\n        if (isNaN(this._lon)) throw new TypeError(`invalid longitude ‘${lon}’`);\n    }\n\n    /**\n     * Height in metres above ellipsoid.\n     */\n    get height()       { return this._height; }\n    set height(height) { this._height = Number(height); if (isNaN(this._height)) throw new TypeError(`invalid height ‘${height}’`); }\n\n\n    /**\n     * Datum.\n     *\n     * Note this is replicated within LatLonEllipsoidal in order that a LatLonEllipsoidal object can\n     * be monkey-patched to look like a LatLonEllipsoidal_Datum, for Vincenty calculations on\n     * different ellipsoids.\n     *\n     * @private\n     */\n    get datum()      { return this._datum; }\n    set datum(datum) { this._datum = datum; }\n\n\n    /**\n     * Ellipsoids with their parameters; this module only defines WGS84 parameters a = 6378137, b =\n     * 6356752.314245, f = 1/298.257223563.\n     *\n     * @example\n     *   const a = LatLon.ellipsoids.WGS84.a; // 6378137\n     */\n    static get ellipsoids() {\n        return ellipsoids;\n    }\n\n    /**\n     * Datums; this module only defines WGS84 datum, hence no datum transformations.\n     *\n     * @example\n     *   const a = LatLon.datums.WGS84.ellipsoid.a; // 6377563.396\n     */\n    static get datums() {\n        return datums;\n    }\n\n\n    /**\n     * Parses a latitude/longitude point from a variety of formats.\n     *\n     * Latitude & longitude (in degrees) can be supplied as two separate parameters, as a single\n     * comma-separated lat/lon string, or as a single object with { lat, lon } or GeoJSON properties.\n     *\n     * The latitude/longitude values may be numeric or strings; they may be signed decimal or\n     * deg-min-sec (hexagesimal) suffixed by compass direction (NSEW); a variety of separators are\n     * accepted. Examples -3.62, '3 37 12W', '3°37′12″W'.\n     *\n     * Thousands/decimal separators must be comma/dot; use Dms.fromLocale to convert locale-specific\n     * thousands/decimal separators.\n     *\n     * @param   {number|string|Object} lat|latlon - Latitude (in degrees), or comma-separated lat/lon, or lat/lon object.\n     * @param   {number}               [lon]      - Longitude (in degrees).\n     * @param   {number}               [height=0] - Height above ellipsoid in metres.\n     * @returns {LatLon} Latitude/longitude point on WGS84 ellipsoidal model earth.\n     * @throws  {TypeError} Invalid coordinate.\n     *\n     * @example\n     *   const p1 = LatLon.parse(51.47788, -0.00147);              // numeric pair\n     *   const p2 = LatLon.parse('51°28′40″N, 000°00′05″W', 17);   // dms string + height\n     *   const p3 = LatLon.parse({ lat: 52.205, lon: 0.119 }, 17); // { lat, lon } object numeric + height\n     */\n    static parse(...args) {\n        if (args.length == 0) throw new TypeError('invalid (empty) point');\n\n        let lat=undefined, lon=undefined, height=undefined;\n\n        // single { lat, lon } object\n        if (typeof args[0]=='object' && (args.length==1 || !isNaN(parseFloat(args[1])))) {\n            const ll = args[0];\n            if (ll.type == 'Point' && Array.isArray(ll.coordinates)) { // GeoJSON\n                [ lon, lat, height ] = ll.coordinates;\n                height = height || 0;\n            } else { // regular { lat, lon } object\n                if (ll.latitude  != undefined) lat = ll.latitude;\n                if (ll.lat       != undefined) lat = ll.lat;\n                if (ll.longitude != undefined) lon = ll.longitude;\n                if (ll.lng       != undefined) lon = ll.lng;\n                if (ll.lon       != undefined) lon = ll.lon;\n                if (ll.height    != undefined) height = ll.height;\n                lat = Dms.wrap90(Dms.parse(lat));\n                lon = Dms.wrap180(Dms.parse(lon));\n            }\n            if (args[1] != undefined) height = args[1];\n            if (isNaN(lat) || isNaN(lon)) throw new TypeError(`invalid point ‘${JSON.stringify(args[0])}’`);\n        }\n\n        // single comma-separated lat/lon\n        if (typeof args[0] == 'string' && args[0].split(',').length == 2) {\n            [ lat, lon ] = args[0].split(',');\n            lat = Dms.wrap90(Dms.parse(lat));\n            lon = Dms.wrap180(Dms.parse(lon));\n            height = args[1] || 0;\n            if (isNaN(lat) || isNaN(lon)) throw new TypeError(`invalid point ‘${args[0]}’`);\n        }\n\n        // regular (lat, lon) arguments\n        if (lat==undefined && lon==undefined) {\n            [ lat, lon ] = args;\n            lat = Dms.wrap90(Dms.parse(lat));\n            lon = Dms.wrap180(Dms.parse(lon));\n            height = args[2] || 0;\n            if (isNaN(lat) || isNaN(lon)) throw new TypeError(`invalid point ‘${args.toString()}’`);\n        }\n\n        return new this(lat, lon, height); // 'new this' as may return subclassed types\n    }\n\n\n    /**\n     * Converts ‘this’ point from (geodetic) latitude/longitude coordinates to (geocentric)\n     * cartesian (x/y/z) coordinates.\n     *\n     * @returns {Cartesian} Cartesian point equivalent to lat/lon point, with x, y, z in metres from\n     *   earth centre.\n     */\n    toCartesian() {\n        // x = (ν+h)⋅cosφ⋅cosλ, y = (ν+h)⋅cosφ⋅sinλ, z = (ν⋅(1-e²)+h)⋅sinφ\n        // where ν = a/√(1−e²⋅sinφ⋅sinφ), e² = (a²-b²)/a² or (better conditioned) 2⋅f-f²\n        const ellipsoid = this.datum\n            ? this.datum.ellipsoid\n            : this.referenceFrame ? this.referenceFrame.ellipsoid : ellipsoids.WGS84;\n\n        const φ = this.lat.toRadians();\n        const λ = this.lon.toRadians();\n        const h = this.height;\n        const { a, f } = ellipsoid;\n\n        const sinφ = Math.sin(φ), cosφ = Math.cos(φ);\n        const sinλ = Math.sin(λ), cosλ = Math.cos(λ);\n\n        const eSq = 2*f - f*f;                      // 1st eccentricity squared ≡ (a²-b²)/a²\n        const ν = a / Math.sqrt(1 - eSq*sinφ*sinφ); // radius of curvature in prime vertical\n\n        const x = (ν+h) * cosφ * cosλ;\n        const y = (ν+h) * cosφ * sinλ;\n        const z = (ν*(1-eSq)+h) * sinφ;\n\n        return new Cartesian(x, y, z);\n    }\n\n\n    /**\n     * Checks if another point is equal to ‘this’ point.\n     *\n     * @param   {LatLon} point - Point to be compared against this point.\n     * @returns {bool} True if points have identical latitude, longitude, height, and datum/referenceFrame.\n     * @throws  {TypeError} Invalid point.\n     *\n     * @example\n     *   const p1 = new LatLon(52.205, 0.119);\n     *   const p2 = new LatLon(52.205, 0.119);\n     *   const equal = p1.equals(p2); // true\n     */\n    equals(point) {\n        if (!(point instanceof LatLonEllipsoidal)) throw new TypeError(`invalid point ‘${point}’`);\n\n        if (Math.abs(this.lat - point.lat) > Number.EPSILON) return false;\n        if (Math.abs(this.lon - point.lon) > Number.EPSILON) return false;\n        if (Math.abs(this.height - point.height) > Number.EPSILON) return false;\n        if (this.datum != point.datum) return false;\n        if (this.referenceFrame != point.referenceFrame) return false;\n        if (this.epoch != point.epoch) return false;\n\n        return true;\n    }\n\n\n    /**\n     * Returns a string representation of ‘this’ point, formatted as degrees, degrees+minutes, or\n     * degrees+minutes+seconds.\n     *\n     * @param   {string} [format=d] - Format point as 'd', 'dm', 'dms', or 'n' for signed numeric.\n     * @param   {number} [dp=4|2|0] - Number of decimal places to use: default 4 for d, 2 for dm, 0 for dms.\n     * @param   {number} [dpHeight=null] - Number of decimal places to use for height; default is no height display.\n     * @returns {string} Comma-separated formatted latitude/longitude.\n     * @throws  {RangeError} Invalid format.\n     *\n     * @example\n     *   const greenwich = new LatLon(51.47788, -0.00147, 46);\n     *   const d = greenwich.toString();                        // 51.4779°N, 000.0015°W\n     *   const dms = greenwich.toString('dms', 2);              // 51°28′40″N, 000°00′05″W\n     *   const [lat, lon] = greenwich.toString('n').split(','); // 51.4779, -0.0015\n     *   const dmsh = greenwich.toString('dms', 0, 0);          // 51°28′40″N, 000°00′06″W +46m\n     */\n    toString(format='d', dp=undefined, dpHeight=null) {\n        // note: explicitly set dp to undefined for passing through to toLat/toLon\n        if (![ 'd', 'dm', 'dms', 'n' ].includes(format)) throw new RangeError(`invalid format ‘${format}’`);\n\n        const height = (this.height>=0 ? ' +' : ' ') + this.height.toFixed(dpHeight) + 'm';\n        if (format == 'n') { // signed numeric degrees\n            if (dp == undefined) dp = 4;\n            const lat = this.lat.toFixed(dp);\n            const lon = this.lon.toFixed(dp);\n            return `${lat}, ${lon}${dpHeight==null ? '' : height}`;\n        }\n\n        const lat = Dms.toLat(this.lat, format, dp);\n        const lon = Dms.toLon(this.lon, format, dp);\n\n        return `${lat}, ${lon}${dpHeight==null ? '' : height}`;\n    }\n\n}\n\n\n/* Cartesian  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\n/**\n * ECEF (earth-centered earth-fixed) geocentric cartesian coordinates.\n *\n * @extends Vector3d\n */\nclass Cartesian extends Vector3d {\n\n    /**\n     * Creates cartesian coordinate representing ECEF (earth-centric earth-fixed) point.\n     *\n     * @param {number} x - X coordinate in metres (=> 0°N,0°E).\n     * @param {number} y - Y coordinate in metres (=> 0°N,90°E).\n     * @param {number} z - Z coordinate in metres (=> 90°N).\n     *\n     * @example\n     *   import { Cartesian } from '/js/geodesy/latlon-ellipsoidal.js';\n     *   const coord = new Cartesian(3980581.210, -111.159, 4966824.522);\n     */\n    constructor(x, y, z) {\n        super(x, y, z); // arguably redundant constructor, but specifies units & axes\n    }\n\n\n    /**\n     * Converts ‘this’ (geocentric) cartesian (x/y/z) coordinate to (geodetic) latitude/longitude\n     * point on specified ellipsoid.\n     *\n     * Uses Bowring’s (1985) formulation for μm precision in concise form; ‘The accuracy of geodetic\n     * latitude and height equations’, B R Bowring, Survey Review vol 28, 218, Oct 1985.\n     *\n     * @param   {LatLon.ellipsoids} [ellipsoid=WGS84] - Ellipsoid to use when converting point.\n     * @returns {LatLon} Latitude/longitude point defined by cartesian coordinates, on given ellipsoid.\n     * @throws  {TypeError} Invalid ellipsoid.\n     *\n     * @example\n     *   const c = new Cartesian(4027893.924, 307041.993, 4919474.294);\n     *   const p = c.toLatLon(); // 50.7978°N, 004.3592°E\n     */\n    toLatLon(ellipsoid=ellipsoids.WGS84) {\n        // note ellipsoid is available as a parameter for when toLatLon gets subclassed to\n        // Ellipsoidal_Datum / Ellipsoidal_Referenceframe.\n        if (!ellipsoid || !ellipsoid.a) throw new TypeError(`invalid ellipsoid ‘${ellipsoid}’`);\n\n        const { x, y, z } = this;\n        const { a, b, f } = ellipsoid;\n\n        const e2 = 2*f - f*f;           // 1st eccentricity squared ≡ (a²−b²)/a²\n        const ε2 = e2 / (1-e2);         // 2nd eccentricity squared ≡ (a²−b²)/b²\n        const p = Math.sqrt(x*x + y*y); // distance from minor axis\n        const R = Math.sqrt(p*p + z*z); // polar radius\n\n        // parametric latitude (Bowring eqn.17, replacing tanβ = z·a / p·b)\n        const tanβ = (b*z)/(a*p) * (1+ε2*b/R);\n        const sinβ = tanβ / Math.sqrt(1+tanβ*tanβ);\n        const cosβ = sinβ / tanβ;\n\n        // geodetic latitude (Bowring eqn.18: tanφ = z+ε²⋅b⋅sin³β / p−e²⋅cos³β)\n        const φ = isNaN(cosβ) ? 0 : Math.atan2(z + ε2*b*sinβ*sinβ*sinβ, p - e2*a*cosβ*cosβ*cosβ);\n\n        // longitude\n        const λ = Math.atan2(y, x);\n\n        // height above ellipsoid (Bowring eqn.7)\n        const sinφ = Math.sin(φ), cosφ = Math.cos(φ);\n        const ν = a / Math.sqrt(1-e2*sinφ*sinφ); // length of the normal terminated by the minor axis\n        const h = p*cosφ + z*sinφ - (a*a/ν);\n\n        const point = new LatLonEllipsoidal(φ.toDegrees(), λ.toDegrees(), h);\n\n        return point;\n    }\n\n\n    /**\n     * Returns a string representation of ‘this’ cartesian point.\n     *\n     * @param   {number} [dp=0] - Number of decimal places to use.\n     * @returns {string} Comma-separated latitude/longitude.\n     */\n    toString(dp=0) {\n        const x = this.x.toFixed(dp), y = this.y.toFixed(dp), z = this.z.toFixed(dp);\n        return `[${x},${y},${z}]`;\n    }\n\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport { LatLonEllipsoidal as default, Cartesian, Vector3d, Dms };\n","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Geodesy tools for conversions between (historical) datums          (c) Chris Veness 2005-2019  */\n/*                                                                                   MIT Licence  */\n/* www.movable-type.co.uk/scripts/latlong-convert-coords.html                                     */\n/* www.movable-type.co.uk/scripts/geodesy-library.html#latlon-ellipsoidal-datum                  */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nimport LatLonEllipsoidal, { Cartesian, Dms } from './latlon-ellipsoidal.js';\n\n\n/**\n * Historical geodetic datums: a latitude/longitude point defines a geographic location on or\n * above/below the  earth’s surface, measured in degrees from the equator & the International\n * Reference Meridian and metres above the ellipsoid, and based on a given datum. The datum is\n * based on a reference ellipsoid and tied to geodetic survey reference points.\n *\n * Modern geodesy is generally based on the WGS84 datum (as used for instance by GPS systems), but\n * previously various reference ellipsoids and datum references were used.\n *\n * This module extends the core latlon-ellipsoidal module to include ellipsoid parameters and datum\n * transformation parameters, and methods for converting between different (generally historical)\n * datums.\n *\n * It can be used for UK Ordnance Survey mapping (OS National Grid References are still based on the\n * otherwise historical OSGB36 datum), as well as for historical purposes.\n *\n * q.v. Ordnance Survey ‘A guide to coordinate systems in Great Britain’ Section 6,\n * www.ordnancesurvey.co.uk/docs/support/guide-coordinate-systems-great-britain.pdf, and also\n * www.ordnancesurvey.co.uk/blog/2014/12/2.\n *\n * @module latlon-ellipsoidal-datum\n */\n\n\n/*\n * Ellipsoid parameters; exposed through static getter below.\n */\nconst ellipsoids = {\n    WGS84:         { a: 6378137,     b: 6356752.314245, f: 1/298.257223563 },\n    Airy1830:      { a: 6377563.396, b: 6356256.909,    f: 1/299.3249646   },\n    AiryModified:  { a: 6377340.189, b: 6356034.448,    f: 1/299.3249646   },\n    Bessel1841:    { a: 6377397.155, b: 6356078.962818, f: 1/299.1528128   },\n    Clarke1866:    { a: 6378206.4,   b: 6356583.8,      f: 1/294.978698214 },\n    Clarke1880IGN: { a: 6378249.2,   b: 6356515.0,      f: 1/293.466021294 },\n    GRS80:         { a: 6378137,     b: 6356752.314140, f: 1/298.257222101 },\n    Intl1924:      { a: 6378388,     b: 6356911.946,    f: 1/297           }, // aka Hayford\n    WGS72:         { a: 6378135,     b: 6356750.5,      f: 1/298.26        },\n};\n\n\n/*\n * Datums; exposed through static getter below.\n */\nconst datums = {\n    // transforms: t in metres, s in ppm, r in arcseconds              tx       ty        tz       s        rx        ry        rz\n    ED50:       { ellipsoid: ellipsoids.Intl1924,      transform: [   89.5,    93.8,    123.1,    -1.2,     0.0,      0.0,      0.156    ] }, // epsg.io/1311\n    ETRS89:     { ellipsoid: ellipsoids.GRS80,         transform: [    0,       0,        0,       0,       0,        0,        0        ] }, // epsg.io/1149; @ 1-metre level\n    Irl1975:    { ellipsoid: ellipsoids.AiryModified,  transform: [ -482.530, 130.596, -564.557,  -8.150,   1.042,    0.214,    0.631    ] }, // epsg.io/1954\n    NAD27:      { ellipsoid: ellipsoids.Clarke1866,    transform: [    8,    -160,     -176,       0,       0,        0,        0        ] },\n    NAD83:      { ellipsoid: ellipsoids.GRS80,         transform: [    0.9956, -1.9103,  -0.5215, -0.00062, 0.025915, 0.009426, 0.011599 ] },\n    NTF:        { ellipsoid: ellipsoids.Clarke1880IGN, transform: [  168,      60,     -320,       0,       0,        0,        0        ] },\n    OSGB36:     { ellipsoid: ellipsoids.Airy1830,      transform: [ -446.448, 125.157, -542.060,  20.4894, -0.1502,  -0.2470,  -0.8421   ] }, // epsg.io/1314\n    Potsdam:    { ellipsoid: ellipsoids.Bessel1841,    transform: [ -582,    -105,     -414,      -8.3,     1.04,     0.35,    -3.08     ] },\n    TokyoJapan: { ellipsoid: ellipsoids.Bessel1841,    transform: [  148,    -507,     -685,       0,       0,        0,        0        ] },\n    WGS72:      { ellipsoid: ellipsoids.WGS72,         transform: [    0,       0,       -4.5,    -0.22,    0,        0,        0.554    ] },\n    WGS84:      { ellipsoid: ellipsoids.WGS84,         transform: [    0.0,     0.0,      0.0,     0.0,     0.0,      0.0,      0.0      ] },\n};\n/* sources:\n * - ED50:       www.gov.uk/guidance/oil-and-gas-petroleum-operations-notices#pon-4\n * - Irl1975:    www.osi.ie/wp-content/uploads/2015/05/transformations_booklet.pdf\n * - NAD27:      en.wikipedia.org/wiki/Helmert_transformation\n * - NAD83:      www.uvm.edu/giv/resources/WGS84_NAD83.pdf [strictly, WGS84(G1150) -> NAD83(CORS96) @ epoch 1997.0]\n *               (note NAD83(1986) ≡ WGS84(Original); confluence.qps.nl/pages/viewpage.action?pageId=29855173)\n * - NTF:        Nouvelle Triangulation Francaise geodesie.ign.fr/contenu/fichiers/Changement_systeme_geodesique.pdf\n * - OSGB36:     www.ordnancesurvey.co.uk/docs/support/guide-coordinate-systems-great-britain.pdf\n * - Potsdam:    kartoweb.itc.nl/geometrics/Coordinate%20transformations/coordtrans.html\n * - TokyoJapan: www.geocachingtoolbox.com?page=datumEllipsoidDetails\n * - WGS72:      www.icao.int/safety/pbn/documentation/eurocontrol/eurocontrol wgs 84 implementation manual.pdf\n *\n * more transform parameters are available from earth-info.nga.mil/GandG/coordsys/datums/NATO_DT.pdf,\n * www.fieldenmaps.info/cconv/web/cconv_params.js\n */\n/* note:\n * - ETRS89 reference frames are coincident with WGS-84 at epoch 1989.0 (ie null transform) at the one metre level.\n */\n\n\n// freeze static properties\nObject.keys(ellipsoids).forEach(e => Object.freeze(ellipsoids[e]));\nObject.keys(datums).forEach(d => { Object.freeze(datums[d]); Object.freeze(datums[d].transform); });\n\n\n/* LatLon - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\n/**\n * Latitude/longitude points on an ellipsoidal model earth, with ellipsoid parameters and methods\n * for converting between datums and to geocentric (ECEF) cartesian coordinates.\n *\n * @extends LatLonEllipsoidal\n */\nclass LatLonEllipsoidal_Datum extends LatLonEllipsoidal {\n\n    /**\n     * Creates a geodetic latitude/longitude point on an ellipsoidal model earth using given datum.\n     *\n     * @param {number} lat - Latitude (in degrees).\n     * @param {number} lon - Longitude (in degrees).\n     * @param {number} [height=0] - Height above ellipsoid in metres.\n     * @param {LatLon.datums} datum - Datum this point is defined within.\n     *\n     * @example\n     *   import LatLon from '/js/geodesy/latlon-ellipsoidal-datum.js';\n     *   const p = new LatLon(53.3444, -6.2577, 17, LatLon.datums.Irl1975);\n     */\n    constructor(lat, lon, height=0, datum=datums.WGS84) {\n        if (!datum || datum.ellipsoid==undefined) throw new TypeError(`unrecognised datum ‘${datum}’`);\n\n        super(lat, lon, height);\n\n        this._datum = datum;\n    }\n\n\n    /**\n     * Datum this point is defined within.\n     */\n    get datum() {\n        return this._datum;\n    }\n\n\n    /**\n     * Ellipsoids with their parameters; semi-major axis (a), semi-minor axis (b), and flattening (f).\n     *\n     * Flattening f = (a−b)/a; at least one of these parameters is derived from defining constants.\n     *\n     * @example\n     *   const a = LatLon.ellipsoids.Airy1830.a; // 6377563.396\n     */\n    static get ellipsoids() {\n        return ellipsoids;\n    }\n\n\n    /**\n     * Datums; with associated ellipsoid, and Helmert transform parameters to convert from WGS-84\n     * into given datum.\n     *\n     * Note that precision of various datums will vary, and WGS-84 (original) is not defined to be\n     * accurate to better than ±1 metre. No transformation should be assumed to be accurate to\n     * better than a metre, for many datums somewhat less.\n     *\n     * This is a small sample of commoner datums from a large set of historical datums. I will add\n     * new datums on request.\n     *\n     * @example\n     *   const a = LatLon.datums.OSGB36.ellipsoid.a;                    // 6377563.396\n     *   const tx = LatLon.datums.OSGB36.transform;                     // [ tx, ty, tz, s, rx, ry, rz ]\n     *   const availableDatums = Object.keys(LatLon.datums).join(', '); // ED50, Irl1975, NAD27, ...\n     */\n    static get datums() {\n        return datums;\n    }\n\n\n    // note instance datum getter/setters are in LatLonEllipsoidal\n\n\n    /**\n     * Parses a latitude/longitude point from a variety of formats.\n     *\n     * Latitude & longitude (in degrees) can be supplied as two separate parameters, as a single\n     * comma-separated lat/lon string, or as a single object with { lat, lon } or GeoJSON properties.\n     *\n     * The latitude/longitude values may be numeric or strings; they may be signed decimal or\n     * deg-min-sec (hexagesimal) suffixed by compass direction (NSEW); a variety of separators are\n     * accepted. Examples -3.62, '3 37 12W', '3°37′12″W'.\n     *\n     * Thousands/decimal separators must be comma/dot; use Dms.fromLocale to convert locale-specific\n     * thousands/decimal separators.\n     *\n     * @param   {number|string|Object} lat|latlon - Geodetic Latitude (in degrees) or comma-separated lat/lon or lat/lon object.\n     * @param   {number}               [lon] - Longitude in degrees.\n     * @param   {number}               [height=0] - Height above ellipsoid in metres.\n     * @param   {LatLon.datums}        [datum=WGS84] - Datum this point is defined within.\n     * @returns {LatLon} Latitude/longitude point on ellipsoidal model earth using given datum.\n     * @throws  {TypeError} Unrecognised datum.\n     *\n     * @example\n     *   const p = LatLon.parse('51.47736, 0.0000', 0, LatLon.datums.OSGB36);\n     */\n    static parse(...args) {\n        let datum = datums.WGS84;\n\n        // if the last argument is a datum, use that, otherwise use default WGS-84\n        if (args.length==4 || (args.length==3 && typeof args[2] == 'object')) datum = args.pop();\n\n        if (!datum || datum.ellipsoid==undefined) throw new TypeError(`unrecognised datum ‘${datum}’`);\n\n        const point = super.parse(...args);\n\n        point._datum = datum;\n\n        return point;\n    }\n\n\n    /**\n     * Converts ‘this’ lat/lon coordinate to new coordinate system.\n     *\n     * @param   {LatLon.datums} toDatum - Datum this coordinate is to be converted to.\n     * @returns {LatLon} This point converted to new datum.\n     * @throws  {TypeError} Unrecognised datum.\n     *\n     * @example\n     *   const pWGS84 = new LatLon(51.47788, -0.00147, 0, LatLon.datums.WGS84);\n     *   const pOSGB = pWGS84.convertDatum(LatLon.datums.OSGB36); // 51.4773°N, 000.0001°E\n     */\n    convertDatum(toDatum) {\n        if (!toDatum || toDatum.ellipsoid==undefined) throw new TypeError(`unrecognised datum ‘${toDatum}’`);\n\n        const oldCartesian = this.toCartesian();                 // convert geodetic to cartesian\n        const newCartesian = oldCartesian.convertDatum(toDatum); // convert datum\n        const newLatLon = newCartesian.toLatLon();               // convert cartesian back to geodetic\n\n        return newLatLon;\n    }\n\n\n    /**\n     * Converts ‘this’ point from (geodetic) latitude/longitude coordinates to (geocentric) cartesian\n     * (x/y/z) coordinates, based on the same datum.\n     *\n     * Shadow of LatLonEllipsoidal.toCartesian(), returning Cartesian augmented with\n     * LatLonEllipsoidal_Datum methods/properties.\n     *\n     * @returns {Cartesian} Cartesian point equivalent to lat/lon point, with x, y, z in metres from\n     *   earth centre, augmented with reference frame conversion methods and properties.\n     */\n    toCartesian() {\n        const cartesian = super.toCartesian();\n        const cartesianDatum = new Cartesian_Datum(cartesian.x, cartesian.y, cartesian.z, this.datum);\n        return cartesianDatum;\n    }\n\n}\n\n\n/* Cartesian  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\n/**\n * Augments Cartesian with datum the cooordinate is based on, and methods to convert between datums\n * (using Helmert 7-parameter transforms) and to convert cartesian to geodetic latitude/longitude\n * point.\n *\n * @extends Cartesian\n */\nclass Cartesian_Datum extends Cartesian {\n\n    /**\n     * Creates cartesian coordinate representing ECEF (earth-centric earth-fixed) point, on a given\n     * datum. The datum will identify the primary meridian (for the x-coordinate), and is also\n     * useful in transforming to/from geodetic (lat/lon) coordinates.\n     *\n     * @param  {number} x - X coordinate in metres (=> 0°N,0°E).\n     * @param  {number} y - Y coordinate in metres (=> 0°N,90°E).\n     * @param  {number} z - Z coordinate in metres (=> 90°N).\n     * @param  {LatLon.datums} [datum] - Datum this coordinate is defined within.\n     * @throws {TypeError} Unrecognised datum.\n     *\n     * @example\n     *   import { Cartesian } from '/js/geodesy/latlon-ellipsoidal-datum.js';\n     *   const coord = new Cartesian(3980581.210, -111.159, 4966824.522);\n     */\n    constructor(x, y, z, datum=undefined) {\n        if (datum && datum.ellipsoid==undefined) throw new TypeError(`unrecognised datum ‘${datum}’`);\n\n        super(x, y, z);\n\n        if (datum) this._datum = datum;\n    }\n\n\n    /**\n     * Datum this point is defined within.\n     */\n    get datum() {\n        return this._datum;\n    }\n    set datum(datum) {\n        if (!datum || datum.ellipsoid==undefined) throw new TypeError(`unrecognised datum ‘${datum}’`);\n        this._datum = datum;\n    }\n\n\n    /**\n     * Converts ‘this’ (geocentric) cartesian (x/y/z) coordinate to (geodetic) latitude/longitude\n     * point (based on the same datum, or WGS84 if unset).\n     *\n     * Shadow of Cartesian.toLatLon(), returning LatLon augmented with LatLonEllipsoidal_Datum\n     * methods convertDatum, toCartesian, etc.\n     *\n     * @returns {LatLon} Latitude/longitude point defined by cartesian coordinates.\n     * @throws  {TypeError} Unrecognised datum\n     *\n     * @example\n     *   const c = new Cartesian(4027893.924, 307041.993, 4919474.294);\n     *   const p = c.toLatLon(); // 50.7978°N, 004.3592°E\n     */\n    toLatLon(deprecatedDatum=undefined) {\n        if (deprecatedDatum) {\n            console.info('datum parameter to Cartesian_Datum.toLatLon is deprecated: set datum before calling toLatLon()');\n            this.datum = deprecatedDatum;\n        }\n        const datum = this.datum || datums.WGS84;\n        if (!datum || datum.ellipsoid==undefined) throw new TypeError(`unrecognised datum ‘${datum}’`);\n\n        const latLon = super.toLatLon(datum.ellipsoid); // TODO: what if datum is not geocentric?\n        const point = new LatLonEllipsoidal_Datum(latLon.lat, latLon.lon, latLon.height, this.datum);\n        return point;\n    }\n\n\n    /**\n     * Converts ‘this’ cartesian coordinate to new datum using Helmert 7-parameter transformation.\n     *\n     * @param   {LatLon.datums} toDatum - Datum this coordinate is to be converted to.\n     * @returns {Cartesian} This point converted to new datum.\n     * @throws  {Error} Undefined datum.\n     *\n     * @example\n     *   const c = new Cartesian(3980574.247, -102.127, 4966830.065, LatLon.datums.OSGB36);\n     *   c.convertDatum(LatLon.datums.Irl1975); // [??,??,??]\n     */\n    convertDatum(toDatum) {\n        // TODO: what if datum is not geocentric?\n        if (!toDatum || toDatum.ellipsoid == undefined) throw new TypeError(`unrecognised datum ‘${toDatum}’`);\n        if (!this.datum) throw new TypeError('cartesian coordinate has no datum');\n\n        let oldCartesian = null;\n        let transform = null;\n\n        if (this.datum == undefined || this.datum == datums.WGS84) {\n            // converting from WGS 84\n            oldCartesian = this;\n            transform = toDatum.transform;\n        }\n        if (toDatum == datums.WGS84) {\n            // converting to WGS 84; use inverse transform\n            oldCartesian = this;\n            transform = this.datum.transform.map(p => -p);\n        }\n        if (transform == null) {\n            // neither this.datum nor toDatum are WGS84: convert this to WGS84 first\n            oldCartesian = this.convertDatum(datums.WGS84);\n            transform = toDatum.transform;\n        }\n\n        const newCartesian = oldCartesian.applyTransform(transform);\n        newCartesian.datum = toDatum;\n\n        return newCartesian;\n    }\n\n\n    /**\n     * Applies Helmert 7-parameter transformation to ‘this’ coordinate using transform parameters t.\n     *\n     * This is used in converting datums (geodetic->cartesian, apply transform, cartesian->geodetic).\n     *\n     * @private\n     * @param   {number[]} t - Transformation to apply to this coordinate.\n     * @returns {Cartesian} Transformed point.\n     */\n    applyTransform(t)   {\n        // this point\n        const { x: x1, y: y1, z: z1 } = this;\n\n        // transform parameters\n        const tx = t[0];                    // x-shift in metres\n        const ty = t[1];                    // y-shift in metres\n        const tz = t[2];                    // z-shift in metres\n        const s  = t[3]/1e6 + 1;            // scale: normalise parts-per-million to (s+1)\n        const rx = (t[4]/3600).toRadians(); // x-rotation: normalise arcseconds to radians\n        const ry = (t[5]/3600).toRadians(); // y-rotation: normalise arcseconds to radians\n        const rz = (t[6]/3600).toRadians(); // z-rotation: normalise arcseconds to radians\n\n        // apply transform\n        const x2 = tx + x1*s  - y1*rz + z1*ry;\n        const y2 = ty + x1*rz + y1*s  - z1*rx;\n        const z2 = tz - x1*ry + y1*rx + z1*s;\n\n        return new Cartesian_Datum(x2, y2, z2);\n    }\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport { LatLonEllipsoidal_Datum as default, Cartesian_Datum as Cartesian, datums, Dms };\n","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Ordnance Survey Grid Reference functions                           (c) Chris Veness 2005-2021  */\n/*                                                                                   MIT Licence  */\n/* www.movable-type.co.uk/scripts/latlong-gridref.html                                            */\n/* www.movable-type.co.uk/scripts/geodesy-library.html#osgridref                                  */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nimport LatLonEllipsoidal, { Dms } from './latlon-ellipsoidal-datum.js';\n\n\n/**\n * Ordnance Survey OSGB grid references provide geocoordinate references for UK mapping purposes.\n *\n * Formulation implemented here due to Thomas, Redfearn, etc is as published by OS, but is inferior\n * to Krüger as used by e.g. Karney 2011.\n *\n * www.ordnancesurvey.co.uk/documents/resources/guide-coordinate-systems-great-britain.pdf.\n *\n * Note OSGB grid references cover Great Britain only; Ireland and the Channel Islands have their\n * own references.\n *\n * Note that these formulae are based on ellipsoidal calculations, and according to the OS are\n * accurate to about 4–5 metres – for greater accuracy, a geoid-based transformation (OSTN15) must\n * be used.\n */\n\n/*\n * Converted 2015 to work with WGS84 by default, OSGB36 as option;\n * www.ordnancesurvey.co.uk/blog/2014/12/confirmation-on-changes-to-latitude-and-longitude\n */\n\n\n/* OsGridRef  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\nconst nationalGrid = {\n    trueOrigin:  { lat: 49, lon: -2 },                 // true origin of grid 49°N,2°W on OSGB36 datum\n    falseOrigin: { easting: -400e3, northing: 100e3 }, // easting & northing of false origin, metres from true origin\n    scaleFactor: 0.9996012717,                         // scale factor on central meridian\n    ellipsoid:   LatLonEllipsoidal.ellipsoids.Airy1830,\n};\n// note Irish National Grid uses t/o 53°30′N, 8°W, f/o 200kmW, 250kmS, scale factor 1.000035, on Airy 1830 Modified ellipsoid\n\n\n/**\n * OS Grid References with methods to parse and convert them to latitude/longitude points.\n */\nclass OsGridRef {\n\n    /**\n     * Creates an OsGridRef object.\n     *\n     * @param {number} easting - Easting in metres from OS Grid false origin.\n     * @param {number} northing - Northing in metres from OS Grid false origin.\n     *\n     * @example\n     *   import OsGridRef from '/js/geodesy/osgridref.js';\n     *   const gridref = new OsGridRef(651409, 313177);\n     */\n    constructor(easting, northing) {\n        this.easting = Number(easting);\n        this.northing = Number(northing);\n\n        if (isNaN(easting)  || this.easting<0  || this.easting>700e3) throw new RangeError(`invalid easting ‘${easting}’`);\n        if (isNaN(northing) || this.northing<0 || this.northing>1300e3) throw new RangeError(`invalid northing ‘${northing}’`);\n    }\n\n\n    /**\n     * Converts ‘this’ Ordnance Survey Grid Reference easting/northing coordinate to latitude/longitude\n     * (SW corner of grid square).\n     *\n     * While OS Grid References are based on OSGB-36, the Ordnance Survey have deprecated the use of\n     * OSGB-36 for latitude/longitude coordinates (in favour of WGS-84), hence this function returns\n     * WGS-84 by default, with OSGB-36 as an option. See www.ordnancesurvey.co.uk/blog/2014/12/2.\n     *\n     * Note formulation implemented here due to Thomas, Redfearn, etc is as published by OS, but is\n     * inferior to Krüger as used by e.g. Karney 2011.\n     *\n     * @param   {LatLon.datum} [datum=WGS84] - Datum to convert grid reference into.\n     * @returns {LatLon}       Latitude/longitude of supplied grid reference.\n     *\n     * @example\n     *   const gridref = new OsGridRef(651409.903, 313177.270);\n     *   const pWgs84 = gridref.toLatLon();                    // 52°39′28.723″N, 001°42′57.787″E\n     *   // to obtain (historical) OSGB36 lat/lon point:\n     *   const pOsgb = gridref.toLatLon(LatLon.datums.OSGB36); // 52°39′27.253″N, 001°43′04.518″E\n     */\n    toLatLon(datum=LatLonEllipsoidal.datums.WGS84) {\n        const { easting: E, northing: N } = this;\n\n        const { a, b } = nationalGrid.ellipsoid;            // a = 6377563.396, b = 6356256.909\n        const φ0 = nationalGrid.trueOrigin.lat.toRadians(); // latitude of true origin, 49°N\n        const λ0 = nationalGrid.trueOrigin.lon.toRadians(); // longitude of true origin, 2°W\n        const E0 = -nationalGrid.falseOrigin.easting;       // easting of true origin, 400km\n        const N0 = -nationalGrid.falseOrigin.northing;      // northing of true origin, -100km\n        const F0 = nationalGrid.scaleFactor;                // 0.9996012717\n\n        const e2 = 1 - (b*b)/(a*a);                         // eccentricity squared\n        const n = (a-b)/(a+b), n2 = n*n, n3 = n*n*n;        // n, n², n³\n\n        let φ=φ0, M=0;\n        do {\n            φ = (N-N0-M)/(a*F0) + φ;\n\n            const Ma = (1 + n + (5/4)*n2 + (5/4)*n3) * (φ-φ0);\n            const Mb = (3*n + 3*n*n + (21/8)*n3) * Math.sin(φ-φ0) * Math.cos(φ+φ0);\n            const Mc = ((15/8)*n2 + (15/8)*n3) * Math.sin(2*(φ-φ0)) * Math.cos(2*(φ+φ0));\n            const Md = (35/24)*n3 * Math.sin(3*(φ-φ0)) * Math.cos(3*(φ+φ0));\n            M = b * F0 * (Ma - Mb + Mc - Md);                // meridional arc\n\n        } while (Math.abs(N-N0-M) >= 0.00001);  // ie until < 0.01mm\n\n        const cosφ = Math.cos(φ), sinφ = Math.sin(φ);\n        const ν = a*F0/Math.sqrt(1-e2*sinφ*sinφ);            // nu = transverse radius of curvature\n        const ρ = a*F0*(1-e2)/Math.pow(1-e2*sinφ*sinφ, 1.5); // rho = meridional radius of curvature\n        const η2 = ν/ρ-1;                                    // eta = ?\n\n        const tanφ = Math.tan(φ);\n        const tan2φ = tanφ*tanφ, tan4φ = tan2φ*tan2φ, tan6φ = tan4φ*tan2φ;\n        const secφ = 1/cosφ;\n        const ν3 = ν*ν*ν, ν5 = ν3*ν*ν, ν7 = ν5*ν*ν;\n        const VII = tanφ/(2*ρ*ν);\n        const VIII = tanφ/(24*ρ*ν3)*(5+3*tan2φ+η2-9*tan2φ*η2);\n        const IX = tanφ/(720*ρ*ν5)*(61+90*tan2φ+45*tan4φ);\n        const X = secφ/ν;\n        const XI = secφ/(6*ν3)*(ν/ρ+2*tan2φ);\n        const XII = secφ/(120*ν5)*(5+28*tan2φ+24*tan4φ);\n        const XIIA = secφ/(5040*ν7)*(61+662*tan2φ+1320*tan4φ+720*tan6φ);\n\n        const dE = (E-E0), dE2 = dE*dE, dE3 = dE2*dE, dE4 = dE2*dE2, dE5 = dE3*dE2, dE6 = dE4*dE2, dE7 = dE5*dE2;\n        φ = φ - VII*dE2 + VIII*dE4 - IX*dE6;\n        const λ = λ0 + X*dE - XI*dE3 + XII*dE5 - XIIA*dE7;\n\n        let point = new LatLon_OsGridRef(φ.toDegrees(), λ.toDegrees(), 0, LatLonEllipsoidal.datums.OSGB36);\n\n        if (datum != LatLonEllipsoidal.datums.OSGB36) {\n            // if point is required in datum other than OSGB36, convert it\n            point = point.convertDatum(datum);\n            // convertDatum() gives us a LatLon: convert to LatLon_OsGridRef which includes toOsGrid()\n            point = new LatLon_OsGridRef(point.lat, point.lon, point.height, point.datum);\n        }\n\n        return point;\n    }\n\n\n    /**\n     * Parses grid reference to OsGridRef object.\n     *\n     * Accepts standard grid references (eg 'SU 387 148'), with or without whitespace separators, from\n     * two-digit references up to 10-digit references (1m × 1m square), or fully numeric comma-separated\n     * references in metres (eg '438700,114800').\n     *\n     * @param   {string}    gridref - Standard format OS Grid Reference.\n     * @returns {OsGridRef} Numeric version of grid reference in metres from false origin (SW corner of\n     *   supplied grid square).\n     * @throws  {Error}     Invalid grid reference.\n     *\n     * @example\n     *   const grid = OsGridRef.parse('TG 51409 13177'); // grid: { easting: 651409, northing: 313177 }\n     */\n    static parse(gridref) {\n        gridref = String(gridref).trim();\n\n        // check for fully numeric comma-separated gridref format\n        let match = gridref.match(/^(\\d+),\\s*(\\d+)$/);\n        if (match) return new OsGridRef(match[1], match[2]);\n\n        // validate format\n        match = gridref.match(/^[HNST][ABCDEFGHJKLMNOPQRSTUVWXYZ]\\s*[0-9]+\\s*[0-9]+$/i);\n        if (!match) throw new Error(`invalid grid reference ‘${gridref}’`);\n\n        // get numeric values of letter references, mapping A->0, B->1, C->2, etc:\n        let l1 = gridref.toUpperCase().charCodeAt(0) - 'A'.charCodeAt(0); // 500km square\n        let l2 = gridref.toUpperCase().charCodeAt(1) - 'A'.charCodeAt(0); // 100km square\n        // shuffle down letters after 'I' since 'I' is not used in grid:\n        if (l1 > 7) l1--;\n        if (l2 > 7) l2--;\n\n        // convert grid letters into 100km-square indexes from false origin (grid square SV):\n        const e100km = ((l1 - 2) % 5) * 5 + (l2 % 5);\n        const n100km = (19 - Math.floor(l1 / 5) * 5) - Math.floor(l2 / 5);\n\n        // skip grid letters to get numeric (easting/northing) part of ref\n        let en = gridref.slice(2).trim().split(/\\s+/);\n        // if e/n not whitespace separated, split half way\n        if (en.length == 1) en = [ en[0].slice(0, en[0].length / 2), en[0].slice(en[0].length / 2) ];\n\n        // validation\n        if (en[0].length != en[1].length) throw new Error(`invalid grid reference ‘${gridref}’`);\n\n        // standardise to 10-digit refs (metres)\n        en[0] = en[0].padEnd(5, '0');\n        en[1] = en[1].padEnd(5, '0');\n\n        const e = e100km + en[0];\n        const n = n100km + en[1];\n\n        return new OsGridRef(e, n);\n    }\n\n\n    /**\n     * Converts ‘this’ numeric grid reference to standard OS Grid Reference.\n     *\n     * @param   {number} [digits=10] - Precision of returned grid reference (10 digits = metres);\n     *   digits=0 will return grid reference in numeric format.\n     * @returns {string} This grid reference in standard format.\n     *\n     * @example\n     *   const gridref = new OsGridRef(651409, 313177).toString(8); // 'TG 5140 1317'\n     *   const gridref = new OsGridRef(651409, 313177).toString(0); // '651409,313177'\n     */\n    toString(digits=10) {\n        if (![ 0,2,4,6,8,10,12,14,16 ].includes(Number(digits))) throw new RangeError(`invalid precision ‘${digits}’`); // eslint-disable-line comma-spacing\n\n        let { easting: e, northing: n } = this;\n\n        // use digits = 0 to return numeric format (in metres) - note northing may be >= 1e7\n        if (digits == 0) {\n            const format = { useGrouping: false,  minimumIntegerDigits: 6, maximumFractionDigits: 3 };\n            const ePad = e.toLocaleString('en', format);\n            const nPad = n.toLocaleString('en', format);\n            return `${ePad},${nPad}`;\n        }\n\n        // get the 100km-grid indices\n        const e100km = Math.floor(e / 100000), n100km = Math.floor(n / 100000);\n\n        // translate those into numeric equivalents of the grid letters\n        let l1 = (19 - n100km) - (19 - n100km) % 5 + Math.floor((e100km + 10) / 5);\n        let l2 = (19 - n100km) * 5 % 25 + e100km % 5;\n\n        // compensate for skipped 'I' and build grid letter-pairs\n        if (l1 > 7) l1++;\n        if (l2 > 7) l2++;\n        const letterPair = String.fromCharCode(l1 + 'A'.charCodeAt(0), l2 + 'A'.charCodeAt(0));\n\n        // strip 100km-grid indices from easting & northing, and reduce precision\n        e = Math.floor((e % 100000) / Math.pow(10, 5 - digits / 2));\n        n = Math.floor((n % 100000) / Math.pow(10, 5 - digits / 2));\n\n        // pad eastings & northings with leading zeros\n        e = e.toString().padStart(digits/2, '0');\n        n = n.toString().padStart(digits/2, '0');\n\n        return `${letterPair} ${e} ${n}`;\n    }\n\n}\n\n\n/* LatLon_OsGridRef - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\n/**\n * Extends LatLon class with method to convert LatLon point to OS Grid Reference.\n *\n * @extends LatLonEllipsoidal\n */\nclass LatLon_OsGridRef extends LatLonEllipsoidal {\n\n    /**\n     * Converts latitude/longitude to Ordnance Survey grid reference easting/northing coordinate.\n     *\n     * @returns {OsGridRef} OS Grid Reference easting/northing.\n     *\n     * @example\n     *   const grid = new LatLon(52.65798, 1.71605).toOsGrid(); // TG 51409 13177\n     *   // for conversion of (historical) OSGB36 latitude/longitude point:\n     *   const grid = new LatLon(52.65798, 1.71605).toOsGrid(LatLon.datums.OSGB36);\n     */\n    toOsGrid() {\n        // if necessary convert to OSGB36 first\n        const point = this.datum == LatLonEllipsoidal.datums.OSGB36\n            ? this\n            : this.convertDatum(LatLonEllipsoidal.datums.OSGB36);\n\n        const φ = point.lat.toRadians();\n        const λ = point.lon.toRadians();\n\n        const { a, b } = nationalGrid.ellipsoid;            // a = 6377563.396, b = 6356256.909\n        const φ0 = nationalGrid.trueOrigin.lat.toRadians(); // latitude of true origin, 49°N\n        const λ0 = nationalGrid.trueOrigin.lon.toRadians(); // longitude of true origin, 2°W\n        const E0 = -nationalGrid.falseOrigin.easting;       // easting of true origin, 400km\n        const N0 = -nationalGrid.falseOrigin.northing;      // northing of true origin, -100km\n        const F0 = nationalGrid.scaleFactor;                // 0.9996012717\n\n        const e2 = 1 - (b*b)/(a*a);                          // eccentricity squared\n        const n = (a-b)/(a+b), n2 = n*n, n3 = n*n*n;         // n, n², n³\n\n        const cosφ = Math.cos(φ), sinφ = Math.sin(φ);\n        const ν = a*F0/Math.sqrt(1-e2*sinφ*sinφ);            // nu = transverse radius of curvature\n        const ρ = a*F0*(1-e2)/Math.pow(1-e2*sinφ*sinφ, 1.5); // rho = meridional radius of curvature\n        const η2 = ν/ρ-1;                                    // eta = ?\n\n        const Ma = (1 + n + (5/4)*n2 + (5/4)*n3) * (φ-φ0);\n        const Mb = (3*n + 3*n*n + (21/8)*n3) * Math.sin(φ-φ0) * Math.cos(φ+φ0);\n        const Mc = ((15/8)*n2 + (15/8)*n3) * Math.sin(2*(φ-φ0)) * Math.cos(2*(φ+φ0));\n        const Md = (35/24)*n3 * Math.sin(3*(φ-φ0)) * Math.cos(3*(φ+φ0));\n        const M = b * F0 * (Ma - Mb + Mc - Md);              // meridional arc\n\n        const cos3φ = cosφ*cosφ*cosφ;\n        const cos5φ = cos3φ*cosφ*cosφ;\n        const tan2φ = Math.tan(φ)*Math.tan(φ);\n        const tan4φ = tan2φ*tan2φ;\n\n        const I = M + N0;\n        const II = (ν/2)*sinφ*cosφ;\n        const III = (ν/24)*sinφ*cos3φ*(5-tan2φ+9*η2);\n        const IIIA = (ν/720)*sinφ*cos5φ*(61-58*tan2φ+tan4φ);\n        const IV = ν*cosφ;\n        const V = (ν/6)*cos3φ*(ν/ρ-tan2φ);\n        const VI = (ν/120) * cos5φ * (5 - 18*tan2φ + tan4φ + 14*η2 - 58*tan2φ*η2);\n\n        const Δλ = λ-λ0;\n        const Δλ2 = Δλ*Δλ, Δλ3 = Δλ2*Δλ, Δλ4 = Δλ3*Δλ, Δλ5 = Δλ4*Δλ, Δλ6 = Δλ5*Δλ;\n\n        let N = I + II*Δλ2 + III*Δλ4 + IIIA*Δλ6;\n        let E = E0 + IV*Δλ + V*Δλ3 + VI*Δλ5;\n\n        N = Number(N.toFixed(3)); // round to mm precision\n        E = Number(E.toFixed(3));\n\n        try {\n            return new OsGridRef(E, N); // note: gets truncated to SW corner of 1m grid square\n        } catch (e) {\n            throw new Error(`${e.message} from (${point.lat.toFixed(6)},${point.lon.toFixed(6)}).toOsGrid()`);\n        }\n    }\n\n\n    /**\n     * Override LatLonEllipsoidal.convertDatum() with version which returns LatLon_OsGridRef.\n     */\n    convertDatum(toDatum) {\n        const osgbED = super.convertDatum(toDatum); // returns LatLonEllipsoidal_Datum\n        const osgbOSGR = new LatLon_OsGridRef(osgbED.lat, osgbED.lon, osgbED.height, osgbED.datum);\n        return osgbOSGR;\n    }\n\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport { OsGridRef as default, LatLon_OsGridRef as LatLon, Dms };\n","// index.ts\nimport { isNumber } from \"@turf/helpers\";\nfunction getCoord(coord) {\n  if (!coord) {\n    throw new Error(\"coord is required\");\n  }\n  if (!Array.isArray(coord)) {\n    if (coord.type === \"Feature\" && coord.geometry !== null && coord.geometry.type === \"Point\") {\n      return [...coord.geometry.coordinates];\n    }\n    if (coord.type === \"Point\") {\n      return [...coord.coordinates];\n    }\n  }\n  if (Array.isArray(coord) && coord.length >= 2 && !Array.isArray(coord[0]) && !Array.isArray(coord[1])) {\n    return [...coord];\n  }\n  throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\nfunction getCoords(coords) {\n  if (Array.isArray(coords)) {\n    return coords;\n  }\n  if (coords.type === \"Feature\") {\n    if (coords.geometry !== null) {\n      return coords.geometry.coordinates;\n    }\n  } else {\n    if (coords.coordinates) {\n      return coords.coordinates;\n    }\n  }\n  throw new Error(\n    \"coords must be GeoJSON Feature, Geometry Object or an Array\"\n  );\n}\nfunction containsNumber(coordinates) {\n  if (coordinates.length > 1 && isNumber(coordinates[0]) && isNumber(coordinates[1])) {\n    return true;\n  }\n  if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n    return containsNumber(coordinates[0]);\n  }\n  throw new Error(\"coordinates must only contain numbers\");\n}\nfunction geojsonType(value, type, name) {\n  if (!type || !name) {\n    throw new Error(\"type and name required\");\n  }\n  if (!value || value.type !== type) {\n    throw new Error(\n      \"Invalid input to \" + name + \": must be a \" + type + \", given \" + value.type\n    );\n  }\n}\nfunction featureOf(feature, type, name) {\n  if (!feature) {\n    throw new Error(\"No feature passed\");\n  }\n  if (!name) {\n    throw new Error(\".featureOf() requires a name\");\n  }\n  if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n    throw new Error(\n      \"Invalid input to \" + name + \", Feature with geometry required\"\n    );\n  }\n  if (!feature.geometry || feature.geometry.type !== type) {\n    throw new Error(\n      \"Invalid input to \" + name + \": must be a \" + type + \", given \" + feature.geometry.type\n    );\n  }\n}\nfunction collectionOf(featureCollection, type, name) {\n  if (!featureCollection) {\n    throw new Error(\"No featureCollection passed\");\n  }\n  if (!name) {\n    throw new Error(\".collectionOf() requires a name\");\n  }\n  if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n    throw new Error(\n      \"Invalid input to \" + name + \", FeatureCollection required\"\n    );\n  }\n  for (const feature of featureCollection.features) {\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n      throw new Error(\n        \"Invalid input to \" + name + \", Feature with geometry required\"\n      );\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n      throw new Error(\n        \"Invalid input to \" + name + \": must be a \" + type + \", given \" + feature.geometry.type\n      );\n    }\n  }\n}\nfunction getGeom(geojson) {\n  if (geojson.type === \"Feature\") {\n    return geojson.geometry;\n  }\n  return geojson;\n}\nfunction getType(geojson, _name) {\n  if (geojson.type === \"FeatureCollection\") {\n    return \"FeatureCollection\";\n  }\n  if (geojson.type === \"GeometryCollection\") {\n    return \"GeometryCollection\";\n  }\n  if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n    return geojson.geometry.type;\n  }\n  return geojson.type;\n}\nexport {\n  collectionOf,\n  containsNumber,\n  featureOf,\n  geojsonType,\n  getCoord,\n  getCoords,\n  getGeom,\n  getType\n};\n//# sourceMappingURL=index.js.map","// index.ts\nimport { getCoord } from \"@turf/invariant\";\nimport { radiansToLength, degreesToRadians } from \"@turf/helpers\";\nfunction distance(from, to, options = {}) {\n  var coordinates1 = getCoord(from);\n  var coordinates2 = getCoord(to);\n  var dLat = degreesToRadians(coordinates2[1] - coordinates1[1]);\n  var dLon = degreesToRadians(coordinates2[0] - coordinates1[0]);\n  var lat1 = degreesToRadians(coordinates1[1]);\n  var lat2 = degreesToRadians(coordinates2[1]);\n  var a = Math.pow(Math.sin(dLat / 2), 2) + Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n  return radiansToLength(\n    2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)),\n    options.units\n  );\n}\nvar turf_distance_default = distance;\nexport {\n  turf_distance_default as default,\n  distance\n};\n//# sourceMappingURL=index.js.map","import { distance as turfDistance } from '@turf/distance'\nimport { point as TurfPoint } from '@turf/helpers'\nimport { defaults } from '../store/constants'\n\nconst getBearing = (coord1, coord2) => {\n  const east = coord1[0] < coord2[0] && 'east'\n  const west = coord1[0] > coord2[0] && 'west'\n  const north = coord1[1] < coord2[1] && 'north'\n  const south = coord1[1] > coord2[1] && 'south'\n  return [east, west, north, south].filter(b => b && typeof b === 'string')\n}\n\nconst getUnits = (metres) => {\n  const MAX_METRES = 800\n  const MAX_MILES = 5000\n  const RATIO = 0.621371\n  let units\n  if (metres < MAX_METRES) {\n    units = `${metres} metres`\n  } else if (metres < MAX_MILES) {\n    units = (metres / 1000 * RATIO).toFixed(1) + ' miles'\n  } else {\n    units = Math.round((metres / 1000) * RATIO) + ' miles'\n  }\n  return units\n}\n\nconst getDirection = (coord1, coord2) => {\n  coord1 = coord1.map(n => n > 1000 ? Math.round(n) : Math.round(n * 100000) / 100000)\n  coord2 = coord2.map(n => n > 1000 ? Math.round(n) : Math.round(n * 100000) / 100000)\n  const ns1 = [coord1[0], coord1[1]]\n  const ns2 = [coord1[0], coord2[1]]\n  const ew1 = [coord1[0], coord1[1]]\n  const ew2 = [coord2[0], coord1[1]]\n  const nsd = getDistance(ns1, ns2)\n  const ewd = getDistance(ew1, ew2)\n  const bearing = getBearing(coord1, coord2)\n  const ewc = bearing.filter(b => ['east', 'west'].includes(b)).join('')\n  const nsc = bearing.filter(b => ['north', 'south'].includes(b)).join('')\n  const ew = ewc ? `${ewc} ${getUnits(ewd)}` : ''\n  const ns = nsc ? `${nsc} ${getUnits(nsd)}` : ''\n  return `${ns + (ewc && nsc ? ', ' : '') + ew}`\n}\n\nconst getArea = (bounds) => {\n  const ew = getDistance([bounds[0], bounds[1]], [bounds[2], bounds[1]])\n  const ns = getDistance([bounds[0], bounds[1]], [bounds[0], bounds[3]])\n  return `${getUnits(ew)} by ${getUnits(ns)}`\n}\n\nconst getBoundsChange = (oCentre, originalZoom, isMaxZoom, isMinZoom, center, zoom) => {\n  const isSameCentre = JSON.stringify(oCentre) === JSON.stringify(center)\n  const isSameZoom = originalZoom === zoom\n  const isMove = oCentre && originalZoom && !(isSameCentre && isSameZoom)\n  const maxZoom = isMaxZoom ? ' (Maximum zoom reached)' : ''\n  const minZoom = isMinZoom ? ' (Minimum zoom reached)' : ''\n  let change = ''\n  if (isMove) {\n    if (!isSameCentre && !isSameZoom) {\n      change = `New area${maxZoom}${minZoom}. `\n    } else if (!isSameCentre) {\n      change = `Map move: ${getDirection(oCentre, center)}. `\n    } else {\n      const direction = zoom > originalZoom ? 'in' : 'out'\n      change = `Zoomed ${direction}${maxZoom}${minZoom}. `\n    }\n  }\n  return change\n}\n\nconst getSelectedStatus = (featuresInViewport, id) => {\n  const total = featuresInViewport.length\n  const index = featuresInViewport.findIndex(f => f.id === id)\n  return index >= 0 && `${total} feature${total !== 1 ? 's' : ''} in this area. ${featuresInViewport[index].name}. ${index + 1} of ${total} highlighted.`\n}\n\nconst getOffsetBoundingClientRect = (el) => {\n  const offsetParent = el.closest('[data-fm-main]') || document.body\n  return offsetParent.getBoundingClientRect()\n}\n\nconst isCirclePolygon = (geometry) => {\n  const coordinates = geometry?.coordinates?.[0]\n\n  // Expect exactly 64 points\n  if (coordinates?.length !== 65) {\n    return false\n  }\n\n  // Compute approximate centre using two opposite points\n  const [x1, y1] = coordinates[0]\n  const [x2, y2] = coordinates[32]\n  const center = [(x1 + x2) / 2, (y1 + y2) / 2]\n\n  let minDist = Infinity; let maxDist = -Infinity\n  let minEdge = Infinity; let maxEdge = -Infinity\n\n  for (let i = 0; i < 64; i++) {\n    const [xA, yA] = coordinates[i]\n    const [xB, yB] = coordinates[(i + 1) % 64]\n\n    // Distance from center\n    const dist = Math.hypot(xA - center[0], yA - center[1])\n    minDist = Math.min(minDist, dist)\n    maxDist = Math.max(maxDist, dist)\n\n    // Distance to next vertex (edge length)\n    const edgeDist = Math.hypot(xB - xA, yB - yA)\n    minEdge = Math.min(minEdge, edgeDist)\n    maxEdge = Math.max(maxEdge, edgeDist)\n  }\n\n  // Need to revist tolerance as they depend on size too\n  const WSG84_TOLERANCE = 0.3\n  const BNG_TOLERANCE = 0.3\n  const tolerance = detectCoordinateType(center) === 'WSG84' ? WSG84_TOLERANCE : BNG_TOLERANCE\n\n  return Math.abs(maxDist - minDist) < tolerance && Math.abs(maxEdge - minEdge) < tolerance\n}\n\n// const metresToImperial = (metres) => {\n//   const MILE = 1609.344\n//   const YARD = 0.9144\n//   const pluralize = (value, singular, plural) => `${value} ${value === 1 ? singular : plural}`\n//   if (metres >= MILE) {\n//     const miles = Math.floor(metres / MILE)\n//     const remainder = metres % MILE\n//     const yards = Math.floor(remainder / YARD)\n//     return `${pluralize(miles, 'mile', 'miles')}, ${pluralize(yards, 'yard', 'yards')}`\n//   } else {\n//     const yards = Math.floor(metres / YARD)\n//     return `${pluralize(yards, 'yard', 'yards')}`\n//   }\n// }\n\nconst metresToKilometres = (metres) => {\n  const KILOMETRE = 1000\n  // const pluralize = (value, singular, plural) => `${value} ${value === 1 ? singular : plural}`\n  if (metres >= KILOMETRE) {\n    const kilometres = metres / KILOMETRE\n    const roundedKm = Math.round(kilometres * 100) / 100\n    return `${roundedKm}km`\n  } else {\n    // return `${pluralize(Math.round(metres), 'metre', 'metres')}`\n    return `${Math.round(metres)}m`\n  }\n}\n\nexport const squareMetresToKm = (metres) => {\n  const SQ_KM = 1_000_000\n  if (metres >= SQ_KM) {\n    let km2 = (metres / SQ_KM).toFixed(2)\n    km2 = Number(km2).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 2 })\n    return `${km2}km²`\n  } else {\n    return `${Math.ceil(metres).toLocaleString()}m²`\n  }\n}\n\nexport const parseDimensions = (dimensions) => {\n  const { area, center, width, radius } = dimensions\n  const areaDisplay = area ? squareMetresToKm(area) : null\n  const centerDisplay = center ? center.map(c => Math.round(c)).join(', ') : null\n  const widthDisplay = width ? metresToKilometres(width) : null\n  const radiusDisplay = radius ? metresToKilometres(radius) : null\n  return { ...dimensions, areaDisplay, centerDisplay, widthDisplay, radiusDisplay }\n}\n\nexport const detectCoordinateType = (coords) => {\n  if (coords.length === 3) {\n    return 'BNG' // If a third value exists (zone), it's UTM\n  }\n  const [x, y] = coords\n  if (x >= -180 && x <= 180 && y >= -90 && y <= 90) {\n    return 'WSG84'\n  }\n  if (x > 180 && y > 90) {\n    return 'BNG'\n  }\n  return 'Unknown'\n}\n\nexport const getDistance = (coord1, coord2) => {\n  let distance\n  if (coord1[0] > 1000) {\n    const x = Math.abs(coord1[0] - coord2[0])\n    const y = Math.abs(coord1[1] - coord2[1])\n    const dist = Math.sqrt((Math.pow(x, 2)) + (Math.pow(y, 2)))\n    distance = dist\n  } else {\n    const p1 = new TurfPoint(coord1)\n    const p2 = new TurfPoint(coord2)\n    distance = turfDistance(p1, p2, { units: 'metres' })\n  }\n  return Math.round(distance)\n}\n\nexport const getFocusPadding = (el, scale) => {\n  let padding\n  if (el) {\n    const parent = getOffsetBoundingClientRect(el)\n    const box = el.getBoundingClientRect()\n    const boxX = box.x || box.left\n    const boxY = box.y || box.top\n    const parentX = parent.x || parent.left\n    const parentY = parent.y || parent.top\n    padding = {\n      top: (boxY - parentY) / scale,\n      left: (boxX - parentX) / scale,\n      right: (parent.width - box.width - (boxX - parentX)) / scale,\n      bottom: (parent.height - box.height - (boxY - parentY)) / scale\n    }\n  }\n  // Addresses repid browser resizing\n  const isValid = Object.values(padding).every(i => i >= 0)\n  return isValid && padding\n}\n\nexport const getFocusBounds = (el, scale) => {\n  let bounds\n  if (el) {\n    const parent = getOffsetBoundingClientRect(el)\n    const box = el.getBoundingClientRect()\n    const m = 10\n    bounds = [[\n      ((box.x || box.left) - (parent.x || parent.left) + m) / scale,\n      (((box.y || box.top) - (parent.y || parent.top)) + box.height - m) / scale\n    ], [\n      (box.width + ((box.x || box.left) - (parent.x || parent.left)) - m) / scale,\n      ((box.y || box.top) - (parent.y || parent.top) + m) / scale\n    ]]\n  }\n  return bounds\n}\n\nexport const getMapPixel = (el, scale) => {\n  const parent = getOffsetBoundingClientRect(el)\n  const box = el.getBoundingClientRect()\n  const left = ((box.x || box.left) - (parent.x || parent.left)) / scale\n  const top = ((box.y || box.top) - (parent.y || parent.top)) / scale\n  const offsetLeft = (box.width / 2) / scale\n  const offsetTop = (box.height / 2) / scale\n  const point = [left + offsetLeft, top + offsetTop]\n  return point\n}\n\nexport const getDescription = (place, bounds, focusBounds, features, isFocusArea) => {\n  const { featuresTotal, featuresFocusTotal, isFeaturesInMap, isPixelFeaturesAtPixel, isPixelFeaturesInMap } = features || {}\n  const activeFeaturesTotal = isFocusArea ? featuresFocusTotal : featuresTotal\n  const activeBounds = isFocusArea ? focusBounds : bounds\n  let text = ''\n  if (activeFeaturesTotal) {\n    text = `${activeFeaturesTotal} feature${activeFeaturesTotal === 1 ? '' : 's'} in this area. `\n  } else if (isPixelFeaturesAtPixel) {\n    text = 'Data visible at the center coordinate. '\n  } else if (isPixelFeaturesInMap) {\n    text = 'No data visible at the center coordinate. '\n  } else if (isFeaturesInMap) {\n    text = 'No feature data in this area. '\n  } else {\n    // Null\n  }\n\n  const display = isFocusArea ? 'Focus area ' : ''\n  const newPlace = place ? `Approximate centre ${place}. ` : ''\n  const newArea = `Covering ${getArea(activeBounds)}. `\n  const findPlace = place ? '' : 'Use ALT plus I to find closest place'\n\n  return `${display}${newPlace}${newArea}${text}${findPlace}`\n}\n\nexport const getStatus = ({ action, isBoundsChange, place, isFocusArea, prevZoom, prevCenter, center, bounds, focusBounds, zoom, isMaxZoom, isMinZoom, features, label, featureId }) => {\n  let status = null\n  if (label) {\n    status = label\n  } else if (featureId) {\n    const selected = getSelectedStatus(features?.featuresInViewport, featureId)\n    status = selected\n  } else if (action === 'GEOCODE') {\n    status = getDescription(place, bounds, focusBounds, features, isFocusArea)\n  } else if (action === 'DATA') {\n    status = 'Map change: new data. Use ALT plus I to get new details'\n  } else if (isBoundsChange) {\n    const direction = getBoundsChange(prevCenter, prevZoom, isMaxZoom, isMinZoom, center, zoom)\n    const description = getDescription(place, bounds, focusBounds, features, isFocusArea)\n    status = `${direction}${description}`\n  } else {\n    status = ''\n  }\n  return status\n}\n\nexport const getPlace = (isUserInitiated, action, oPlace, newPlace) => {\n  let place\n  if (!isUserInitiated) {\n    if (action === 'RESET') {\n      place = oPlace\n    } else {\n      place = newPlace\n    }\n  }\n  return place\n}\n\nexport const parseCentre = (value, srid) => {\n  const mb = defaults[`MAX_BOUNDS_${srid}`]\n  let isInRange\n  let coords = value?.split(',')\n  // Query string formed correctly\n  if (!(Array.isArray(coords) && coords?.length === 3)) {\n    return null\n  }\n  // Coords are numbers\n  coords = coords.slice(0, 2).map(x => parseFloat(x))\n  coords = !coords.some(isNaN) && coords\n  if (!coords) {\n    return null\n  }\n  // Coords are within the valid range\n  if (srid === '27700') {\n    isInRange = !!coords.filter(c => c >= 0).length\n  } else {\n    isInRange = (coords[0] > mb[0] && coords[0] < mb[2]) && (coords[1] > mb[1] && coords[1] < mb[3])\n  }\n  return isInRange ? coords : null\n}\n\nexport const parseZoom = value => {\n  const coords = value?.split(',')\n  if (!(Array.isArray(coords) && coords?.length === 3)) {\n    return null\n  }\n  const zoom = parseFloat(coords[2])\n  return !zoom.isNaN ? zoom : null\n}\n\nexport const getShortcutKey = (e, featuresViewport) => {\n  const number = e.code.slice(-1)\n  const hasFeature = featuresViewport.length >= number\n  const id = hasFeature ? featuresViewport[number - 1].id : ''\n  return id\n}\n\nexport const getFeatureShape = (feature) => {\n  if (isCirclePolygon(feature?.geometry)) {\n    return 'circle'\n  }\n  if (feature?.geometry?.type?.toLowerCase() === 'polygon') {\n    const coords = feature.geometry?.coordinates\n    const flatCoords = (coords && Array.from(new Set(coords.flat(2)))) || null\n    return flatCoords?.length === 4 ? 'square' : 'polygon'\n  }\n  return null\n}\n\nexport const spatialNavigate = (direction, start, pixels) => {\n  const quadrant = pixels.filter(p => {\n    const offsetX = Math.abs(p[0] - start[0])\n    const offsetY = Math.abs(p[1] - start[1])\n    let isQuadrant = false\n    if (direction === 'up') {\n      isQuadrant = p[1] <= start[1] && offsetY >= offsetX\n    } else if (direction === 'down') {\n      isQuadrant = p[1] > start[1] && offsetY >= offsetX\n    } else if (direction === 'left') {\n      isQuadrant = p[0] <= start[0] && offsetY < offsetX\n    } else {\n      isQuadrant = p[0] > start[0] && offsetY < offsetX\n    }\n    return isQuadrant && (JSON.stringify(p) !== JSON.stringify(start))\n  })\n  if (!quadrant.length) {\n    quadrant.push(start)\n  }\n  const pythagorean = (a, b) => Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))\n  const distances = quadrant.map(p => pythagorean(Math.abs(start[0] - p[0]), Math.abs(start[1] - p[1])))\n  const closest = quadrant[distances.indexOf(Math.min(...distances))]\n  return pixels.findIndex(i => JSON.stringify(i) === JSON.stringify(closest))\n}\n\nexport const getScale = (size) => {\n  return { small: 1, medium: 1.5, large: 2 }[size] || 1\n}\n\nexport const getPoint = (el, e, scale) => {\n  const { left, top } = el.getBoundingClientRect()\n  const { clientX, clientY } = e.nativeEvent\n  const x = clientX - left\n  const y = clientY - top\n  return [x / scale, y / scale]\n}\n\nexport const getStyle = (styles = []) => {\n  const validStyles = styles.filter(s => defaults.STYLES.includes(s.name))\n  const style = window.localStorage.getItem('style')\n  return validStyles.find(s => s.name === style) || validStyles.find(s => s.name === 'default')\n}\n","import config from './config.json'\nimport { detectCoordinateType } from '../../lib/viewport'\nimport { LatLon } from 'geodesy/osgridref.js'\n\nconst place = ({ NAME1, POPULATED_PLACE, COUNTY_UNITARY, REGION }) => {\n  return `${NAME1}${POPULATED_PLACE ? ', ' + POPULATED_PLACE : ''}${COUNTY_UNITARY ? ', ' + COUNTY_UNITARY : ''}, ${REGION}`\n}\n\nclass ReverseGeocode {\n  constructor (transformGeocodeRequest = (u) => u) {\n    this.transformGeocodeRequest = transformGeocodeRequest\n  }\n\n  async getNearest (zoom, coord) {\n    // Need to convert WSG84 to BNG\n    if (detectCoordinateType(coord) === 'WSG84') {\n      try {\n        const bng = (new LatLon(coord[1], coord[0])).toOsGrid()\n        coord = [bng.easting, bng.northing]\n      } catch (err) {\n        console.log(err)\n        return null\n      }\n    }\n\n    let url = config.URL\n    url = url.replace('{easting}', Math.round(coord[0])).replace('{northing}', Math.round(coord[1]))\n    const response = await fetch(await this.transformGeocodeRequest(url))\n    const json = await response.json()\n    return json.results ? place(json.results[0].GAZETTEER_ENTRY) : null\n  }\n}\n\nexport default ReverseGeocode\n"],"names":["earthRadius","factors","centimeters","centimetres","degrees","Math","PI","feet","inches","kilometers","kilometres","meters","metres","miles","millimeters","millimetres","nauticalmiles","radians","yards","feature","geom","properties","options","feat","type","id","bbox","geometry","point","coordinates","Error","Array","isArray","length","isNumber","polygon","ring","j","lineString","featureCollection","features","fc","multiLineString","multiPolygon","radiansToLength","units","factor","lengthToRadians","distance","radiansToDegrees","degreesToRadians","num","isNaN","dmsSeparator","Dms","separator","char","parse","dms","parseFloat","isFinite","Number","dmsParts","String","trim","replace","split","splice","NaN","deg","test","toDms","format","dp","undefined","Infinity","abs","d","m","s","toFixed","floor","slice","toLat","lat","wrap90","toLon","lon","wrap180","toBrng","brng","wrap360","fromLocale","str","locale","toLocaleString","thousands","decimal","toLocale","compassPoint","bearing","precision","includes","RangeError","n","round","x","p","prototype","toRadians","this","toDegrees","Vector3d","constructor","y","z","TypeError","sqrt","plus","v","minus","times","dividedBy","dot","cross","negate","unit","norm","angleTo","sign","atan2","rotateAround","axis","angle","a","sin","c","cos","t","r","rp","toString","ellipsoids","WGS84","b","f","datums","ellipsoid","Object","freeze","LatLonEllipsoidal","height","_lat","_lon","_height","latitude","lng","longitude","datum","_datum","args","ll","JSON","stringify","toCartesian","referenceFrame","h","eSq","Cartesian","equals","EPSILON","epoch","dpHeight","super","toLatLon","e2","Airy1830","AiryModified","Bessel1841","Clarke1866","Clarke1880IGN","GRS80","Intl1924","WGS72","ED50","transform","ETRS89","Irl1975","NAD27","NAD83","NTF","OSGB36","Potsdam","TokyoJapan","keys","forEach","e","LatLonEllipsoidal_Datum","pop","convertDatum","toDatum","cartesian","Cartesian_Datum","deprecatedDatum","console","info","latLon","oldCartesian","map","newCartesian","applyTransform","x1","y1","z1","tx","ty","tz","rx","ry","rz","nationalGrid","trueOrigin","falseOrigin","easting","northing","scaleFactor","OsGridRef","E","N","E0","N0","F0","n2","n3","M","pow","tan","dE","dE2","dE3","dE4","dE5","LatLon_OsGridRef","gridref","match","l1","toUpperCase","charCodeAt","l2","e100km","n100km","en","padEnd","digits","useGrouping","minimumIntegerDigits","maximumFractionDigits","letterPair","fromCharCode","padStart","toOsGrid","message","osgbED","getCoord","coord","getCoords","coords","getGeom","geojson","from","to","coordinates1","coordinates2","dLat","dLon","lat1","lat2","getUnits","RATIO","concat","getOffsetBoundingClientRect","el","closest","document","body","getBoundingClientRect","metresToKilometres","roundedKm","squareMetresToKm","SQ_KM","km2","minimumFractionDigits","ceil","parseDimensions","dimensions","area","center","width","radius","areaDisplay","centerDisplay","join","widthDisplay","radiusDisplay","_objectSpread","detectCoordinateType","_coords","_slicedToArray","getDistance","coord1","coord2","p1","TurfPoint","p2","turfDistance","getFocusPadding","scale","padding","parent","box","boxX","left","boxY","top","parentX","parentY","right","bottom","values","every","i","getFocusBounds","bounds","getMapPixel","getDescription","place","focusBounds","isFocusArea","_ref","featuresTotal","featuresFocusTotal","isFeaturesInMap","isPixelFeaturesAtPixel","isPixelFeaturesInMap","activeFeaturesTotal","activeBounds","text","display","newPlace","newArea","ew","ns","getArea","findPlace","getStatus","_ref2","featuresInViewport","total","index","action","isBoundsChange","prevZoom","prevCenter","zoom","isMaxZoom","isMinZoom","label","featureId","status","findIndex","name","direction","oCentre","originalZoom","isSameCentre","isSameZoom","maxZoom","minZoom","change","ns1","ns2","ew1","ew2","nsd","ewd","filter","getBearing","ewc","nsc","getDirection","getBoundsChange","description","getPlace","isUserInitiated","oPlace","parseCentre","value","srid","_coords2","mb","defaults","some","parseZoom","getShortcutKey","featuresViewport","number","code","getFeatureShape","_feature$geometry","_geometry$coordinates","_coordinates$","_coordinates$2","minDist","maxDist","minEdge","maxEdge","_coordinates$i","xA","yA","_coordinates","xB","yB","dist","hypot","min","max","edgeDist","tolerance","isCirclePolygon","toLowerCase","_feature$geometry2","flatCoords","Set","flat","spatialNavigate","start","pixels","quadrant","offsetX","offsetY","push","distances","indexOf","apply","getScale","size","small","medium","large","getPoint","_el$getBoundingClient","_e$nativeEvent","nativeEvent","clientX","clientY","getStyle","validStyles","arguments","STYLES","style","window","localStorage","getItem","find","_regeneratorRuntime","hasOwnProperty","o","defineProperty","Symbol","iterator","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","l","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","displayName","isGeneratorFunction","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","prev","charAt","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","_defineProperties","_toPropertyKey","key","toPrimitive","_toPrimitive","ReverseGeocode","transformGeocodeRequest","_classCallCheck","_callee","bng","url","response","json","_context","LatLon","t0","log","config","t1","fetch","t2","results","NAME1","POPULATED_PLACE","COUNTY_UNITARY","REGION","GAZETTEER_ENTRY","_getNearest","_next","_throw","_x","_x2"],"sourceRoot":""}