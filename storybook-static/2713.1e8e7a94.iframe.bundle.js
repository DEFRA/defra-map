"use strict";(self.webpackChunk_defra_flood_map=self.webpackChunk_defra_flood_map||[]).push([[2713],{"./node_modules/@arcgis/core/layers/graphics/sources/support/uploadAssetErrors.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$1:()=>u,H2:()=>c,MT:()=>l,VP:()=>i,WF:()=>p,Wt:()=>r,XQ:()=>m,hK:()=>d,nS:()=>a,uh:()=>t,xY:()=>n});var _core_Error_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@arcgis/core/core/Error.js");const e="upload-assets",o=()=>new Error;class r extends _core_Error_js__WEBPACK_IMPORTED_MODULE_0__.A{constructor(){super(`${e}:unsupported`,"Layer does not support asset uploads.",o())}}class t extends _core_Error_js__WEBPACK_IMPORTED_MODULE_0__.A{constructor(){super(`${e}:no-glb-support`,"Layer does not support glb.",o())}}class n extends _core_Error_js__WEBPACK_IMPORTED_MODULE_0__.A{constructor(){super(`${e}:no-supported-source`,"No supported external source found",o())}}class u extends _core_Error_js__WEBPACK_IMPORTED_MODULE_0__.A{constructor(){super(`${e}:not-base-64`,"Expected gltf data in base64 format after conversion.",o())}}class p extends _core_Error_js__WEBPACK_IMPORTED_MODULE_0__.A{constructor(){super(`${e}:unable-to-prepare-options`,"Unable to prepare uploadAsset request options.",o())}}class a extends _core_Error_js__WEBPACK_IMPORTED_MODULE_0__.A{constructor(s,r){super(`${e}:bad-response`,`Bad response. Uploaded ${s} items and received ${r} results.`,o())}}class d extends _core_Error_js__WEBPACK_IMPORTED_MODULE_0__.A{constructor(s,r){super(`${e}-layer:upload-failed`,`Failed to upload mesh file ${s}. Error code: ${r?.code??"-1"}. Error message: ${r?.messages??"unknown"}`,o())}}class c extends _core_Error_js__WEBPACK_IMPORTED_MODULE_0__.A{constructor(s){super(`${e}-layer:unsupported-format`,`The service allowed us to upload an asset of FormatID ${s}, but it does not list it in its supported formats.`,o())}}class l extends _core_Error_js__WEBPACK_IMPORTED_MODULE_0__.A{constructor(){super(`${e}:convert3D-failed`,"convert3D failed.")}}class i extends _core_Error_js__WEBPACK_IMPORTED_MODULE_0__.A{constructor(){super("invalid-input:no-model","No supported model found")}}class m extends _core_Error_js__WEBPACK_IMPORTED_MODULE_0__.A{constructor(){super("invalid-input:multiple-models","Multiple supported models found")}}},"./node_modules/@arcgis/core/layers/graphics/sources/support/uploadAssets.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{uploadAssets:()=>B});var request=__webpack_require__("./node_modules/@arcgis/core/request.js"),has=__webpack_require__("./node_modules/@arcgis/core/core/has.js"),Logger=__webpack_require__("./node_modules/@arcgis/core/core/Logger.js"),promiseUtils=__webpack_require__("./node_modules/@arcgis/core/core/promiseUtils.js"),time=__webpack_require__("./node_modules/@arcgis/core/core/time.js"),urlUtils=__webpack_require__("./node_modules/@arcgis/core/core/urlUtils.js"),uuid=__webpack_require__("./node_modules/@arcgis/core/core/uuid.js"),SpatialReference=__webpack_require__("./node_modules/@arcgis/core/geometry/SpatialReference.js"),External=__webpack_require__("./node_modules/@arcgis/core/geometry/support/meshUtils/External.js"),uploadAssetErrors=__webpack_require__("./node_modules/@arcgis/core/layers/graphics/sources/support/uploadAssetErrors.js");const uploadProgressWeights_e={upload:{createFromFiles:.8,loadMesh:.2},uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};var arcgisLayerUrl=__webpack_require__("./node_modules/@arcgis/core/layers/support/arcgisLayerUrl.js"),handleUtils=__webpack_require__("./node_modules/@arcgis/core/core/handleUtils.js"),MapUtils=__webpack_require__("./node_modules/@arcgis/core/core/MapUtils.js");function progressUtils_i(s,t=s=>{},e){return new n(s,t,e)}class n{constructor(s,t=s=>{},e){if(this.onProgress=t,this.taskName=e,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,"number"==typeof s){this._weights={};for(let t=0;t<s;t++){const e=t,r=1/s;this._weights[e]=r,this._progressMap.set(e,0)}}else this._weights=s;this.emitProgress()}emitProgress(){let s=0;for(const[t,e]of this._progressMap.entries())s+=e*this._weights[t];if(1===s&&(0,has.A)("enable-feature:esri-3dofl-upload-timings")){const s=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${s} sec`);for(const[t,e]of this._timingsMap){const r=Math.round(e.end-e.start)/1e3,o=Math.round(r/s*100);console.log(this.taskName??"Task",{stepKey:t,stepTime:r,relativeTime:o})}}this.onProgress(s)}setProgress(s,e){if(this._progressMap.set(s,e),(0,has.A)("enable-feature:esri-3dofl-upload-timings")){const r=performance.now();this._startTime??=r;const o=(0,MapUtils.tE)(this._timingsMap,s,(()=>({start:r,end:0})));1===e&&(o.end=r)}this.emitProgress()}simulate(s,t){return a((t=>this.setProgress(s,t)),t)}makeOnProgress(s){return t=>this.setProgress(s,t)}}function a(t=s=>{},e=l){const r=performance.now();t(0);const o=setInterval((()=>{const s=performance.now()-r,o=1-Math.exp(-s/e);t(o)}),g);return(0,handleUtils.hA)((()=>{clearInterval(o),t(1)}))}function progressUtils_h(s,t=c){return(0,time.gr)((0,time.Kp)(s*f/t))}const c=10,p=10,f=8e-6,g=(0,time.l5)(50),l=(0,time.l5)(1e3),uploads_n=1e6,i=20*uploads_n,uploads_p=2e9,uploads_l=3;async function uploads_m({data:m,name:f,description:d},u,h){let w=null;try{const y=(0,urlUtils.fj)(u,"uploads"),j=(0,urlUtils.fj)(y,"info"),{data:g}=await(0,request.A)(j,{query:{f:"json"},responseType:"json"});(0,promiseUtils.Te)(h);const q=(0,arcgisLayerUrl.Wo)(u),z=g.maxUploadFileSize*uploads_n,T=q?uploads_p:z,U=q?Math.min(i,z):i;if(m.size>T)throw new Error("Data too large");const A=(0,urlUtils.fj)(y,"register"),{data:E}=await(0,request.A)(A,{query:{f:"json",itemName:(e=f,e.replaceAll("/","_").replaceAll("\\","_")),description:d},responseType:"json",method:"post"});if((0,promiseUtils.Te)(h),!E.success)throw new Error("Registration failed");const{itemID:P}=E.item;w=(0,urlUtils.fj)(y,P);const D=(0,urlUtils.fj)(w,"uploadPart"),I=Math.ceil(m.size/U),M=new Array;for(let e=0;e<I;++e)M.push(m.slice(e*U,Math.min((e+1)*U,m.size)));const v=M.slice().reverse(),x=new Array,F=progressUtils_i(I,h?.onProgress,"uploadItem"),_=async()=>{for(;0!==v.length;){const t=M.length-v.length,r=v.pop(),s=new FormData,n=F.simulate(t,progressUtils_h(r.size));try{s.append("f","json"),s.append("file",r),s.append("partId",`${t}`);const{data:a}=await(0,request.A)(D,{timeout:0,body:s,responseType:"json",method:"post"});if((0,promiseUtils.Te)(h),!a.success)throw new Error("Part upload failed")}finally{n.remove()}}};for(let e=0;e<uploads_l&&0!==v.length;++e)x.push(_());await Promise.all(x);const b=(0,urlUtils.fj)(w,"commit"),{data:C}=await(0,request.A)(b,{query:{f:"json",parts:M.map(((e,o)=>o)).join(",")},responseType:"json",method:"post"});if((0,promiseUtils.Te)(h),!C.success)throw new Error("Commit failed");return C.item}catch(y){if(null!=w){const o=(0,urlUtils.fj)(w,"delete");await(0,request.A)(o,{query:{f:"json"},responseType:"json",method:"post"})}throw y}var e}var infoFor3D=__webpack_require__("./node_modules/@arcgis/core/layers/support/infoFor3D.js"),meshSpatialReferenceScaleUtils=__webpack_require__("./node_modules/@arcgis/core/layers/support/meshSpatialReferenceScaleUtils.js"),meshFeatureAttributes=__webpack_require__("./node_modules/@arcgis/core/rest/support/meshFeatureAttributes.js");async function B(e,s,t){const r=e.length;if(!r)return t?.onProgress?.(1),[];const o=progressUtils_i(r,t?.onProgress,"uploadAssets");return Promise.all(e.map(((e,r)=>async function q(e,{layer:s,ongoingUploads:t},r){const o=t.get(e);if(o)return o;if(!function ne(e){return!!e.infoFor3D&&!!e.url}(s))throw new uploadAssetErrors.Wt;if(function L(e,s){const{parsedUrl:t}=s;return null!=t&&e.metadata.externalSources.some((e=>(0,External.eN)(e,t)))}(e,s))return r?.onProgress?.(1),e;const n=async function H(e,s,r){const{metadata:o}=e,{displaySource:n}=o,a=W(n?.source,s,{checkForConversionRequired:(0,has.A)("enable-feature:georeferenced-uploads")}),i=null!=a?async function $(e,s,t){return{source:await Q(e,s,t),original:!0,unitConversionDisabled:!0}}(a,s,r):o.externalSources.length>0?async function J(e,s,t){const r=ae(s),{externalSources:o}=e.metadata,n=function M(e,s){for(const t of e){const e=W(t.source,s);if(e)return e}return null}(o,s);if(!n)throw new uploadAssetErrors.xY;const a=progressUtils_i(uploadProgressWeights_e.uploadConvertibleSource,t?.onProgress,"uploadConvertibleSource"),i=await Q(n,s,{onProgress:a.makeOnProgress("uploadEditSource")});e.addExternalSources([{source:i,original:!0}]);const c=n.reduce(((e,{asset:s})=>s instanceof File?e+s.size:e),0),u=a.simulate("serviceAssetsToGlb",function m(s,t=p){return(0,time.gr)((0,time.Kp)(s*f/t))}(c));try{const{source:o,transform:n,origin:a}=await async function se(e,s,t){const r=e.map((({assetName:e,parts:s})=>({assetName:e,assetHash:s[0].partHash})));let o;try{const e=(0,urlUtils.fj)(s.parsedUrl.path,"convert3D"),n=s.capabilities?.operations.supportsAsyncConvert3D;o=(await(n?oe:re)(e,{query:{f:"json",assets:JSON.stringify(r),transportType:"esriTransportTypeUrl",targetFormat:t,async:n},responseType:"json",timeout:0})).data}catch(n){throw new uploadAssetErrors.MT}return function te(e,s){const t={source:s.assets.map((s=>{const t=(0,infoFor3D.R_)(s.contentType,e.infoFor3D.supportedFormats);if(!t)throw new uploadAssetErrors.H2(t);return new External.Qp(s.assetName,s.contentType,[new External.Bq(s.assetURL,s.assetHash)])})),origin:void 0,transform:void 0};if((0,has.A)("enable-feature:georeferenced-uploads")&&s.transform){if(t.transform=(0,meshFeatureAttributes.f)(s.transform),s.spatialReference){const e=SpatialReference.A.fromJSON(s.spatialReference);t.origin=(0,meshFeatureAttributes.V)(s.transform,e)}}else t.transform=(0,meshSpatialReferenceScaleUtils.Z)(e.spatialReference);return t}(s,o)}(i,s,r);return e.transform=n,a&&(e.metadata.georeferenced=!0,t?.useAssetOrigin&&(e.vertexSpace.origin=[a.x,a.y,a.z??0],e.spatialReference=a.spatialReference)),{source:o,unitConversionDisabled:!0}}finally{u.remove()}}(e,s,r):async function z(e,s,t){const r=progressUtils_i(uploadProgressWeights_e.uploadLocalMesh,t?.onProgress,"uploadLocalMesh"),o=async function G(e,s,r){const o=ae(s),n=await e.load(r),a=await n.toBinaryGLTF({origin:n.origin,signal:r?.signal,ignoreLocalTransform:!0,unitConversionDisabled:!0});return(0,promiseUtils.Te)(r),{blob:new Blob([a],{type:"model/gltf-binary"}),assetName:`${(0,uuid.yS)()}.glb`,assetType:o}}(e,s,{...t,onProgress:r.makeOnProgress("meshToAssetBlob")});return{source:await V([o],s,{...t,onProgress:r.makeOnProgress("uploadAssetBlobs")}),extent:e.extent.clone(),original:!0}}(e,s,r),c=await i;return(0,promiseUtils.Te)(r),e.addExternalSources([c]),e}(e,s,r);t.set(e,n);try{await n}finally{t.delete(e)}return e}(e,s,{...t,onProgress:o.makeOnProgress(r)}))))}function W(e,{infoFor3D:s},t={}){if(!e)return null;const{supportedFormats:r,editFormats:o}=s,n=(0,External.WN)(e),a=new Array,i=(0,infoFor3D.ND)(s),c=(0,infoFor3D.nr)(s);let u=!1;for(const l of n){const e=K(l,r);if(!e)return null;const{assetType:s}=e;if(t.checkForConversionRequired&&(s===i||s===c))return null;o.includes(s)&&(u=!0),a.push(e)}return u?a:null}function K(e,s){const t=(0,External.fH)(e,s);return t?{asset:e,assetType:t}:null}async function Q(e,s,t){return V(e.map((e=>async function X(e,s){const{asset:r,assetType:o}=e;if(r instanceof File)return{blob:r,assetName:r.name,assetType:o};const n=await r.toBlob(s);return(0,promiseUtils.Te)(s),{blob:n,assetName:r.assetName,assetType:o}}(e,t))),s,t)}async function V(e,s,r){const o=progressUtils_i(uploadProgressWeights_e.uploadAssetBlobs,r?.onProgress,"uploadAssetBlobs"),n=await function Z(e,s,r){const o=progressUtils_i(e.length,r?.onProgress,"prepareAssetItems");return Promise.all(e.map((async(e,n)=>{const a=async function Y(e,s,r){const{blob:n,assetType:a,assetName:c}=e;let u=null;try{const e=await uploads_m({data:n,name:c},s.url,r);(0,promiseUtils.Te)(r),u={assetType:a,assetUploadId:e.itemID}}catch(l){(0,promiseUtils.QP)(l),function ie(){return Logger.A.getLogger("esri.layers.graphics.sources.support.uploadAssets")}().warnOnce(`Service ${s.url} does not support the REST Uploads API.`)}if(!u){const e=await(0,urlUtils._0)(n);if((0,promiseUtils.Te)(r),!e.isBase64)throw new uploadAssetErrors.$1;u={assetType:a,assetData:e.data}}if(!u)throw new uploadAssetErrors.WF;return{item:u,assetName:c}}(await e,s,{...r,onProgress:o.makeOnProgress(n)});return(0,promiseUtils.Te)(r),a})))}(e,s,{...r,onProgress:o.makeOnProgress("prepareAssetItems")});(0,promiseUtils.Te)(r);const a=n.map((({item:e})=>e)),{uploadResults:i}=await _(a,s,{...r,onProgress:o.makeOnProgress("uploadAssetItems")});return(0,promiseUtils.Te)(r),e.map(((e,t)=>function ee(e,s,t){const{success:r}=s;if(!r){const{error:t}=s;throw new uploadAssetErrors.hK(e.assetName,t)}const{assetHash:o}=s,{assetName:n,item:{assetType:a}}=e,{infoFor3D:{supportedFormats:i}}=t,c=(0,infoFor3D.Fm)(a,i);if(!c)throw new uploadAssetErrors.H2(a);return new External.Qp(n,c,[new External.Bq(`${t.parsedUrl.path}/assets/${o}`,o)])}(n[t],i[t],s)))}async function _(s,r,o){const n=a(o?.onProgress);try{const n=await(0,request.A)((0,urlUtils.fj)(r.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(s)},method:"post",responseType:"json"});if((0,promiseUtils.Te)(o),n.data.uploadResults.length!==s.length)throw new uploadAssetErrors.nS(s.length,n.data.uploadResults.length);return n.data}finally{n.remove()}}function re(s,t){return(0,request.A)(s,t)}async function oe(s,t){const o=(await(0,request.A)(s,t)).data.statusUrl;for(;;){const s=(await(0,request.A)(o,{query:{f:"json"},responseType:"json"})).data;switch(s.status){case"Completed":return(0,request.A)(s.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(s.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await(0,promiseUtils.Pl)(ce)}}function ae({infoFor3D:e}){const s=(0,infoFor3D.U9)(e);if(!s)throw new uploadAssetErrors.uh;return s}const ce=(0,time.l5)(1e3)},"./node_modules/@arcgis/core/layers/support/meshSpatialReferenceScaleUtils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>t});var _core_unitUtils_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@arcgis/core/core/unitUtils.js"),_geometry_support_MeshTransform_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@arcgis/core/geometry/support/MeshTransform.js");function t(t){const e=1/(0,_core_unitUtils_js__WEBPACK_IMPORTED_MODULE_0__.GA)(t,1);return 1!==e?new _geometry_support_MeshTransform_js__WEBPACK_IMPORTED_MODULE_1__.A({scale:[e,e,e]}):void 0}},"./node_modules/@arcgis/core/rest/support/meshFeatureAttributes.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{V:()=>n,f:()=>i});var _geometry_Point_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@arcgis/core/geometry/Point.js"),_geometry_support_MeshTransform_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@arcgis/core/geometry/support/MeshTransform.js");function n(o,n,i=r){return new _geometry_Point_js__WEBPACK_IMPORTED_MODULE_0__.default({x:o[i.originX],y:o[i.originY],z:o[i.originZ],spatialReference:n})}function i(t,n=r){return new _geometry_support_MeshTransform_js__WEBPACK_IMPORTED_MODULE_1__.A({translation:[t[n.translationX],-t[n.translationZ],t[n.translationY]],rotationAxis:[t[n.rotationX],-t[n.rotationZ],t[n.rotationY]],rotationAngle:t[n.rotationDeg],scale:[t[n.scaleX],t[n.scaleZ],t[n.scaleY]]})}const r={originX:"originX",originY:"originY",originZ:"originZ",translationX:"translationX",translationY:"translationY",translationZ:"translationZ",scaleX:"scaleX",scaleY:"scaleY",scaleZ:"scaleZ",rotationX:"rotationX",rotationY:"rotationY",rotationZ:"rotationZ",rotationDeg:"rotationDeg"}}}]);